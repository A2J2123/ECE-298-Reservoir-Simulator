
Resevoir-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08007a8c  08007a8c  00008a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f00  08007f00  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007f00  08007f00  00008f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f08  08007f08  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f08  08007f08  00008f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f0c  08007f0c  00008f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007f10  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000070  08007f80  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08007f80  0000943c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1c7  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218f  00000000  00000000  00018267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  0001a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5f  00000000  00000000  0001b280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001871c  00000000  00000000  0001bddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b8a  00000000  00000000  000344fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b68c  00000000  00000000  00045085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0711  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004864  00000000  00000000  000e0754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000e4fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a74 	.word	0x08007a74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08007a74 	.word	0x08007a74

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ADC_Select_CH>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void ADC_Select_CH(int CH)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
    switch(CH)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	f200 814b 	bhi.w	8000834 <ADC_Select_CH+0x2b4>
 800059e:	a201      	add	r2, pc, #4	@ (adr r2, 80005a4 <ADC_Select_CH+0x24>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005e5 	.word	0x080005e5
 80005a8:	08000607 	.word	0x08000607
 80005ac:	08000629 	.word	0x08000629
 80005b0:	0800064b 	.word	0x0800064b
 80005b4:	0800066d 	.word	0x0800066d
 80005b8:	0800068f 	.word	0x0800068f
 80005bc:	080006b1 	.word	0x080006b1
 80005c0:	080006d3 	.word	0x080006d3
 80005c4:	080006f5 	.word	0x080006f5
 80005c8:	08000717 	.word	0x08000717
 80005cc:	08000737 	.word	0x08000737
 80005d0:	08000757 	.word	0x08000757
 80005d4:	08000777 	.word	0x08000777
 80005d8:	08000797 	.word	0x08000797
 80005dc:	080007b7 	.word	0x080007b7
 80005e0:	080007d7 	.word	0x080007d7
    {
        case 0:
            sConfig.Channel = ADC_CHANNEL_0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	4619      	mov	r1, r3
 80005f2:	4892      	ldr	r0, [pc, #584]	@ (800083c <ADC_Select_CH+0x2bc>)
 80005f4:	f002 fa9c 	bl	8002b30 <HAL_ADC_ConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f000 80fb 	beq.w	80007f6 <ADC_Select_CH+0x276>
            {
                Error_Handler();
 8000600:	f001 fcc4 	bl	8001f8c <Error_Handler>
            }
            break;
 8000604:	e0f7      	b.n	80007f6 <ADC_Select_CH+0x276>
        case 1:
            sConfig.Channel = ADC_CHANNEL_1;
 8000606:	2301      	movs	r3, #1
 8000608:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4619      	mov	r1, r3
 8000614:	4889      	ldr	r0, [pc, #548]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000616:	f002 fa8b 	bl	8002b30 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	f000 80ec 	beq.w	80007fa <ADC_Select_CH+0x27a>
            {
                Error_Handler();
 8000622:	f001 fcb3 	bl	8001f8c <Error_Handler>
            }
            break;
 8000626:	e0e8      	b.n	80007fa <ADC_Select_CH+0x27a>
        case 2:
            sConfig.Channel = ADC_CHANNEL_2;
 8000628:	2302      	movs	r3, #2
 800062a:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 800062c:	2301      	movs	r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	4619      	mov	r1, r3
 8000636:	4881      	ldr	r0, [pc, #516]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000638:	f002 fa7a 	bl	8002b30 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	f000 80dd 	beq.w	80007fe <ADC_Select_CH+0x27e>
            {
                Error_Handler();
 8000644:	f001 fca2 	bl	8001f8c <Error_Handler>
            }
            break;
 8000648:	e0d9      	b.n	80007fe <ADC_Select_CH+0x27e>
        case 3:
            sConfig.Channel = ADC_CHANNEL_3;
 800064a:	2303      	movs	r3, #3
 800064c:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	4619      	mov	r1, r3
 8000658:	4878      	ldr	r0, [pc, #480]	@ (800083c <ADC_Select_CH+0x2bc>)
 800065a:	f002 fa69 	bl	8002b30 <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	f000 80ce 	beq.w	8000802 <ADC_Select_CH+0x282>
            {
                Error_Handler();
 8000666:	f001 fc91 	bl	8001f8c <Error_Handler>
            }
            break;
 800066a:	e0ca      	b.n	8000802 <ADC_Select_CH+0x282>
        case 4:
            sConfig.Channel = ADC_CHANNEL_4;
 800066c:	2304      	movs	r3, #4
 800066e:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	4619      	mov	r1, r3
 800067a:	4870      	ldr	r0, [pc, #448]	@ (800083c <ADC_Select_CH+0x2bc>)
 800067c:	f002 fa58 	bl	8002b30 <HAL_ADC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	f000 80bf 	beq.w	8000806 <ADC_Select_CH+0x286>
            {
                Error_Handler();
 8000688:	f001 fc80 	bl	8001f8c <Error_Handler>
            }
            break;
 800068c:	e0bb      	b.n	8000806 <ADC_Select_CH+0x286>
        case 5:
            sConfig.Channel = ADC_CHANNEL_5;
 800068e:	2305      	movs	r3, #5
 8000690:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	4619      	mov	r1, r3
 800069c:	4867      	ldr	r0, [pc, #412]	@ (800083c <ADC_Select_CH+0x2bc>)
 800069e:	f002 fa47 	bl	8002b30 <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f000 80b0 	beq.w	800080a <ADC_Select_CH+0x28a>
            {
                Error_Handler();
 80006aa:	f001 fc6f 	bl	8001f8c <Error_Handler>
            }
            break;
 80006ae:	e0ac      	b.n	800080a <ADC_Select_CH+0x28a>
        case 6:
            sConfig.Channel = ADC_CHANNEL_6;
 80006b0:	2306      	movs	r3, #6
 80006b2:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	4619      	mov	r1, r3
 80006be:	485f      	ldr	r0, [pc, #380]	@ (800083c <ADC_Select_CH+0x2bc>)
 80006c0:	f002 fa36 	bl	8002b30 <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	f000 80a1 	beq.w	800080e <ADC_Select_CH+0x28e>
            {
                Error_Handler();
 80006cc:	f001 fc5e 	bl	8001f8c <Error_Handler>
            }
            break;
 80006d0:	e09d      	b.n	800080e <ADC_Select_CH+0x28e>
        case 7:
            sConfig.Channel = ADC_CHANNEL_7;
 80006d2:	2307      	movs	r3, #7
 80006d4:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4619      	mov	r1, r3
 80006e0:	4856      	ldr	r0, [pc, #344]	@ (800083c <ADC_Select_CH+0x2bc>)
 80006e2:	f002 fa25 	bl	8002b30 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	f000 8092 	beq.w	8000812 <ADC_Select_CH+0x292>
            {
                Error_Handler();
 80006ee:	f001 fc4d 	bl	8001f8c <Error_Handler>
            }
            break;
 80006f2:	e08e      	b.n	8000812 <ADC_Select_CH+0x292>
        case 8:
            sConfig.Channel = ADC_CHANNEL_8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	4619      	mov	r1, r3
 8000702:	484e      	ldr	r0, [pc, #312]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000704:	f002 fa14 	bl	8002b30 <HAL_ADC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	f000 8083 	beq.w	8000816 <ADC_Select_CH+0x296>
            {
                Error_Handler();
 8000710:	f001 fc3c 	bl	8001f8c <Error_Handler>
            }
            break;
 8000714:	e07f      	b.n	8000816 <ADC_Select_CH+0x296>
        case 9:
            sConfig.Channel = ADC_CHANNEL_9;
 8000716:	2309      	movs	r3, #9
 8000718:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	4619      	mov	r1, r3
 8000724:	4845      	ldr	r0, [pc, #276]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000726:	f002 fa03 	bl	8002b30 <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d074      	beq.n	800081a <ADC_Select_CH+0x29a>
            {
                Error_Handler();
 8000730:	f001 fc2c 	bl	8001f8c <Error_Handler>
            }
            break;
 8000734:	e071      	b.n	800081a <ADC_Select_CH+0x29a>
        case 10:
            sConfig.Channel = ADC_CHANNEL_10;
 8000736:	230a      	movs	r3, #10
 8000738:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	4619      	mov	r1, r3
 8000744:	483d      	ldr	r0, [pc, #244]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000746:	f002 f9f3 	bl	8002b30 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d066      	beq.n	800081e <ADC_Select_CH+0x29e>
            {
                Error_Handler();
 8000750:	f001 fc1c 	bl	8001f8c <Error_Handler>
            }
            break;
 8000754:	e063      	b.n	800081e <ADC_Select_CH+0x29e>
        case 11:
            sConfig.Channel = ADC_CHANNEL_11;
 8000756:	230b      	movs	r3, #11
 8000758:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	4835      	ldr	r0, [pc, #212]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000766:	f002 f9e3 	bl	8002b30 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d058      	beq.n	8000822 <ADC_Select_CH+0x2a2>
            {
                Error_Handler();
 8000770:	f001 fc0c 	bl	8001f8c <Error_Handler>
            }
            break;
 8000774:	e055      	b.n	8000822 <ADC_Select_CH+0x2a2>
        case 12:
            sConfig.Channel = ADC_CHANNEL_12;
 8000776:	230c      	movs	r3, #12
 8000778:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 800077a:	2301      	movs	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	4619      	mov	r1, r3
 8000784:	482d      	ldr	r0, [pc, #180]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000786:	f002 f9d3 	bl	8002b30 <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d04a      	beq.n	8000826 <ADC_Select_CH+0x2a6>
            {
                Error_Handler();
 8000790:	f001 fbfc 	bl	8001f8c <Error_Handler>
            }
            break;
 8000794:	e047      	b.n	8000826 <ADC_Select_CH+0x2a6>
        case 13:
            sConfig.Channel = ADC_CHANNEL_13;
 8000796:	230d      	movs	r3, #13
 8000798:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4619      	mov	r1, r3
 80007a4:	4825      	ldr	r0, [pc, #148]	@ (800083c <ADC_Select_CH+0x2bc>)
 80007a6:	f002 f9c3 	bl	8002b30 <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d03c      	beq.n	800082a <ADC_Select_CH+0x2aa>
            {
                Error_Handler();
 80007b0:	f001 fbec 	bl	8001f8c <Error_Handler>
            }
            break;
 80007b4:	e039      	b.n	800082a <ADC_Select_CH+0x2aa>
        case 14:
            sConfig.Channel = ADC_CHANNEL_14;
 80007b6:	230e      	movs	r3, #14
 80007b8:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	4619      	mov	r1, r3
 80007c4:	481d      	ldr	r0, [pc, #116]	@ (800083c <ADC_Select_CH+0x2bc>)
 80007c6:	f002 f9b3 	bl	8002b30 <HAL_ADC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d02e      	beq.n	800082e <ADC_Select_CH+0x2ae>
            {
                Error_Handler();
 80007d0:	f001 fbdc 	bl	8001f8c <Error_Handler>
            }
            break;
 80007d4:	e02b      	b.n	800082e <ADC_Select_CH+0x2ae>
        case 15:
            sConfig.Channel = ADC_CHANNEL_15;
 80007d6:	230f      	movs	r3, #15
 80007d8:	60bb      	str	r3, [r7, #8]
            sConfig.Rank = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	4619      	mov	r1, r3
 80007e4:	4815      	ldr	r0, [pc, #84]	@ (800083c <ADC_Select_CH+0x2bc>)
 80007e6:	f002 f9a3 	bl	8002b30 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d020      	beq.n	8000832 <ADC_Select_CH+0x2b2>
            {
                Error_Handler();
 80007f0:	f001 fbcc 	bl	8001f8c <Error_Handler>
            }
            break;
 80007f4:	e01d      	b.n	8000832 <ADC_Select_CH+0x2b2>
            break;
 80007f6:	bf00      	nop
 80007f8:	e01c      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 80007fa:	bf00      	nop
 80007fc:	e01a      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 80007fe:	bf00      	nop
 8000800:	e018      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 8000802:	bf00      	nop
 8000804:	e016      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 8000806:	bf00      	nop
 8000808:	e014      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 800080a:	bf00      	nop
 800080c:	e012      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 800080e:	bf00      	nop
 8000810:	e010      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 8000812:	bf00      	nop
 8000814:	e00e      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 8000816:	bf00      	nop
 8000818:	e00c      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 800081a:	bf00      	nop
 800081c:	e00a      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 800081e:	bf00      	nop
 8000820:	e008      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 8000822:	bf00      	nop
 8000824:	e006      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 8000826:	bf00      	nop
 8000828:	e004      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 800082a:	bf00      	nop
 800082c:	e002      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 800082e:	bf00      	nop
 8000830:	e000      	b.n	8000834 <ADC_Select_CH+0x2b4>
            break;
 8000832:	bf00      	nop
    }
}
 8000834:	bf00      	nop
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000008c 	.word	0x2000008c

08000840 <DIGITS_Display>:


void DIGITS_Display(uint8_t DIGIT)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	@ 0x30
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	uint8_t DIGIT_B = DIGIT % 10;
 800084a:	79fa      	ldrb	r2, [r7, #7]
 800084c:	4b62      	ldr	r3, [pc, #392]	@ (80009d8 <DIGITS_Display+0x198>)
 800084e:	fba3 1302 	umull	r1, r3, r3, r2
 8000852:	08d9      	lsrs	r1, r3, #3
 8000854:	460b      	mov	r3, r1
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	440b      	add	r3, r1
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t DIGIT_A = (DIGIT - DIGIT_B) / 10;
 8000862:	79fa      	ldrb	r2, [r7, #7]
 8000864:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	4a5c      	ldr	r2, [pc, #368]	@ (80009dc <DIGITS_Display+0x19c>)
 800086c:	fb82 1203 	smull	r1, r2, r2, r3
 8000870:	1092      	asrs	r2, r2, #2
 8000872:	17db      	asrs	r3, r3, #31
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	uint8_t DIGITA_VAL = 0x0F & DIGIT_A; //mask off higher4 bits
 800087a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	 int Abit0 = (DIGITA_VAL ) & 1;  	// extract Abit0 of the 4-bit value
 8000886:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
	 int Abit1 = (DIGITA_VAL >> 1) & 1;  // extract Abit1 of the 4-bit value
 8000890:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	b2db      	uxtb	r3, r3
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
	 int Abit2 = (DIGITA_VAL >> 2) & 1;  // extract Abit2 of the 4-bit value
 800089e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80008a2:	089b      	lsrs	r3, r3, #2
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
	 int Abit3 = (DIGITA_VAL >> 3) & 1;  // extract Abit3 of the 4-bit value
 80008ac:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80008b0:	08db      	lsrs	r3, r3, #3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	61fb      	str	r3, [r7, #28]

	 uint8_t DIGITB_VAL = 0x0F & DIGIT_B; //mask off higher4 bits
 80008ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	76fb      	strb	r3, [r7, #27]
	 int Bbit0 = (DIGITB_VAL ) & 1;  	// extract Bbit0 of the 4-bit value
 80008c4:	7efb      	ldrb	r3, [r7, #27]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
	 int Bbit1 = (DIGITB_VAL >> 1) & 1;  // extract Bbit1 of the 4-bit value
 80008cc:	7efb      	ldrb	r3, [r7, #27]
 80008ce:	085b      	lsrs	r3, r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
	 int Bbit2 = (DIGITB_VAL >> 2) & 1;  // extract Bbit2 of the 4-bit value
 80008d8:	7efb      	ldrb	r3, [r7, #27]
 80008da:	089b      	lsrs	r3, r3, #2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
	 int Bbit3 = (DIGITB_VAL >> 3) & 1;  // extract Bbit3 of the 4-bit value
 80008e4:	7efb      	ldrb	r3, [r7, #27]
 80008e6:	08db      	lsrs	r3, r3, #3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]

	 if (Abit0 == (0))
 80008f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d105      	bne.n	8000902 <DIGITS_Display+0xc2>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A0_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2108      	movs	r1, #8
 80008fa:	4839      	ldr	r0, [pc, #228]	@ (80009e0 <DIGITS_Display+0x1a0>)
 80008fc:	f002 fe76 	bl	80035ec <HAL_GPIO_WritePin>
 8000900:	e004      	b.n	800090c <DIGITS_Display+0xcc>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A0_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2108      	movs	r1, #8
 8000906:	4836      	ldr	r0, [pc, #216]	@ (80009e0 <DIGITS_Display+0x1a0>)
 8000908:	f002 fe70 	bl	80035ec <HAL_GPIO_WritePin>

	 }
	 if (Abit1 == (0))
 800090c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800090e:	2b00      	cmp	r3, #0
 8000910:	d105      	bne.n	800091e <DIGITS_Display+0xde>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2104      	movs	r1, #4
 8000916:	4832      	ldr	r0, [pc, #200]	@ (80009e0 <DIGITS_Display+0x1a0>)
 8000918:	f002 fe68 	bl	80035ec <HAL_GPIO_WritePin>
 800091c:	e004      	b.n	8000928 <DIGITS_Display+0xe8>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	2104      	movs	r1, #4
 8000922:	482f      	ldr	r0, [pc, #188]	@ (80009e0 <DIGITS_Display+0x1a0>)
 8000924:	f002 fe62 	bl	80035ec <HAL_GPIO_WritePin>

	 }
	 if (Abit2 == (0))
 8000928:	6a3b      	ldr	r3, [r7, #32]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d105      	bne.n	800093a <DIGITS_Display+0xfa>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2102      	movs	r1, #2
 8000932:	482b      	ldr	r0, [pc, #172]	@ (80009e0 <DIGITS_Display+0x1a0>)
 8000934:	f002 fe5a 	bl	80035ec <HAL_GPIO_WritePin>
 8000938:	e004      	b.n	8000944 <DIGITS_Display+0x104>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2102      	movs	r1, #2
 800093e:	4828      	ldr	r0, [pc, #160]	@ (80009e0 <DIGITS_Display+0x1a0>)
 8000940:	f002 fe54 	bl	80035ec <HAL_GPIO_WritePin>

	 }
	 if (Abit3 == (0))
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d105      	bne.n	8000956 <DIGITS_Display+0x116>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A3_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2101      	movs	r1, #1
 800094e:	4824      	ldr	r0, [pc, #144]	@ (80009e0 <DIGITS_Display+0x1a0>)
 8000950:	f002 fe4c 	bl	80035ec <HAL_GPIO_WritePin>
 8000954:	e004      	b.n	8000960 <DIGITS_Display+0x120>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A3_Pin, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	2101      	movs	r1, #1
 800095a:	4821      	ldr	r0, [pc, #132]	@ (80009e0 <DIGITS_Display+0x1a0>)
 800095c:	f002 fe46 	bl	80035ec <HAL_GPIO_WritePin>

	 }


	 if (Bbit0 == (0))
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d105      	bne.n	8000972 <DIGITS_Display+0x132>
	 {
		 HAL_GPIO_WritePin(GPIOA, DIGIT_B0_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2110      	movs	r1, #16
 800096a:	481e      	ldr	r0, [pc, #120]	@ (80009e4 <DIGITS_Display+0x1a4>)
 800096c:	f002 fe3e 	bl	80035ec <HAL_GPIO_WritePin>
 8000970:	e004      	b.n	800097c <DIGITS_Display+0x13c>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOA, DIGIT_B0_Pin, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	2110      	movs	r1, #16
 8000976:	481b      	ldr	r0, [pc, #108]	@ (80009e4 <DIGITS_Display+0x1a4>)
 8000978:	f002 fe38 	bl	80035ec <HAL_GPIO_WritePin>

	 }
	 if (Bbit1 == (0))
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d105      	bne.n	800098e <DIGITS_Display+0x14e>
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2101      	movs	r1, #1
 8000986:	4818      	ldr	r0, [pc, #96]	@ (80009e8 <DIGITS_Display+0x1a8>)
 8000988:	f002 fe30 	bl	80035ec <HAL_GPIO_WritePin>
 800098c:	e004      	b.n	8000998 <DIGITS_Display+0x158>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2101      	movs	r1, #1
 8000992:	4815      	ldr	r0, [pc, #84]	@ (80009e8 <DIGITS_Display+0x1a8>)
 8000994:	f002 fe2a 	bl	80035ec <HAL_GPIO_WritePin>

	 }
	 if (Bbit2 == (0))
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d105      	bne.n	80009aa <DIGITS_Display+0x16a>
	 {
		 HAL_GPIO_WritePin(GPIOA, DIGIT_B2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2102      	movs	r1, #2
 80009a2:	4810      	ldr	r0, [pc, #64]	@ (80009e4 <DIGITS_Display+0x1a4>)
 80009a4:	f002 fe22 	bl	80035ec <HAL_GPIO_WritePin>
 80009a8:	e004      	b.n	80009b4 <DIGITS_Display+0x174>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOA, DIGIT_B2_Pin, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2102      	movs	r1, #2
 80009ae:	480d      	ldr	r0, [pc, #52]	@ (80009e4 <DIGITS_Display+0x1a4>)
 80009b0:	f002 fe1c 	bl	80035ec <HAL_GPIO_WritePin>

	 }
	 if (Bbit3 == (0))
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d105      	bne.n	80009c6 <DIGITS_Display+0x186>
	 {
		 HAL_GPIO_WritePin(GPIOA, DIGIT_B3_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2101      	movs	r1, #1
 80009be:	4809      	ldr	r0, [pc, #36]	@ (80009e4 <DIGITS_Display+0x1a4>)
 80009c0:	f002 fe14 	bl	80035ec <HAL_GPIO_WritePin>
	 else
	 {
		 HAL_GPIO_WritePin(GPIOA, DIGIT_B3_Pin, GPIO_PIN_SET);

	 }
}
 80009c4:	e004      	b.n	80009d0 <DIGITS_Display+0x190>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_B3_Pin, GPIO_PIN_SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2101      	movs	r1, #1
 80009ca:	4806      	ldr	r0, [pc, #24]	@ (80009e4 <DIGITS_Display+0x1a4>)
 80009cc:	f002 fe0e 	bl	80035ec <HAL_GPIO_WritePin>
}
 80009d0:	bf00      	nop
 80009d2:	3730      	adds	r7, #48	@ 0x30
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	cccccccd 	.word	0xcccccccd
 80009dc:	66666667 	.word	0x66666667
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020400 	.word	0x40020400

080009ec <HCSR04_TRIG_PULSE>:

void HCSR04_TRIG_PULSE(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <HCSR04_TRIG_PULSE+0x40>)
 80009fa:	f002 fdf7 	bl	80035ec <HAL_GPIO_WritePin>
	for (int j = 0; j != 48; j = j + 1) {}
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	e002      	b.n	8000a0a <HCSR04_TRIG_PULSE+0x1e>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3301      	adds	r3, #1
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b30      	cmp	r3, #48	@ 0x30
 8000a0e:	d1f9      	bne.n	8000a04 <HCSR04_TRIG_PULSE+0x18>
	HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <HCSR04_TRIG_PULSE+0x40>)
 8000a18:	f002 fde8 	bl	80035ec <HAL_GPIO_WritePin>
	HAL_Delay(30);
 8000a1c:	201e      	movs	r0, #30
 8000a1e:	f001 fe9f 	bl	8002760 <HAL_Delay>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40020400 	.word	0x40020400

08000a30 <MOTOR_Run>:

void MOTOR_Run(int speed)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	if(speed >= 0) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db16      	blt.n	8000a6c <MOTOR_Run+0x3c>
		TIM3->CCR3 = ((float)speed/100)*60000;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a48:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000aa4 <MOTOR_Run+0x74>
 8000a4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a50:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000aa8 <MOTOR_Run+0x78>
 8000a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a58:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MOTOR_Run+0x7c>)
 8000a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a5e:	ee17 2a90 	vmov	r2, s15
 8000a62:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR1 = 0;
 8000a64:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MOTOR_Run+0x7c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	635a      	str	r2, [r3, #52]	@ 0x34
	} else {
		TIM3->CCR1 = ((float)speed/-100)*60000;
		TIM3->CCR3 = 0;
	}
}
 8000a6a:	e015      	b.n	8000a98 <MOTOR_Run+0x68>
		TIM3->CCR1 = ((float)speed/-100)*60000;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	ee07 3a90 	vmov	s15, r3
 8000a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a76:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000ab0 <MOTOR_Run+0x80>
 8000a7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a7e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000aa8 <MOTOR_Run+0x78>
 8000a82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a86:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MOTOR_Run+0x7c>)
 8000a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a8c:	ee17 2a90 	vmov	r2, s15
 8000a90:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR3 = 0;
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MOTOR_Run+0x7c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	42c80000 	.word	0x42c80000
 8000aa8:	476a6000 	.word	0x476a6000
 8000aac:	40000400 	.word	0x40000400
 8000ab0:	c2c80000 	.word	0xc2c80000

08000ab4 <SERVO_Run>:

void SERVO_Run(int position)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	int TIM2_CH1_STEP = 20;
 8000abc:	2314      	movs	r3, #20
 8000abe:	60fb      	str	r3, [r7, #12]
	while(TIM2_CH1_DCVAL != position) {
 8000ac0:	e01e      	b.n	8000b00 <SERVO_Run+0x4c>
		if(TIM2_CH1_DCVAL < position){
 8000ac2:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <SERVO_Run+0x60>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dd06      	ble.n	8000ada <SERVO_Run+0x26>
			TIM2_CH1_DCVAL += TIM2_CH1_STEP;
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <SERVO_Run+0x60>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8000b14 <SERVO_Run+0x60>)
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	e00a      	b.n	8000af0 <SERVO_Run+0x3c>
		}else if (TIM2_CH1_DCVAL > position){
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <SERVO_Run+0x60>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	da05      	bge.n	8000af0 <SERVO_Run+0x3c>
			TIM2_CH1_DCVAL -= TIM2_CH1_STEP;
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <SERVO_Run+0x60>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	4a09      	ldr	r2, [pc, #36]	@ (8000b14 <SERVO_Run+0x60>)
 8000aee:	6013      	str	r3, [r2, #0]
		}
		TIM2->CCR1 = TIM2_CH1_DCVAL;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <SERVO_Run+0x60>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000af8:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(5);
 8000afa:	2005      	movs	r0, #5
 8000afc:	f001 fe30 	bl	8002760 <HAL_Delay>
	while(TIM2_CH1_DCVAL != position) {
 8000b00:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <SERVO_Run+0x60>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d1db      	bne.n	8000ac2 <SERVO_Run+0xe>
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000004 	.word	0x20000004

08000b18 <RGBLED_Run>:

void RGBLED_Run(uint8_t colour)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
	switch(colour)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b05      	cmp	r3, #5
 8000b26:	d875      	bhi.n	8000c14 <RGBLED_Run+0xfc>
 8000b28:	a201      	add	r2, pc, #4	@ (adr r2, 8000b30 <RGBLED_Run+0x18>)
 8000b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2e:	bf00      	nop
 8000b30:	08000b49 	.word	0x08000b49
 8000b34:	08000b6b 	.word	0x08000b6b
 8000b38:	08000b8d 	.word	0x08000b8d
 8000b3c:	08000baf 	.word	0x08000baf
 8000b40:	08000bd1 	.word	0x08000bd1
 8000b44:	08000bf3 	.word	0x08000bf3
	{
	case 0: // purple
		HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b4e:	4833      	ldr	r0, [pc, #204]	@ (8000c1c <RGBLED_Run+0x104>)
 8000b50:	f002 fd4c 	bl	80035ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GRN_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2110      	movs	r1, #16
 8000b58:	4830      	ldr	r0, [pc, #192]	@ (8000c1c <RGBLED_Run+0x104>)
 8000b5a:	f002 fd47 	bl	80035ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2120      	movs	r1, #32
 8000b62:	482e      	ldr	r0, [pc, #184]	@ (8000c1c <RGBLED_Run+0x104>)
 8000b64:	f002 fd42 	bl	80035ec <HAL_GPIO_WritePin>
		break;
 8000b68:	e054      	b.n	8000c14 <RGBLED_Run+0xfc>
	case 1: // red
		HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b70:	482a      	ldr	r0, [pc, #168]	@ (8000c1c <RGBLED_Run+0x104>)
 8000b72:	f002 fd3b 	bl	80035ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GRN_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2110      	movs	r1, #16
 8000b7a:	4828      	ldr	r0, [pc, #160]	@ (8000c1c <RGBLED_Run+0x104>)
 8000b7c:	f002 fd36 	bl	80035ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2120      	movs	r1, #32
 8000b84:	4825      	ldr	r0, [pc, #148]	@ (8000c1c <RGBLED_Run+0x104>)
 8000b86:	f002 fd31 	bl	80035ec <HAL_GPIO_WritePin>
		break;
 8000b8a:	e043      	b.n	8000c14 <RGBLED_Run+0xfc>
	case 2: // green
		HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b92:	4822      	ldr	r0, [pc, #136]	@ (8000c1c <RGBLED_Run+0x104>)
 8000b94:	f002 fd2a 	bl	80035ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GRN_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	481f      	ldr	r0, [pc, #124]	@ (8000c1c <RGBLED_Run+0x104>)
 8000b9e:	f002 fd25 	bl	80035ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2120      	movs	r1, #32
 8000ba6:	481d      	ldr	r0, [pc, #116]	@ (8000c1c <RGBLED_Run+0x104>)
 8000ba8:	f002 fd20 	bl	80035ec <HAL_GPIO_WritePin>
		break;
 8000bac:	e032      	b.n	8000c14 <RGBLED_Run+0xfc>
	case 3: // blue
		HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bb4:	4819      	ldr	r0, [pc, #100]	@ (8000c1c <RGBLED_Run+0x104>)
 8000bb6:	f002 fd19 	bl	80035ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GRN_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2110      	movs	r1, #16
 8000bbe:	4817      	ldr	r0, [pc, #92]	@ (8000c1c <RGBLED_Run+0x104>)
 8000bc0:	f002 fd14 	bl	80035ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4814      	ldr	r0, [pc, #80]	@ (8000c1c <RGBLED_Run+0x104>)
 8000bca:	f002 fd0f 	bl	80035ec <HAL_GPIO_WritePin>
		break;
 8000bce:	e021      	b.n	8000c14 <RGBLED_Run+0xfc>
	case 4: // none
		HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bd6:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <RGBLED_Run+0x104>)
 8000bd8:	f002 fd08 	bl	80035ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GRN_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2110      	movs	r1, #16
 8000be0:	480e      	ldr	r0, [pc, #56]	@ (8000c1c <RGBLED_Run+0x104>)
 8000be2:	f002 fd03 	bl	80035ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2120      	movs	r1, #32
 8000bea:	480c      	ldr	r0, [pc, #48]	@ (8000c1c <RGBLED_Run+0x104>)
 8000bec:	f002 fcfe 	bl	80035ec <HAL_GPIO_WritePin>
		break;
 8000bf0:	e010      	b.n	8000c14 <RGBLED_Run+0xfc>
	case 5: // white
		HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bf8:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <RGBLED_Run+0x104>)
 8000bfa:	f002 fcf7 	bl	80035ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GRN_Pin, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2110      	movs	r1, #16
 8000c02:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <RGBLED_Run+0x104>)
 8000c04:	f002 fcf2 	bl	80035ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2120      	movs	r1, #32
 8000c0c:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <RGBLED_Run+0x104>)
 8000c0e:	f002 fced 	bl	80035ec <HAL_GPIO_WritePin>
		break;
 8000c12:	bf00      	nop
	}
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40020400 	.word	0x40020400

08000c20 <generate_random>:

int generate_random(int min, int max){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	return (rand() % (max-min+1))+ min;
 8000c2a:	f005 fd6f 	bl	800670c <rand>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	6839      	ldr	r1, [r7, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	1acb      	subs	r3, r1, r3
 8000c36:	3301      	adds	r3, #1
 8000c38:	fb92 f1f3 	sdiv	r1, r2, r3
 8000c3c:	fb01 f303 	mul.w	r3, r1, r3
 8000c40:	1ad2      	subs	r2, r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b091      	sub	sp, #68	@ 0x44
 8000c54:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c56:	f001 fd11 	bl	800267c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5a:	f000 fd89 	bl	8001770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5e:	f001 f829 	bl	8001cb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c62:	f000 ffd3 	bl	8001c0c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000c66:	f000 fffb 	bl	8001c60 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000c6a:	f000 fde1 	bl	8001830 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000c6e:	f000 fea7 	bl	80019c0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000c72:	f000 fe2f 	bl	80018d4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000c76:	f000 ff0b 	bl	8001a90 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000c7a:	f000 ff79 	bl	8001b70 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000c7e:	48af      	ldr	r0, [pc, #700]	@ (8000f3c <main+0x2ec>)
 8000c80:	f003 f9ce 	bl	8004020 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c84:	2100      	movs	r1, #0
 8000c86:	48ad      	ldr	r0, [pc, #692]	@ (8000f3c <main+0x2ec>)
 8000c88:	f003 fad6 	bl	8004238 <HAL_TIM_PWM_Start>
  TIM3->PSC = 16-1;
 8000c8c:	4bac      	ldr	r3, [pc, #688]	@ (8000f40 <main+0x2f0>)
 8000c8e:	220f      	movs	r2, #15
 8000c90:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM3->ARR = 20000-1;
 8000c92:	4bab      	ldr	r3, [pc, #684]	@ (8000f40 <main+0x2f0>)
 8000c94:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000c98:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM3->CCR1 = TIM2_CH1_DCVAL;
 8000c9a:	4baa      	ldr	r3, [pc, #680]	@ (8000f44 <main+0x2f4>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4ba8      	ldr	r3, [pc, #672]	@ (8000f40 <main+0x2f0>)
 8000ca0:	635a      	str	r2, [r3, #52]	@ 0x34

  //HAL_TIM_Base_Init(&htim3);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	48a8      	ldr	r0, [pc, #672]	@ (8000f48 <main+0x2f8>)
 8000ca6:	f003 fac7 	bl	8004238 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000caa:	2108      	movs	r1, #8
 8000cac:	48a6      	ldr	r0, [pc, #664]	@ (8000f48 <main+0x2f8>)
 8000cae:	f003 fac3 	bl	8004238 <HAL_TIM_PWM_Start>
  TIM3->PSC = 0;
 8000cb2:	4ba3      	ldr	r3, [pc, #652]	@ (8000f40 <main+0x2f0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM3->ARR = 60000;
 8000cb8:	4ba1      	ldr	r3, [pc, #644]	@ (8000f40 <main+0x2f0>)
 8000cba:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM3->CCR1 = 0;
 8000cc0:	4b9f      	ldr	r3, [pc, #636]	@ (8000f40 <main+0x2f0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR3 = 0;
 8000cc6:	4b9e      	ldr	r3, [pc, #632]	@ (8000f40 <main+0x2f0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_TIM_Base_Init(&htim4);
 8000ccc:	489f      	ldr	r0, [pc, #636]	@ (8000f4c <main+0x2fc>)
 8000cce:	f003 f957 	bl	8003f80 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim4);
 8000cd2:	489e      	ldr	r0, [pc, #632]	@ (8000f4c <main+0x2fc>)
 8000cd4:	f003 f9a4 	bl	8004020 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000cd8:	2100      	movs	r1, #0
 8000cda:	489c      	ldr	r0, [pc, #624]	@ (8000f4c <main+0x2fc>)
 8000cdc:	f003 fbb6 	bl	800444c <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start_IT(&htim5);
 8000ce0:	489b      	ldr	r0, [pc, #620]	@ (8000f50 <main+0x300>)
 8000ce2:	f003 f9f7 	bl	80040d4 <HAL_TIM_Base_Start_IT>
  clock_hours = 0;
 8000ce6:	4b9b      	ldr	r3, [pc, #620]	@ (8000f54 <main+0x304>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
  clock_mins = 0;
 8000cec:	4b9a      	ldr	r3, [pc, #616]	@ (8000f58 <main+0x308>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
  clock_secs = 0;
 8000cf2:	4b9a      	ldr	r3, [pc, #616]	@ (8000f5c <main+0x30c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t pipe_connection[4] = {0};
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  uint8_t pipe_pwm_mode[4] = {0};
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint8_t current_time = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t start_time[4] = {0};
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
  uint8_t end_time[4] = {0};
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]

  sprintf((char*)txd_msg_buffer, "\r\n\nSETUP MODE");
 8000d0e:	4994      	ldr	r1, [pc, #592]	@ (8000f60 <main+0x310>)
 8000d10:	4894      	ldr	r0, [pc, #592]	@ (8000f64 <main+0x314>)
 8000d12:	f005 fdfb 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8000d16:	4893      	ldr	r0, [pc, #588]	@ (8000f64 <main+0x314>)
 8000d18:	f7ff fa62 	bl	80001e0 <strlen>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d24:	498f      	ldr	r1, [pc, #572]	@ (8000f64 <main+0x314>)
 8000d26:	4890      	ldr	r0, [pc, #576]	@ (8000f68 <main+0x318>)
 8000d28:	f004 fcea 	bl	8005700 <HAL_UART_Transmit>
  HAL_Delay(500);
 8000d2c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d30:	f001 fd16 	bl	8002760 <HAL_Delay>

  sprintf((char*)txd_msg_buffer,"\r\n\nFIRST PIPELINE CHOICE FOR CONNECTION: ");
 8000d34:	498d      	ldr	r1, [pc, #564]	@ (8000f6c <main+0x31c>)
 8000d36:	488b      	ldr	r0, [pc, #556]	@ (8000f64 <main+0x314>)
 8000d38:	f005 fde8 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8000d3c:	4889      	ldr	r0, [pc, #548]	@ (8000f64 <main+0x314>)
 8000d3e:	f7ff fa4f 	bl	80001e0 <strlen>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d4a:	4986      	ldr	r1, [pc, #536]	@ (8000f64 <main+0x314>)
 8000d4c:	4886      	ldr	r0, [pc, #536]	@ (8000f68 <main+0x318>)
 8000d4e:	f004 fcd7 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8000d52:	4b87      	ldr	r3, [pc, #540]	@ (8000f70 <main+0x320>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4986      	ldr	r1, [pc, #536]	@ (8000f74 <main+0x324>)
 8000d5c:	4882      	ldr	r0, [pc, #520]	@ (8000f68 <main+0x318>)
 8000d5e:	f004 fd5a 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 8000d62:	bf00      	nop
 8000d64:	4b82      	ldr	r3, [pc, #520]	@ (8000f70 <main+0x320>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0fb      	beq.n	8000d64 <main+0x114>
  pipe_connection[0] = (byte[0]-'0');
 8000d6c:	4b81      	ldr	r3, [pc, #516]	@ (8000f74 <main+0x324>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	3b30      	subs	r3, #48	@ 0x30
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	f887 3020 	strb.w	r3, [r7, #32]
  sprintf((char*)txd_msg_buffer,"\r\nFIRST PIPELINE CHOICE FOR MOTOR PWM: ");
 8000d78:	497f      	ldr	r1, [pc, #508]	@ (8000f78 <main+0x328>)
 8000d7a:	487a      	ldr	r0, [pc, #488]	@ (8000f64 <main+0x314>)
 8000d7c:	f005 fdc6 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8000d80:	4878      	ldr	r0, [pc, #480]	@ (8000f64 <main+0x314>)
 8000d82:	f7ff fa2d 	bl	80001e0 <strlen>
 8000d86:	4603      	mov	r3, r0
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8e:	4975      	ldr	r1, [pc, #468]	@ (8000f64 <main+0x314>)
 8000d90:	4875      	ldr	r0, [pc, #468]	@ (8000f68 <main+0x318>)
 8000d92:	f004 fcb5 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8000d96:	4b76      	ldr	r3, [pc, #472]	@ (8000f70 <main+0x320>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 2);
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	4975      	ldr	r1, [pc, #468]	@ (8000f74 <main+0x324>)
 8000da0:	4871      	ldr	r0, [pc, #452]	@ (8000f68 <main+0x318>)
 8000da2:	f004 fd38 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 8000da6:	bf00      	nop
 8000da8:	4b71      	ldr	r3, [pc, #452]	@ (8000f70 <main+0x320>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0fb      	beq.n	8000da8 <main+0x158>
  pipe_pwm_mode[0] = (byte[0]-'0');
 8000db0:	4b70      	ldr	r3, [pc, #448]	@ (8000f74 <main+0x324>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	3b30      	subs	r3, #48	@ 0x30
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	773b      	strb	r3, [r7, #28]

  sprintf((char*)txd_msg_buffer,"\r\nSECOND ZONE CHOICE FOR CONNECTION: ");
 8000dba:	4970      	ldr	r1, [pc, #448]	@ (8000f7c <main+0x32c>)
 8000dbc:	4869      	ldr	r0, [pc, #420]	@ (8000f64 <main+0x314>)
 8000dbe:	f005 fda5 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8000dc2:	4868      	ldr	r0, [pc, #416]	@ (8000f64 <main+0x314>)
 8000dc4:	f7ff fa0c 	bl	80001e0 <strlen>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd0:	4964      	ldr	r1, [pc, #400]	@ (8000f64 <main+0x314>)
 8000dd2:	4865      	ldr	r0, [pc, #404]	@ (8000f68 <main+0x318>)
 8000dd4:	f004 fc94 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8000dd8:	4b65      	ldr	r3, [pc, #404]	@ (8000f70 <main+0x320>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000dde:	2201      	movs	r2, #1
 8000de0:	4964      	ldr	r1, [pc, #400]	@ (8000f74 <main+0x324>)
 8000de2:	4861      	ldr	r0, [pc, #388]	@ (8000f68 <main+0x318>)
 8000de4:	f004 fd17 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 8000de8:	bf00      	nop
 8000dea:	4b61      	ldr	r3, [pc, #388]	@ (8000f70 <main+0x320>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0fb      	beq.n	8000dea <main+0x19a>
  pipe_connection[1] = (byte[0]-'0');
 8000df2:	4b60      	ldr	r3, [pc, #384]	@ (8000f74 <main+0x324>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	3b30      	subs	r3, #48	@ 0x30
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sprintf((char*)txd_msg_buffer,"\r\nSECOND ZONE CHOICE FOR MOTOR PWM: ");
 8000dfe:	4960      	ldr	r1, [pc, #384]	@ (8000f80 <main+0x330>)
 8000e00:	4858      	ldr	r0, [pc, #352]	@ (8000f64 <main+0x314>)
 8000e02:	f005 fd83 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8000e06:	4857      	ldr	r0, [pc, #348]	@ (8000f64 <main+0x314>)
 8000e08:	f7ff f9ea 	bl	80001e0 <strlen>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e14:	4953      	ldr	r1, [pc, #332]	@ (8000f64 <main+0x314>)
 8000e16:	4854      	ldr	r0, [pc, #336]	@ (8000f68 <main+0x318>)
 8000e18:	f004 fc72 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8000e1c:	4b54      	ldr	r3, [pc, #336]	@ (8000f70 <main+0x320>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	4953      	ldr	r1, [pc, #332]	@ (8000f74 <main+0x324>)
 8000e26:	4850      	ldr	r0, [pc, #320]	@ (8000f68 <main+0x318>)
 8000e28:	f004 fcf5 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 8000e2c:	bf00      	nop
 8000e2e:	4b50      	ldr	r3, [pc, #320]	@ (8000f70 <main+0x320>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0fb      	beq.n	8000e2e <main+0x1de>
  pipe_pwm_mode[1] = (byte[0]-'0');
 8000e36:	4b4f      	ldr	r3, [pc, #316]	@ (8000f74 <main+0x324>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	3b30      	subs	r3, #48	@ 0x30
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	777b      	strb	r3, [r7, #29]

  sprintf((char*)txd_msg_buffer,"\r\nTHIRD ZONE CHOICE FOR CONNECTION: ");
 8000e40:	4950      	ldr	r1, [pc, #320]	@ (8000f84 <main+0x334>)
 8000e42:	4848      	ldr	r0, [pc, #288]	@ (8000f64 <main+0x314>)
 8000e44:	f005 fd62 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8000e48:	4846      	ldr	r0, [pc, #280]	@ (8000f64 <main+0x314>)
 8000e4a:	f7ff f9c9 	bl	80001e0 <strlen>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e56:	4943      	ldr	r1, [pc, #268]	@ (8000f64 <main+0x314>)
 8000e58:	4843      	ldr	r0, [pc, #268]	@ (8000f68 <main+0x318>)
 8000e5a:	f004 fc51 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8000e5e:	4b44      	ldr	r3, [pc, #272]	@ (8000f70 <main+0x320>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	4943      	ldr	r1, [pc, #268]	@ (8000f74 <main+0x324>)
 8000e68:	483f      	ldr	r0, [pc, #252]	@ (8000f68 <main+0x318>)
 8000e6a:	f004 fcd4 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 8000e6e:	bf00      	nop
 8000e70:	4b3f      	ldr	r3, [pc, #252]	@ (8000f70 <main+0x320>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0fb      	beq.n	8000e70 <main+0x220>
  pipe_connection[2] = (byte[0]-'0');
 8000e78:	4b3e      	ldr	r3, [pc, #248]	@ (8000f74 <main+0x324>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	3b30      	subs	r3, #48	@ 0x30
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  sprintf((char*)txd_msg_buffer,"\r\nTHIRD ZONE CHOICE FOR MOTOR PWM: ");
 8000e84:	4940      	ldr	r1, [pc, #256]	@ (8000f88 <main+0x338>)
 8000e86:	4837      	ldr	r0, [pc, #220]	@ (8000f64 <main+0x314>)
 8000e88:	f005 fd40 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8000e8c:	4835      	ldr	r0, [pc, #212]	@ (8000f64 <main+0x314>)
 8000e8e:	f7ff f9a7 	bl	80001e0 <strlen>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9a:	4932      	ldr	r1, [pc, #200]	@ (8000f64 <main+0x314>)
 8000e9c:	4832      	ldr	r0, [pc, #200]	@ (8000f68 <main+0x318>)
 8000e9e:	f004 fc2f 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8000ea2:	4b33      	ldr	r3, [pc, #204]	@ (8000f70 <main+0x320>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4932      	ldr	r1, [pc, #200]	@ (8000f74 <main+0x324>)
 8000eac:	482e      	ldr	r0, [pc, #184]	@ (8000f68 <main+0x318>)
 8000eae:	f004 fcb2 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 8000eb2:	bf00      	nop
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000f70 <main+0x320>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0fb      	beq.n	8000eb4 <main+0x264>
  pipe_pwm_mode[2] = (byte[0]-'0');
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8000f74 <main+0x324>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	3b30      	subs	r3, #48	@ 0x30
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	77bb      	strb	r3, [r7, #30]

  sprintf((char*)txd_msg_buffer,"\r\nFOURTH ZONE CHOICE FOR CONNECTION: ");
 8000ec6:	4931      	ldr	r1, [pc, #196]	@ (8000f8c <main+0x33c>)
 8000ec8:	4826      	ldr	r0, [pc, #152]	@ (8000f64 <main+0x314>)
 8000eca:	f005 fd1f 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8000ece:	4825      	ldr	r0, [pc, #148]	@ (8000f64 <main+0x314>)
 8000ed0:	f7ff f986 	bl	80001e0 <strlen>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000edc:	4921      	ldr	r1, [pc, #132]	@ (8000f64 <main+0x314>)
 8000ede:	4822      	ldr	r0, [pc, #136]	@ (8000f68 <main+0x318>)
 8000ee0:	f004 fc0e 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <main+0x320>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000eea:	2201      	movs	r2, #1
 8000eec:	4921      	ldr	r1, [pc, #132]	@ (8000f74 <main+0x324>)
 8000eee:	481e      	ldr	r0, [pc, #120]	@ (8000f68 <main+0x318>)
 8000ef0:	f004 fc91 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 8000ef4:	bf00      	nop
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <main+0x320>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0fb      	beq.n	8000ef6 <main+0x2a6>
  pipe_connection[3] = (byte[0]-'0');
 8000efe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <main+0x324>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3b30      	subs	r3, #48	@ 0x30
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  sprintf((char*)txd_msg_buffer,"\r\nFOURTH ZONE CHOICE FOR MOTOR PWM: ");
 8000f0a:	4921      	ldr	r1, [pc, #132]	@ (8000f90 <main+0x340>)
 8000f0c:	4815      	ldr	r0, [pc, #84]	@ (8000f64 <main+0x314>)
 8000f0e:	f005 fcfd 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8000f12:	4814      	ldr	r0, [pc, #80]	@ (8000f64 <main+0x314>)
 8000f14:	f7ff f964 	bl	80001e0 <strlen>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f20:	4910      	ldr	r1, [pc, #64]	@ (8000f64 <main+0x314>)
 8000f22:	4811      	ldr	r0, [pc, #68]	@ (8000f68 <main+0x318>)
 8000f24:	f004 fbec 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <main+0x320>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4910      	ldr	r1, [pc, #64]	@ (8000f74 <main+0x324>)
 8000f32:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <main+0x318>)
 8000f34:	f004 fc6f 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 8000f38:	bf00      	nop
 8000f3a:	e02b      	b.n	8000f94 <main+0x344>
 8000f3c:	200000d4 	.word	0x200000d4
 8000f40:	40000400 	.word	0x40000400
 8000f44:	20000004 	.word	0x20000004
 8000f48:	2000011c 	.word	0x2000011c
 8000f4c:	20000164 	.word	0x20000164
 8000f50:	200001ac 	.word	0x200001ac
 8000f54:	20000284 	.word	0x20000284
 8000f58:	20000285 	.word	0x20000285
 8000f5c:	20000286 	.word	0x20000286
 8000f60:	08007a8c 	.word	0x08007a8c
 8000f64:	20000298 	.word	0x20000298
 8000f68:	2000023c 	.word	0x2000023c
 8000f6c:	08007a9c 	.word	0x08007a9c
 8000f70:	20000296 	.word	0x20000296
 8000f74:	20000294 	.word	0x20000294
 8000f78:	08007ac8 	.word	0x08007ac8
 8000f7c:	08007af0 	.word	0x08007af0
 8000f80:	08007b18 	.word	0x08007b18
 8000f84:	08007b40 	.word	0x08007b40
 8000f88:	08007b68 	.word	0x08007b68
 8000f8c:	08007b8c 	.word	0x08007b8c
 8000f90:	08007bb4 	.word	0x08007bb4
 8000f94:	4bab      	ldr	r3, [pc, #684]	@ (8001244 <main+0x5f4>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0fb      	beq.n	8000f94 <main+0x344>
  pipe_pwm_mode[3] = (byte[0]-'0');
 8000f9c:	4baa      	ldr	r3, [pc, #680]	@ (8001248 <main+0x5f8>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	3b30      	subs	r3, #48	@ 0x30
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	77fb      	strb	r3, [r7, #31]


  sprintf((char*)txd_msg_buffer,"\r\n\nCURRENT WALL CLOCK TIME: ");
 8000fa6:	49a9      	ldr	r1, [pc, #676]	@ (800124c <main+0x5fc>)
 8000fa8:	48a9      	ldr	r0, [pc, #676]	@ (8001250 <main+0x600>)
 8000faa:	f005 fcaf 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8000fae:	48a8      	ldr	r0, [pc, #672]	@ (8001250 <main+0x600>)
 8000fb0:	f7ff f916 	bl	80001e0 <strlen>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fbc:	49a4      	ldr	r1, [pc, #656]	@ (8001250 <main+0x600>)
 8000fbe:	48a5      	ldr	r0, [pc, #660]	@ (8001254 <main+0x604>)
 8000fc0:	f004 fb9e 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8000fc4:	4b9f      	ldr	r3, [pc, #636]	@ (8001244 <main+0x5f4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 2);
 8000fca:	2202      	movs	r2, #2
 8000fcc:	499e      	ldr	r1, [pc, #632]	@ (8001248 <main+0x5f8>)
 8000fce:	48a1      	ldr	r0, [pc, #644]	@ (8001254 <main+0x604>)
 8000fd0:	f004 fc21 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 8000fd4:	bf00      	nop
 8000fd6:	4b9b      	ldr	r3, [pc, #620]	@ (8001244 <main+0x5f4>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0fb      	beq.n	8000fd6 <main+0x386>
  current_time = (byte[0] - '0') * 10 + (byte[1] - '0');
 8000fde:	4b9a      	ldr	r3, [pc, #616]	@ (8001248 <main+0x5f8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b96      	ldr	r3, [pc, #600]	@ (8001248 <main+0x5f8>)
 8000fee:	785b      	ldrb	r3, [r3, #1]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	3b10      	subs	r3, #16
 8000ff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  sprintf((char*)txd_msg_buffer,"\r\nINLET WALL CLOCK START TIME: ");
 8000ffa:	4997      	ldr	r1, [pc, #604]	@ (8001258 <main+0x608>)
 8000ffc:	4894      	ldr	r0, [pc, #592]	@ (8001250 <main+0x600>)
 8000ffe:	f005 fc85 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8001002:	4893      	ldr	r0, [pc, #588]	@ (8001250 <main+0x600>)
 8001004:	f7ff f8ec 	bl	80001e0 <strlen>
 8001008:	4603      	mov	r3, r0
 800100a:	b29a      	uxth	r2, r3
 800100c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001010:	498f      	ldr	r1, [pc, #572]	@ (8001250 <main+0x600>)
 8001012:	4890      	ldr	r0, [pc, #576]	@ (8001254 <main+0x604>)
 8001014:	f004 fb74 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8001018:	4b8a      	ldr	r3, [pc, #552]	@ (8001244 <main+0x5f4>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 2);
 800101e:	2202      	movs	r2, #2
 8001020:	4989      	ldr	r1, [pc, #548]	@ (8001248 <main+0x5f8>)
 8001022:	488c      	ldr	r0, [pc, #560]	@ (8001254 <main+0x604>)
 8001024:	f004 fbf7 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 8001028:	bf00      	nop
 800102a:	4b86      	ldr	r3, [pc, #536]	@ (8001244 <main+0x5f4>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0fb      	beq.n	800102a <main+0x3da>
  start_time[0] = (byte[0] - '0') * 10 + (byte[1] - '0');
 8001032:	4b85      	ldr	r3, [pc, #532]	@ (8001248 <main+0x5f8>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	0092      	lsls	r2, r2, #2
 800103a:	4413      	add	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b81      	ldr	r3, [pc, #516]	@ (8001248 <main+0x5f8>)
 8001042:	785b      	ldrb	r3, [r3, #1]
 8001044:	4413      	add	r3, r2
 8001046:	b2db      	uxtb	r3, r3
 8001048:	3b10      	subs	r3, #16
 800104a:	b2db      	uxtb	r3, r3
 800104c:	763b      	strb	r3, [r7, #24]
  sprintf((char*)txd_msg_buffer,"\r\nINLET WALL CLOCK STOP TIME: ");
 800104e:	4983      	ldr	r1, [pc, #524]	@ (800125c <main+0x60c>)
 8001050:	487f      	ldr	r0, [pc, #508]	@ (8001250 <main+0x600>)
 8001052:	f005 fc5b 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8001056:	487e      	ldr	r0, [pc, #504]	@ (8001250 <main+0x600>)
 8001058:	f7ff f8c2 	bl	80001e0 <strlen>
 800105c:	4603      	mov	r3, r0
 800105e:	b29a      	uxth	r2, r3
 8001060:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001064:	497a      	ldr	r1, [pc, #488]	@ (8001250 <main+0x600>)
 8001066:	487b      	ldr	r0, [pc, #492]	@ (8001254 <main+0x604>)
 8001068:	f004 fb4a 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 800106c:	4b75      	ldr	r3, [pc, #468]	@ (8001244 <main+0x5f4>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 2);
 8001072:	2202      	movs	r2, #2
 8001074:	4974      	ldr	r1, [pc, #464]	@ (8001248 <main+0x5f8>)
 8001076:	4877      	ldr	r0, [pc, #476]	@ (8001254 <main+0x604>)
 8001078:	f004 fbcd 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 800107c:	bf00      	nop
 800107e:	4b71      	ldr	r3, [pc, #452]	@ (8001244 <main+0x5f4>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0fb      	beq.n	800107e <main+0x42e>
  end_time[0] = (byte[0] - '0') * 10 + (byte[1] - '0');
 8001086:	4b70      	ldr	r3, [pc, #448]	@ (8001248 <main+0x5f8>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	0092      	lsls	r2, r2, #2
 800108e:	4413      	add	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b6c      	ldr	r3, [pc, #432]	@ (8001248 <main+0x5f8>)
 8001096:	785b      	ldrb	r3, [r3, #1]
 8001098:	4413      	add	r3, r2
 800109a:	b2db      	uxtb	r3, r3
 800109c:	3b10      	subs	r3, #16
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	753b      	strb	r3, [r7, #20]

  sprintf((char*)txd_msg_buffer,"\r\nFIRST ZONE CHOICE WALL CLOCK START TIME: ");
 80010a2:	496f      	ldr	r1, [pc, #444]	@ (8001260 <main+0x610>)
 80010a4:	486a      	ldr	r0, [pc, #424]	@ (8001250 <main+0x600>)
 80010a6:	f005 fc31 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 80010aa:	4869      	ldr	r0, [pc, #420]	@ (8001250 <main+0x600>)
 80010ac:	f7ff f898 	bl	80001e0 <strlen>
 80010b0:	4603      	mov	r3, r0
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b8:	4965      	ldr	r1, [pc, #404]	@ (8001250 <main+0x600>)
 80010ba:	4866      	ldr	r0, [pc, #408]	@ (8001254 <main+0x604>)
 80010bc:	f004 fb20 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 80010c0:	4b60      	ldr	r3, [pc, #384]	@ (8001244 <main+0x5f4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 2);
 80010c6:	2202      	movs	r2, #2
 80010c8:	495f      	ldr	r1, [pc, #380]	@ (8001248 <main+0x5f8>)
 80010ca:	4862      	ldr	r0, [pc, #392]	@ (8001254 <main+0x604>)
 80010cc:	f004 fba3 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 80010d0:	bf00      	nop
 80010d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001244 <main+0x5f4>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0fb      	beq.n	80010d2 <main+0x482>
  start_time[1] = (byte[0] - '0') * 10 + (byte[1] - '0');
 80010da:	4b5b      	ldr	r3, [pc, #364]	@ (8001248 <main+0x5f8>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b57      	ldr	r3, [pc, #348]	@ (8001248 <main+0x5f8>)
 80010ea:	785b      	ldrb	r3, [r3, #1]
 80010ec:	4413      	add	r3, r2
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	3b10      	subs	r3, #16
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	767b      	strb	r3, [r7, #25]
  sprintf((char*)txd_msg_buffer,"\r\nFIRST ZONE CHOICE WALL CLOCK STOP TIME: ");
 80010f6:	495b      	ldr	r1, [pc, #364]	@ (8001264 <main+0x614>)
 80010f8:	4855      	ldr	r0, [pc, #340]	@ (8001250 <main+0x600>)
 80010fa:	f005 fc07 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 80010fe:	4854      	ldr	r0, [pc, #336]	@ (8001250 <main+0x600>)
 8001100:	f7ff f86e 	bl	80001e0 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	b29a      	uxth	r2, r3
 8001108:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110c:	4950      	ldr	r1, [pc, #320]	@ (8001250 <main+0x600>)
 800110e:	4851      	ldr	r0, [pc, #324]	@ (8001254 <main+0x604>)
 8001110:	f004 faf6 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8001114:	4b4b      	ldr	r3, [pc, #300]	@ (8001244 <main+0x5f4>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 2);
 800111a:	2202      	movs	r2, #2
 800111c:	494a      	ldr	r1, [pc, #296]	@ (8001248 <main+0x5f8>)
 800111e:	484d      	ldr	r0, [pc, #308]	@ (8001254 <main+0x604>)
 8001120:	f004 fb79 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 8001124:	bf00      	nop
 8001126:	4b47      	ldr	r3, [pc, #284]	@ (8001244 <main+0x5f4>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0fb      	beq.n	8001126 <main+0x4d6>
  end_time[1] = (byte[0] - '0') * 10 + (byte[1] - '0');
 800112e:	4b46      	ldr	r3, [pc, #280]	@ (8001248 <main+0x5f8>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	0092      	lsls	r2, r2, #2
 8001136:	4413      	add	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	b2da      	uxtb	r2, r3
 800113c:	4b42      	ldr	r3, [pc, #264]	@ (8001248 <main+0x5f8>)
 800113e:	785b      	ldrb	r3, [r3, #1]
 8001140:	4413      	add	r3, r2
 8001142:	b2db      	uxtb	r3, r3
 8001144:	3b10      	subs	r3, #16
 8001146:	b2db      	uxtb	r3, r3
 8001148:	757b      	strb	r3, [r7, #21]

  sprintf((char*)txd_msg_buffer,"\r\nSECOND ZONE CHOICE WALL CLOCK START TIME: ");
 800114a:	4947      	ldr	r1, [pc, #284]	@ (8001268 <main+0x618>)
 800114c:	4840      	ldr	r0, [pc, #256]	@ (8001250 <main+0x600>)
 800114e:	f005 fbdd 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8001152:	483f      	ldr	r0, [pc, #252]	@ (8001250 <main+0x600>)
 8001154:	f7ff f844 	bl	80001e0 <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	b29a      	uxth	r2, r3
 800115c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001160:	493b      	ldr	r1, [pc, #236]	@ (8001250 <main+0x600>)
 8001162:	483c      	ldr	r0, [pc, #240]	@ (8001254 <main+0x604>)
 8001164:	f004 facc 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8001168:	4b36      	ldr	r3, [pc, #216]	@ (8001244 <main+0x5f4>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 2);
 800116e:	2202      	movs	r2, #2
 8001170:	4935      	ldr	r1, [pc, #212]	@ (8001248 <main+0x5f8>)
 8001172:	4838      	ldr	r0, [pc, #224]	@ (8001254 <main+0x604>)
 8001174:	f004 fb4f 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 8001178:	bf00      	nop
 800117a:	4b32      	ldr	r3, [pc, #200]	@ (8001244 <main+0x5f4>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0fb      	beq.n	800117a <main+0x52a>
  start_time[2] = (byte[0] - '0') * 10 + (byte[1] - '0');
 8001182:	4b31      	ldr	r3, [pc, #196]	@ (8001248 <main+0x5f8>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	4413      	add	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b2d      	ldr	r3, [pc, #180]	@ (8001248 <main+0x5f8>)
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	4413      	add	r3, r2
 8001196:	b2db      	uxtb	r3, r3
 8001198:	3b10      	subs	r3, #16
 800119a:	b2db      	uxtb	r3, r3
 800119c:	76bb      	strb	r3, [r7, #26]
  sprintf((char*)txd_msg_buffer,"\r\nSECOND ZONE CHOICE WALL CLOCK STOP TIME: ");
 800119e:	4933      	ldr	r1, [pc, #204]	@ (800126c <main+0x61c>)
 80011a0:	482b      	ldr	r0, [pc, #172]	@ (8001250 <main+0x600>)
 80011a2:	f005 fbb3 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 80011a6:	482a      	ldr	r0, [pc, #168]	@ (8001250 <main+0x600>)
 80011a8:	f7ff f81a 	bl	80001e0 <strlen>
 80011ac:	4603      	mov	r3, r0
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b4:	4926      	ldr	r1, [pc, #152]	@ (8001250 <main+0x600>)
 80011b6:	4827      	ldr	r0, [pc, #156]	@ (8001254 <main+0x604>)
 80011b8:	f004 faa2 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 80011bc:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <main+0x5f4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 2);
 80011c2:	2202      	movs	r2, #2
 80011c4:	4920      	ldr	r1, [pc, #128]	@ (8001248 <main+0x5f8>)
 80011c6:	4823      	ldr	r0, [pc, #140]	@ (8001254 <main+0x604>)
 80011c8:	f004 fb25 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 80011cc:	bf00      	nop
 80011ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <main+0x5f4>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0fb      	beq.n	80011ce <main+0x57e>
  end_time[2] = (byte[0] - '0') * 10 + (byte[1] - '0');
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <main+0x5f8>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4413      	add	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <main+0x5f8>)
 80011e6:	785b      	ldrb	r3, [r3, #1]
 80011e8:	4413      	add	r3, r2
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	3b10      	subs	r3, #16
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	75bb      	strb	r3, [r7, #22]

  sprintf((char*)txd_msg_buffer,"\r\nTHIRD ZONE CHOICE WALL CLOCK START TIME: ");
 80011f2:	491f      	ldr	r1, [pc, #124]	@ (8001270 <main+0x620>)
 80011f4:	4816      	ldr	r0, [pc, #88]	@ (8001250 <main+0x600>)
 80011f6:	f005 fb89 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 80011fa:	4815      	ldr	r0, [pc, #84]	@ (8001250 <main+0x600>)
 80011fc:	f7fe fff0 	bl	80001e0 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	b29a      	uxth	r2, r3
 8001204:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001208:	4911      	ldr	r1, [pc, #68]	@ (8001250 <main+0x600>)
 800120a:	4812      	ldr	r0, [pc, #72]	@ (8001254 <main+0x604>)
 800120c:	f004 fa78 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <main+0x5f4>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 2);
 8001216:	2202      	movs	r2, #2
 8001218:	490b      	ldr	r1, [pc, #44]	@ (8001248 <main+0x5f8>)
 800121a:	480e      	ldr	r0, [pc, #56]	@ (8001254 <main+0x604>)
 800121c:	f004 fafb 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 8001220:	bf00      	nop
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <main+0x5f4>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0fb      	beq.n	8001222 <main+0x5d2>
  start_time[3] = (byte[0] - '0') * 10 + (byte[1] - '0');
 800122a:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <main+0x5f8>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	4413      	add	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b03      	ldr	r3, [pc, #12]	@ (8001248 <main+0x5f8>)
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	4413      	add	r3, r2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	3b10      	subs	r3, #16
 8001242:	e017      	b.n	8001274 <main+0x624>
 8001244:	20000296 	.word	0x20000296
 8001248:	20000294 	.word	0x20000294
 800124c:	08007bdc 	.word	0x08007bdc
 8001250:	20000298 	.word	0x20000298
 8001254:	2000023c 	.word	0x2000023c
 8001258:	08007bfc 	.word	0x08007bfc
 800125c:	08007c1c 	.word	0x08007c1c
 8001260:	08007c3c 	.word	0x08007c3c
 8001264:	08007c68 	.word	0x08007c68
 8001268:	08007c94 	.word	0x08007c94
 800126c:	08007cc4 	.word	0x08007cc4
 8001270:	08007cf0 	.word	0x08007cf0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	76fb      	strb	r3, [r7, #27]

  sprintf((char*)txd_msg_buffer,"\r\nTHIRD ZONE CHOICE WALL CLOCK STOP TIME: ");
 8001278:	49aa      	ldr	r1, [pc, #680]	@ (8001524 <main+0x8d4>)
 800127a:	48ab      	ldr	r0, [pc, #684]	@ (8001528 <main+0x8d8>)
 800127c:	f005 fb46 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8001280:	48a9      	ldr	r0, [pc, #676]	@ (8001528 <main+0x8d8>)
 8001282:	f7fe ffad 	bl	80001e0 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b29a      	uxth	r2, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128e:	49a6      	ldr	r1, [pc, #664]	@ (8001528 <main+0x8d8>)
 8001290:	48a6      	ldr	r0, [pc, #664]	@ (800152c <main+0x8dc>)
 8001292:	f004 fa35 	bl	8005700 <HAL_UART_Transmit>
  rcv_intpt_flag = 00;
 8001296:	4ba6      	ldr	r3, [pc, #664]	@ (8001530 <main+0x8e0>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &byte, 2);
 800129c:	2202      	movs	r2, #2
 800129e:	49a5      	ldr	r1, [pc, #660]	@ (8001534 <main+0x8e4>)
 80012a0:	48a2      	ldr	r0, [pc, #648]	@ (800152c <main+0x8dc>)
 80012a2:	f004 fab8 	bl	8005816 <HAL_UART_Receive_IT>
  while(rcv_intpt_flag == (00)) {}
 80012a6:	bf00      	nop
 80012a8:	4ba1      	ldr	r3, [pc, #644]	@ (8001530 <main+0x8e0>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0fb      	beq.n	80012a8 <main+0x658>
  end_time[3] = (byte[0] - '0') * 10 + (byte[1] - '0');
 80012b0:	4ba0      	ldr	r3, [pc, #640]	@ (8001534 <main+0x8e4>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b9d      	ldr	r3, [pc, #628]	@ (8001534 <main+0x8e4>)
 80012c0:	785b      	ldrb	r3, [r3, #1]
 80012c2:	4413      	add	r3, r2
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	3b10      	subs	r3, #16
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	75fb      	strb	r3, [r7, #23]
  end_time[2] = 6;
  end_time[3] = 8;
  current_time = 0;
  */

  sprintf((char*)txd_msg_buffer,"\r\n\nPRESS BLUE BUTTON TO PRECEED TO RUN MODE");
 80012cc:	499a      	ldr	r1, [pc, #616]	@ (8001538 <main+0x8e8>)
 80012ce:	4896      	ldr	r0, [pc, #600]	@ (8001528 <main+0x8d8>)
 80012d0:	f005 fb1c 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 80012d4:	4894      	ldr	r0, [pc, #592]	@ (8001528 <main+0x8d8>)
 80012d6:	f7fe ff83 	bl	80001e0 <strlen>
 80012da:	4603      	mov	r3, r0
 80012dc:	b29a      	uxth	r2, r3
 80012de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e2:	4991      	ldr	r1, [pc, #580]	@ (8001528 <main+0x8d8>)
 80012e4:	4891      	ldr	r0, [pc, #580]	@ (800152c <main+0x8dc>)
 80012e6:	f004 fa0b 	bl	8005700 <HAL_UART_Transmit>
  while(HAL_GPIO_ReadPin(GPIOC, B1_Pin)){
 80012ea:	e011      	b.n	8001310 <main+0x6c0>
	  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	2120      	movs	r1, #32
 80012f0:	4892      	ldr	r0, [pc, #584]	@ (800153c <main+0x8ec>)
 80012f2:	f002 f97b 	bl	80035ec <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80012f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012fa:	f001 fa31 	bl	8002760 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2120      	movs	r1, #32
 8001302:	488e      	ldr	r0, [pc, #568]	@ (800153c <main+0x8ec>)
 8001304:	f002 f972 	bl	80035ec <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8001308:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800130c:	f001 fa28 	bl	8002760 <HAL_Delay>
  while(HAL_GPIO_ReadPin(GPIOC, B1_Pin)){
 8001310:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001314:	488a      	ldr	r0, [pc, #552]	@ (8001540 <main+0x8f0>)
 8001316:	f002 f951 	bl	80035bc <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e5      	bne.n	80012ec <main+0x69c>
  }

  sprintf((char*)txd_msg_buffer,"\r\n\nRUN MODE");
 8001320:	4988      	ldr	r1, [pc, #544]	@ (8001544 <main+0x8f4>)
 8001322:	4881      	ldr	r0, [pc, #516]	@ (8001528 <main+0x8d8>)
 8001324:	f005 faf2 	bl	800690c <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8001328:	487f      	ldr	r0, [pc, #508]	@ (8001528 <main+0x8d8>)
 800132a:	f7fe ff59 	bl	80001e0 <strlen>
 800132e:	4603      	mov	r3, r0
 8001330:	b29a      	uxth	r2, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001336:	497c      	ldr	r1, [pc, #496]	@ (8001528 <main+0x8d8>)
 8001338:	487c      	ldr	r0, [pc, #496]	@ (800152c <main+0x8dc>)
 800133a:	f004 f9e1 	bl	8005700 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	2120      	movs	r1, #32
 8001342:	487e      	ldr	r0, [pc, #504]	@ (800153c <main+0x8ec>)
 8001344:	f002 f952 	bl	80035ec <HAL_GPIO_WritePin>


  clock_hours = current_time;
 8001348:	4a7f      	ldr	r2, [pc, #508]	@ (8001548 <main+0x8f8>)
 800134a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800134e:	7013      	strb	r3, [r2, #0]
  clock_mins = 0;
 8001350:	4b7e      	ldr	r3, [pc, #504]	@ (800154c <main+0x8fc>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
  clock_secs = 0;
 8001356:	4b7e      	ldr	r3, [pc, #504]	@ (8001550 <main+0x900>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
  wall_clock_hr_update_flag = 1;
 800135c:	4b7d      	ldr	r3, [pc, #500]	@ (8001554 <main+0x904>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]

  int zone = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int motor_speed = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	@ 0x28
  int servo_position[4] = {1000, 1500, 2000, 2500};
 800136a:	4b7b      	ldr	r3, [pc, #492]	@ (8001558 <main+0x908>)
 800136c:	1d3c      	adds	r4, r7, #4
 800136e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


    while (1)
    {
    	//potentiometer code
    	ADC_Select_CH(9);
 8001374:	2009      	movs	r0, #9
 8001376:	f7ff f903 	bl	8000580 <ADC_Select_CH>
    	HAL_ADC_Start(&hadc1);
 800137a:	4878      	ldr	r0, [pc, #480]	@ (800155c <main+0x90c>)
 800137c:	f001 fa58 	bl	8002830 <HAL_ADC_Start>
    	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001380:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001384:	4875      	ldr	r0, [pc, #468]	@ (800155c <main+0x90c>)
 8001386:	f001 fb3a 	bl	80029fe <HAL_ADC_PollForConversion>
    	uint8_t ADC_CH9 = HAL_ADC_GetValue(&hadc1);
 800138a:	4874      	ldr	r0, [pc, #464]	@ (800155c <main+0x90c>)
 800138c:	f001 fbc2 	bl	8002b14 <HAL_ADC_GetValue>
 8001390:	4603      	mov	r3, r0
 8001392:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    	HAL_ADC_Stop(&hadc1);
 8001396:	4871      	ldr	r0, [pc, #452]	@ (800155c <main+0x90c>)
 8001398:	f001 fafe 	bl	8002998 <HAL_ADC_Stop>

    	current_time = clock_hours;
 800139c:	4b6a      	ldr	r3, [pc, #424]	@ (8001548 <main+0x8f8>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    	hcsr04_Rx_flag = 0;
 80013a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001560 <main+0x910>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
    	first_edge = 0;
 80013aa:	4b6e      	ldr	r3, [pc, #440]	@ (8001564 <main+0x914>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
    	time_edge1 = 0;
 80013b0:	4b6d      	ldr	r3, [pc, #436]	@ (8001568 <main+0x918>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	801a      	strh	r2, [r3, #0]
    	time_edge2 = 0;
 80013b6:	4b6d      	ldr	r3, [pc, #436]	@ (800156c <main+0x91c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	801a      	strh	r2, [r3, #0]
    	time_diff = 0;
 80013bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001570 <main+0x920>)
 80013be:	2200      	movs	r2, #0
 80013c0:	801a      	strh	r2, [r3, #0]

    	HCSR04_TRIG_PULSE();
 80013c2:	f7ff fb13 	bl	80009ec <HCSR04_TRIG_PULSE>
    	while(hcsr04_Rx_flag == 0){};
 80013c6:	bf00      	nop
 80013c8:	4b65      	ldr	r3, [pc, #404]	@ (8001560 <main+0x910>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0fa      	beq.n	80013c8 <main+0x778>
    	time_diff = time_edge2-time_edge1;
 80013d2:	4b66      	ldr	r3, [pc, #408]	@ (800156c <main+0x91c>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	4b63      	ldr	r3, [pc, #396]	@ (8001568 <main+0x918>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b63      	ldr	r3, [pc, #396]	@ (8001570 <main+0x920>)
 80013e4:	801a      	strh	r2, [r3, #0]
    	distance = (float)time_diff/54;
 80013e6:	4b62      	ldr	r3, [pc, #392]	@ (8001570 <main+0x920>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013f2:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8001574 <main+0x924>
 80013f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fe:	ee17 2a90 	vmov	r2, s15
 8001402:	4b5d      	ldr	r3, [pc, #372]	@ (8001578 <main+0x928>)
 8001404:	601a      	str	r2, [r3, #0]
    	filled = 100-((((float)distance-top_distance)/(bottom_distance-top_distance))*100);
 8001406:	4b5c      	ldr	r3, [pc, #368]	@ (8001578 <main+0x928>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001412:	4b5a      	ldr	r3, [pc, #360]	@ (800157c <main+0x92c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001422:	4b57      	ldr	r3, [pc, #348]	@ (8001580 <main+0x930>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	4b54      	ldr	r3, [pc, #336]	@ (800157c <main+0x92c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	ee07 3a90 	vmov	s15, r3
 8001432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143a:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001590 <main+0x940>
 800143e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001442:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001590 <main+0x940>
 8001446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800144e:	ee17 2a90 	vmov	r2, s15
 8001452:	4b4c      	ldr	r3, [pc, #304]	@ (8001584 <main+0x934>)
 8001454:	601a      	str	r2, [r3, #0]
    	sprintf((char*)txd_msg_buffer,"\r\n %d and %d", distance, filled);
 8001456:	4b48      	ldr	r3, [pc, #288]	@ (8001578 <main+0x928>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b4a      	ldr	r3, [pc, #296]	@ (8001584 <main+0x934>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	494a      	ldr	r1, [pc, #296]	@ (8001588 <main+0x938>)
 8001460:	4831      	ldr	r0, [pc, #196]	@ (8001528 <main+0x8d8>)
 8001462:	f005 fa53 	bl	800690c <siprintf>
    	    			HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8001466:	4830      	ldr	r0, [pc, #192]	@ (8001528 <main+0x8d8>)
 8001468:	f7fe feba 	bl	80001e0 <strlen>
 800146c:	4603      	mov	r3, r0
 800146e:	b29a      	uxth	r2, r3
 8001470:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001474:	492c      	ldr	r1, [pc, #176]	@ (8001528 <main+0x8d8>)
 8001476:	482d      	ldr	r0, [pc, #180]	@ (800152c <main+0x8dc>)
 8001478:	f004 f942 	bl	8005700 <HAL_UART_Transmit>


    	if (filled>99) {
 800147c:	4b41      	ldr	r3, [pc, #260]	@ (8001584 <main+0x934>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b63      	cmp	r3, #99	@ 0x63
 8001482:	dd03      	ble.n	800148c <main+0x83c>
    		filled = 99;
 8001484:	4b3f      	ldr	r3, [pc, #252]	@ (8001584 <main+0x934>)
 8001486:	2263      	movs	r2, #99	@ 0x63
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e009      	b.n	80014a0 <main+0x850>
    	} else if (filled<0) {
 800148c:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <main+0x934>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	da05      	bge.n	80014a0 <main+0x850>
    		filled = 0;
 8001494:	4b3b      	ldr	r3, [pc, #236]	@ (8001584 <main+0x934>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
    		empty = 1;
 800149a:	4b3c      	ldr	r3, [pc, #240]	@ (800158c <main+0x93c>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
    	}
    	DIGITS_Display(filled);
 80014a0:	4b38      	ldr	r3, [pc, #224]	@ (8001584 <main+0x934>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f9ca 	bl	8000840 <DIGITS_Display>

    	//maybe need to wait until sensor shows 99

    		if(current_time >= start_time[zone] && current_time < end_time[zone]){
 80014ac:	f107 0218 	add.w	r2, r7, #24
 80014b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b2:	4413      	add	r3, r2
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80014ba:	429a      	cmp	r2, r3
 80014bc:	f0c0 80d9 	bcc.w	8001672 <main+0xa22>
 80014c0:	f107 0214 	add.w	r2, r7, #20
 80014c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c6:	4413      	add	r3, r2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80014ce:	429a      	cmp	r2, r3
 80014d0:	f080 80cf 	bcs.w	8001672 <main+0xa22>
    			RGBLED_Run(pipe_connection[zone]);
 80014d4:	f107 0220 	add.w	r2, r7, #32
 80014d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fb1a 	bl	8000b18 <RGBLED_Run>
    			SERVO_Run(servo_position[pipe_connection[zone]]);
 80014e4:	f107 0220 	add.w	r2, r7, #32
 80014e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	3330      	adds	r3, #48	@ 0x30
 80014f2:	443b      	add	r3, r7
 80014f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fadb 	bl	8000ab4 <SERVO_Run>
    		    switch(pipe_pwm_mode[zone])
 80014fe:	f107 021c 	add.w	r2, r7, #28
 8001502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001504:	4413      	add	r3, r2
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b03      	cmp	r3, #3
 800150a:	f200 80ae 	bhi.w	800166a <main+0xa1a>
 800150e:	a201      	add	r2, pc, #4	@ (adr r2, 8001514 <main+0x8c4>)
 8001510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001514:	080015a1 	.word	0x080015a1
 8001518:	0800161d 	.word	0x0800161d
 800151c:	08001637 	.word	0x08001637
 8001520:	08001651 	.word	0x08001651
 8001524:	08007d1c 	.word	0x08007d1c
 8001528:	20000298 	.word	0x20000298
 800152c:	2000023c 	.word	0x2000023c
 8001530:	20000296 	.word	0x20000296
 8001534:	20000294 	.word	0x20000294
 8001538:	08007d48 	.word	0x08007d48
 800153c:	40020000 	.word	0x40020000
 8001540:	40020800 	.word	0x40020800
 8001544:	08007d74 	.word	0x08007d74
 8001548:	20000284 	.word	0x20000284
 800154c:	20000285 	.word	0x20000285
 8001550:	20000286 	.word	0x20000286
 8001554:	20000287 	.word	0x20000287
 8001558:	08007df8 	.word	0x08007df8
 800155c:	2000008c 	.word	0x2000008c
 8001560:	20000288 	.word	0x20000288
 8001564:	20000289 	.word	0x20000289
 8001568:	2000028a 	.word	0x2000028a
 800156c:	2000028c 	.word	0x2000028c
 8001570:	200002d8 	.word	0x200002d8
 8001574:	42580000 	.word	0x42580000
 8001578:	200002e0 	.word	0x200002e0
 800157c:	20000001 	.word	0x20000001
 8001580:	20000000 	.word	0x20000000
 8001584:	200002dc 	.word	0x200002dc
 8001588:	08007d80 	.word	0x08007d80
 800158c:	20000290 	.word	0x20000290
 8001590:	42c80000 	.word	0x42c80000
 8001594:	43c80000 	.word	0x43c80000
 8001598:	437f0000 	.word	0x437f0000
 800159c:	43fa0000 	.word	0x43fa0000
    		    {
    		    case 0:
    		    	motor_speed = (((float)ADC_CH9/255)*100);
 80015a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ac:	ed5f 6a06 	vldr	s13, [pc, #-24]	@ 8001598 <main+0x948>
 80015b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b4:	ed1f 7a0a 	vldr	s14, [pc, #-40]	@ 8001590 <main+0x940>
 80015b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c0:	ee17 3a90 	vmov	r3, s15
 80015c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    		    	rpm = generate_random(((float)ADC_CH9/255)*400,((float)ADC_CH9/255)*500);
 80015c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015d2:	ed5f 6a0f 	vldr	s13, [pc, #-60]	@ 8001598 <main+0x948>
 80015d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015da:	ed1f 7a12 	vldr	s14, [pc, #-72]	@ 8001594 <main+0x944>
 80015de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e2:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80015e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015f2:	ed5f 6a17 	vldr	s13, [pc, #-92]	@ 8001598 <main+0x948>
 80015f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fa:	ed1f 7a18 	vldr	s14, [pc, #-96]	@ 800159c <main+0x94c>
 80015fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001606:	ee17 1a90 	vmov	r1, s15
 800160a:	ee16 0a10 	vmov	r0, s12
 800160e:	f7ff fb07 	bl	8000c20 <generate_random>
 8001612:	4603      	mov	r3, r0
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b4b      	ldr	r3, [pc, #300]	@ (8001744 <main+0xaf4>)
 8001618:	701a      	strb	r2, [r3, #0]
    		    	break;
 800161a:	e026      	b.n	800166a <main+0xa1a>
    		    case 1:
    		    	motor_speed = 70;
 800161c:	2346      	movs	r3, #70	@ 0x46
 800161e:	62bb      	str	r3, [r7, #40]	@ 0x28
    		    	rpm = generate_random(325,375);
 8001620:	f240 1177 	movw	r1, #375	@ 0x177
 8001624:	f240 1045 	movw	r0, #325	@ 0x145
 8001628:	f7ff fafa 	bl	8000c20 <generate_random>
 800162c:	4603      	mov	r3, r0
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b44      	ldr	r3, [pc, #272]	@ (8001744 <main+0xaf4>)
 8001632:	701a      	strb	r2, [r3, #0]
    		    	break;
 8001634:	e019      	b.n	800166a <main+0xa1a>
    		    case 2:
    		    	motor_speed = 85;
 8001636:	2355      	movs	r3, #85	@ 0x55
 8001638:	62bb      	str	r3, [r7, #40]	@ 0x28
    		    	rpm = generate_random(375,425);
 800163a:	f240 11a9 	movw	r1, #425	@ 0x1a9
 800163e:	f240 1077 	movw	r0, #375	@ 0x177
 8001642:	f7ff faed 	bl	8000c20 <generate_random>
 8001646:	4603      	mov	r3, r0
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4b3e      	ldr	r3, [pc, #248]	@ (8001744 <main+0xaf4>)
 800164c:	701a      	strb	r2, [r3, #0]
    		    	break;
 800164e:	e00c      	b.n	800166a <main+0xa1a>
    		    case 3:
    		    	motor_speed = 99;
 8001650:	2363      	movs	r3, #99	@ 0x63
 8001652:	62bb      	str	r3, [r7, #40]	@ 0x28
    		    	rpm = generate_random(425,475);
 8001654:	f240 11db 	movw	r1, #475	@ 0x1db
 8001658:	f240 10a9 	movw	r0, #425	@ 0x1a9
 800165c:	f7ff fae0 	bl	8000c20 <generate_random>
 8001660:	4603      	mov	r3, r0
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b37      	ldr	r3, [pc, #220]	@ (8001744 <main+0xaf4>)
 8001666:	701a      	strb	r2, [r3, #0]
    		    	break;
 8001668:	bf00      	nop
    		    }
    		    if(pipe_connection[zone] == 0){
    		        //motor_speed *= -1;
    		    }
    		    MOTOR_Run(motor_speed);
 800166a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800166c:	f7ff f9e0 	bl	8000a30 <MOTOR_Run>
 8001670:	e00b      	b.n	800168a <main+0xa3a>
    		} else if(current_time >= end_time[zone]){
 8001672:	f107 0214 	add.w	r2, r7, #20
 8001676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001678:	4413      	add	r3, r2
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001680:	429a      	cmp	r2, r3
 8001682:	d302      	bcc.n	800168a <main+0xa3a>
    			zone++;
 8001684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001686:	3301      	adds	r3, #1
 8001688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    		}

    	if(wall_clock_hr_update_flag ==1){
 800168a:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <main+0xaf8>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b01      	cmp	r3, #1
 8001692:	f47f ae6f 	bne.w	8001374 <main+0x724>


    		if(empty == 1 || zone > 3){
 8001696:	4b2d      	ldr	r3, [pc, #180]	@ (800174c <main+0xafc>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d002      	beq.n	80016a4 <main+0xa54>
 800169e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	dd2c      	ble.n	80016fe <main+0xaae>
    			sprintf((char*)txd_msg_buffer,"\r\nRESEVOIR EMPTY");
 80016a4:	492a      	ldr	r1, [pc, #168]	@ (8001750 <main+0xb00>)
 80016a6:	482b      	ldr	r0, [pc, #172]	@ (8001754 <main+0xb04>)
 80016a8:	f005 f930 	bl	800690c <siprintf>
    			HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 80016ac:	4829      	ldr	r0, [pc, #164]	@ (8001754 <main+0xb04>)
 80016ae:	f7fe fd97 	bl	80001e0 <strlen>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ba:	4926      	ldr	r1, [pc, #152]	@ (8001754 <main+0xb04>)
 80016bc:	4826      	ldr	r0, [pc, #152]	@ (8001758 <main+0xb08>)
 80016be:	f004 f81f 	bl	8005700 <HAL_UART_Transmit>
    			MOTOR_Run(0);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff f9b4 	bl	8000a30 <MOTOR_Run>
    			TIM3->CCR1 = 0;
 80016c8:	4b24      	ldr	r3, [pc, #144]	@ (800175c <main+0xb0c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	635a      	str	r2, [r3, #52]	@ 0x34
    			TIM3->CCR3 = 0;
 80016ce:	4b23      	ldr	r3, [pc, #140]	@ (800175c <main+0xb0c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    			HAL_GPIO_WritePin(GPIOA, LD2_Pin,GPIO_PIN_SET);
 80016d4:	2201      	movs	r2, #1
 80016d6:	2120      	movs	r1, #32
 80016d8:	4821      	ldr	r0, [pc, #132]	@ (8001760 <main+0xb10>)
 80016da:	f001 ff87 	bl	80035ec <HAL_GPIO_WritePin>
    			while(1)
    			{
    				RGBLED_Run(5);
 80016de:	2005      	movs	r0, #5
 80016e0:	f7ff fa1a 	bl	8000b18 <RGBLED_Run>
    				HAL_Delay(500);
 80016e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016e8:	f001 f83a 	bl	8002760 <HAL_Delay>
    				RGBLED_Run(4);
 80016ec:	2004      	movs	r0, #4
 80016ee:	f7ff fa13 	bl	8000b18 <RGBLED_Run>
    				HAL_Delay(500);
 80016f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016f6:	f001 f833 	bl	8002760 <HAL_Delay>
    				RGBLED_Run(5);
 80016fa:	bf00      	nop
 80016fc:	e7ef      	b.n	80016de <main+0xa8e>
    			}
    		}



			sprintf((char*)txd_msg_buffer,"\r\nHour: %d | Zone %d | Motor Speed: %d | Motor RPM: %d | Water Reservoir Depth %d |", clock_hours, zone, motor_speed, rpm, filled);
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <main+0xb14>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	4619      	mov	r1, r3
 8001706:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <main+0xaf4>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <main+0xb18>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	9302      	str	r3, [sp, #8]
 8001712:	9201      	str	r2, [sp, #4]
 8001714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800171a:	460a      	mov	r2, r1
 800171c:	4913      	ldr	r1, [pc, #76]	@ (800176c <main+0xb1c>)
 800171e:	480d      	ldr	r0, [pc, #52]	@ (8001754 <main+0xb04>)
 8001720:	f005 f8f4 	bl	800690c <siprintf>
			HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer),1000);
 8001724:	480b      	ldr	r0, [pc, #44]	@ (8001754 <main+0xb04>)
 8001726:	f7fe fd5b 	bl	80001e0 <strlen>
 800172a:	4603      	mov	r3, r0
 800172c:	b29a      	uxth	r2, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	4908      	ldr	r1, [pc, #32]	@ (8001754 <main+0xb04>)
 8001734:	4808      	ldr	r0, [pc, #32]	@ (8001758 <main+0xb08>)
 8001736:	f003 ffe3 	bl	8005700 <HAL_UART_Transmit>
			wall_clock_hr_update_flag = 0;
 800173a:	4b03      	ldr	r3, [pc, #12]	@ (8001748 <main+0xaf8>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
    {
 8001740:	e618      	b.n	8001374 <main+0x724>
 8001742:	bf00      	nop
 8001744:	200002e4 	.word	0x200002e4
 8001748:	20000287 	.word	0x20000287
 800174c:	20000290 	.word	0x20000290
 8001750:	08007d90 	.word	0x08007d90
 8001754:	20000298 	.word	0x20000298
 8001758:	2000023c 	.word	0x2000023c
 800175c:	40000400 	.word	0x40000400
 8001760:	40020000 	.word	0x40020000
 8001764:	20000284 	.word	0x20000284
 8001768:	200002dc 	.word	0x200002dc
 800176c:	08007da4 	.word	0x08007da4

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b094      	sub	sp, #80	@ 0x50
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	f107 0320 	add.w	r3, r7, #32
 800177a:	2230      	movs	r2, #48	@ 0x30
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f005 f927 	bl	80069d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <SystemClock_Config+0xb8>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179c:	4a22      	ldr	r2, [pc, #136]	@ (8001828 <SystemClock_Config+0xb8>)
 800179e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a4:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <SystemClock_Config+0xb8>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	4b1d      	ldr	r3, [pc, #116]	@ (800182c <SystemClock_Config+0xbc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017bc:	4a1b      	ldr	r2, [pc, #108]	@ (800182c <SystemClock_Config+0xbc>)
 80017be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b19      	ldr	r3, [pc, #100]	@ (800182c <SystemClock_Config+0xbc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017d0:	2302      	movs	r3, #2
 80017d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d4:	2301      	movs	r3, #1
 80017d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d8:	2310      	movs	r3, #16
 80017da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017dc:	2300      	movs	r3, #0
 80017de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e0:	f107 0320 	add.w	r3, r7, #32
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 ff33 	bl	8003650 <HAL_RCC_OscConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80017f0:	f000 fbcc 	bl	8001f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f4:	230f      	movs	r3, #15
 80017f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f002 f995 	bl	8003b40 <HAL_RCC_ClockConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800181c:	f000 fbb6 	bl	8001f8c <Error_Handler>
  }
}
 8001820:	bf00      	nop
 8001822:	3750      	adds	r7, #80	@ 0x50
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000

08001830 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001842:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <MX_ADC1_Init+0x98>)
 8001844:	4a21      	ldr	r2, [pc, #132]	@ (80018cc <MX_ADC1_Init+0x9c>)
 8001846:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001848:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <MX_ADC1_Init+0x98>)
 800184a:	2200      	movs	r2, #0
 800184c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800184e:	4b1e      	ldr	r3, [pc, #120]	@ (80018c8 <MX_ADC1_Init+0x98>)
 8001850:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001854:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001856:	4b1c      	ldr	r3, [pc, #112]	@ (80018c8 <MX_ADC1_Init+0x98>)
 8001858:	2201      	movs	r2, #1
 800185a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <MX_ADC1_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001862:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <MX_ADC1_Init+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800186a:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <MX_ADC1_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001870:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <MX_ADC1_Init+0x98>)
 8001872:	4a17      	ldr	r2, [pc, #92]	@ (80018d0 <MX_ADC1_Init+0xa0>)
 8001874:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001876:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <MX_ADC1_Init+0x98>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <MX_ADC1_Init+0x98>)
 800187e:	2201      	movs	r2, #1
 8001880:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <MX_ADC1_Init+0x98>)
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800188a:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <MX_ADC1_Init+0x98>)
 800188c:	2201      	movs	r2, #1
 800188e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001890:	480d      	ldr	r0, [pc, #52]	@ (80018c8 <MX_ADC1_Init+0x98>)
 8001892:	f000 ff89 	bl	80027a8 <HAL_ADC_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800189c:	f000 fb76 	bl	8001f8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80018a0:	2309      	movs	r3, #9
 80018a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80018a8:	2301      	movs	r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ac:	463b      	mov	r3, r7
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <MX_ADC1_Init+0x98>)
 80018b2:	f001 f93d 	bl	8002b30 <HAL_ADC_ConfigChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018bc:	f000 fb66 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000008c 	.word	0x2000008c
 80018cc:	40012000 	.word	0x40012000
 80018d0:	0f000001 	.word	0x0f000001

080018d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08e      	sub	sp, #56	@ 0x38
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	f107 0320 	add.w	r3, r7, #32
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
 8001900:	615a      	str	r2, [r3, #20]
 8001902:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001904:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <MX_TIM2_Init+0xe8>)
 8001906:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800190a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 800190c:	4b2b      	ldr	r3, [pc, #172]	@ (80019bc <MX_TIM2_Init+0xe8>)
 800190e:	220f      	movs	r2, #15
 8001910:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001912:	4b2a      	ldr	r3, [pc, #168]	@ (80019bc <MX_TIM2_Init+0xe8>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001918:	4b28      	ldr	r3, [pc, #160]	@ (80019bc <MX_TIM2_Init+0xe8>)
 800191a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800191e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <MX_TIM2_Init+0xe8>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001926:	4b25      	ldr	r3, [pc, #148]	@ (80019bc <MX_TIM2_Init+0xe8>)
 8001928:	2280      	movs	r2, #128	@ 0x80
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800192c:	4823      	ldr	r0, [pc, #140]	@ (80019bc <MX_TIM2_Init+0xe8>)
 800192e:	f002 fb27 	bl	8003f80 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001938:	f000 fb28 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001940:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001942:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001946:	4619      	mov	r1, r3
 8001948:	481c      	ldr	r0, [pc, #112]	@ (80019bc <MX_TIM2_Init+0xe8>)
 800194a:	f003 f8e7 	bl	8004b1c <HAL_TIM_ConfigClockSource>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001954:	f000 fb1a 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001958:	4818      	ldr	r0, [pc, #96]	@ (80019bc <MX_TIM2_Init+0xe8>)
 800195a:	f002 fc1d 	bl	8004198 <HAL_TIM_PWM_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001964:	f000 fb12 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001970:	f107 0320 	add.w	r3, r7, #32
 8001974:	4619      	mov	r1, r3
 8001976:	4811      	ldr	r0, [pc, #68]	@ (80019bc <MX_TIM2_Init+0xe8>)
 8001978:	f003 fdf0 	bl	800555c <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001982:	f000 fb03 	bl	8001f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001986:	2360      	movs	r3, #96	@ 0x60
 8001988:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800198a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800198e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2200      	movs	r2, #0
 800199c:	4619      	mov	r1, r3
 800199e:	4807      	ldr	r0, [pc, #28]	@ (80019bc <MX_TIM2_Init+0xe8>)
 80019a0:	f002 fffa 	bl	8004998 <HAL_TIM_PWM_ConfigChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019aa:	f000 faef 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ae:	4803      	ldr	r0, [pc, #12]	@ (80019bc <MX_TIM2_Init+0xe8>)
 80019b0:	f000 fc02 	bl	80021b8 <HAL_TIM_MspPostInit>

}
 80019b4:	bf00      	nop
 80019b6:	3738      	adds	r7, #56	@ 0x38
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200000d4 	.word	0x200000d4

080019c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	@ 0x28
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c6:	f107 0320 	add.w	r3, r7, #32
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]
 80019de:	615a      	str	r2, [r3, #20]
 80019e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e2:	4b29      	ldr	r3, [pc, #164]	@ (8001a88 <MX_TIM3_Init+0xc8>)
 80019e4:	4a29      	ldr	r2, [pc, #164]	@ (8001a8c <MX_TIM3_Init+0xcc>)
 80019e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80019e8:	4b27      	ldr	r3, [pc, #156]	@ (8001a88 <MX_TIM3_Init+0xc8>)
 80019ea:	220f      	movs	r2, #15
 80019ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ee:	4b26      	ldr	r3, [pc, #152]	@ (8001a88 <MX_TIM3_Init+0xc8>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80019f4:	4b24      	ldr	r3, [pc, #144]	@ (8001a88 <MX_TIM3_Init+0xc8>)
 80019f6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80019fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fc:	4b22      	ldr	r3, [pc, #136]	@ (8001a88 <MX_TIM3_Init+0xc8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a02:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <MX_TIM3_Init+0xc8>)
 8001a04:	2280      	movs	r2, #128	@ 0x80
 8001a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a08:	481f      	ldr	r0, [pc, #124]	@ (8001a88 <MX_TIM3_Init+0xc8>)
 8001a0a:	f002 fbc5 	bl	8004198 <HAL_TIM_PWM_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a14:	f000 faba 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	4619      	mov	r1, r3
 8001a26:	4818      	ldr	r0, [pc, #96]	@ (8001a88 <MX_TIM3_Init+0xc8>)
 8001a28:	f003 fd98 	bl	800555c <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a32:	f000 faab 	bl	8001f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a36:	2360      	movs	r3, #96	@ 0x60
 8001a38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1200-1;
 8001a3a:	f240 43af 	movw	r3, #1199	@ 0x4af
 8001a3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480e      	ldr	r0, [pc, #56]	@ (8001a88 <MX_TIM3_Init+0xc8>)
 8001a50:	f002 ffa2 	bl	8004998 <HAL_TIM_PWM_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001a5a:	f000 fa97 	bl	8001f8c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2208      	movs	r2, #8
 8001a66:	4619      	mov	r1, r3
 8001a68:	4807      	ldr	r0, [pc, #28]	@ (8001a88 <MX_TIM3_Init+0xc8>)
 8001a6a:	f002 ff95 	bl	8004998 <HAL_TIM_PWM_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001a74:	f000 fa8a 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a78:	4803      	ldr	r0, [pc, #12]	@ (8001a88 <MX_TIM3_Init+0xc8>)
 8001a7a:	f000 fb9d 	bl	80021b8 <HAL_TIM_MspPostInit>

}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	@ 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000011c 	.word	0x2000011c
 8001a8c:	40000400 	.word	0x40000400

08001a90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	@ 0x28
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0318 	add.w	r3, r7, #24
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001aae:	463b      	mov	r3, r7
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aba:	4b2b      	ldr	r3, [pc, #172]	@ (8001b68 <MX_TIM4_Init+0xd8>)
 8001abc:	4a2b      	ldr	r2, [pc, #172]	@ (8001b6c <MX_TIM4_Init+0xdc>)
 8001abe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001ac0:	4b29      	ldr	r3, [pc, #164]	@ (8001b68 <MX_TIM4_Init+0xd8>)
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b28      	ldr	r3, [pc, #160]	@ (8001b68 <MX_TIM4_Init+0xd8>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8001acc:	4b26      	ldr	r3, [pc, #152]	@ (8001b68 <MX_TIM4_Init+0xd8>)
 8001ace:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ad2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	@ (8001b68 <MX_TIM4_Init+0xd8>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ada:	4b23      	ldr	r3, [pc, #140]	@ (8001b68 <MX_TIM4_Init+0xd8>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ae0:	4821      	ldr	r0, [pc, #132]	@ (8001b68 <MX_TIM4_Init+0xd8>)
 8001ae2:	f002 fa4d 	bl	8003f80 <HAL_TIM_Base_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001aec:	f000 fa4e 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001af6:	f107 0318 	add.w	r3, r7, #24
 8001afa:	4619      	mov	r1, r3
 8001afc:	481a      	ldr	r0, [pc, #104]	@ (8001b68 <MX_TIM4_Init+0xd8>)
 8001afe:	f003 f80d 	bl	8004b1c <HAL_TIM_ConfigClockSource>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001b08:	f000 fa40 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001b0c:	4816      	ldr	r0, [pc, #88]	@ (8001b68 <MX_TIM4_Init+0xd8>)
 8001b0e:	f002 fc43 	bl	8004398 <HAL_TIM_IC_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b18:	f000 fa38 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480f      	ldr	r0, [pc, #60]	@ (8001b68 <MX_TIM4_Init+0xd8>)
 8001b2c:	f003 fd16 	bl	800555c <HAL_TIMEx_MasterConfigSynchronization>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001b36:	f000 fa29 	bl	8001f8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001b3a:	230a      	movs	r3, #10
 8001b3c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <MX_TIM4_Init+0xd8>)
 8001b52:	f002 fe85 	bl	8004860 <HAL_TIM_IC_ConfigChannel>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001b5c:	f000 fa16 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	3728      	adds	r7, #40	@ 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000164 	.word	0x20000164
 8001b6c:	40000800 	.word	0x40000800

08001b70 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b84:	463b      	mov	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c08 <MX_TIM5_Init+0x98>)
 8001b90:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 53;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001b94:	2235      	movs	r2, #53	@ 0x35
 8001b96:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001ba0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ba4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bac:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001bae:	2280      	movs	r2, #128	@ 0x80
 8001bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001bb2:	4814      	ldr	r0, [pc, #80]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001bb4:	f002 f9e4 	bl	8003f80 <HAL_TIM_Base_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001bbe:	f000 f9e5 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bc8:	f107 0308 	add.w	r3, r7, #8
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001bd0:	f002 ffa4 	bl	8004b1c <HAL_TIM_ConfigClockSource>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001bda:	f000 f9d7 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001be6:	463b      	mov	r3, r7
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001bec:	f003 fcb6 	bl	800555c <HAL_TIMEx_MasterConfigSynchronization>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001bf6:	f000 f9c9 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200001ac 	.word	0x200001ac
 8001c08:	40000c00 	.word	0x40000c00

08001c0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <MX_USART2_UART_Init+0x50>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c44:	f003 fd0c 	bl	8005660 <HAL_UART_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c4e:	f000 f99d 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200001f4 	.word	0x200001f4
 8001c5c:	40004400 	.word	0x40004400

08001c60 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <MX_USART6_UART_Init+0x4c>)
 8001c66:	4a12      	ldr	r2, [pc, #72]	@ (8001cb0 <MX_USART6_UART_Init+0x50>)
 8001c68:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <MX_USART6_UART_Init+0x4c>)
 8001c6c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c70:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <MX_USART6_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <MX_USART6_UART_Init+0x4c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <MX_USART6_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c84:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <MX_USART6_UART_Init+0x4c>)
 8001c86:	220c      	movs	r2, #12
 8001c88:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <MX_USART6_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <MX_USART6_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c96:	4805      	ldr	r0, [pc, #20]	@ (8001cac <MX_USART6_UART_Init+0x4c>)
 8001c98:	f003 fce2 	bl	8005660 <HAL_UART_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ca2:	f000 f973 	bl	8001f8c <Error_Handler>
  /* USER CODE BEGIN USART6_Init 2 */
  /* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */

  /* USER CODE END USART6_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000023c 	.word	0x2000023c
 8001cb0:	40011400 	.word	0x40011400

08001cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	@ 0x28
 8001cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b50      	ldr	r3, [pc, #320]	@ (8001e10 <MX_GPIO_Init+0x15c>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a4f      	ldr	r2, [pc, #316]	@ (8001e10 <MX_GPIO_Init+0x15c>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b4d      	ldr	r3, [pc, #308]	@ (8001e10 <MX_GPIO_Init+0x15c>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b49      	ldr	r3, [pc, #292]	@ (8001e10 <MX_GPIO_Init+0x15c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a48      	ldr	r2, [pc, #288]	@ (8001e10 <MX_GPIO_Init+0x15c>)
 8001cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b46      	ldr	r3, [pc, #280]	@ (8001e10 <MX_GPIO_Init+0x15c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b42      	ldr	r3, [pc, #264]	@ (8001e10 <MX_GPIO_Init+0x15c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a41      	ldr	r2, [pc, #260]	@ (8001e10 <MX_GPIO_Init+0x15c>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b3f      	ldr	r3, [pc, #252]	@ (8001e10 <MX_GPIO_Init+0x15c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	4b3b      	ldr	r3, [pc, #236]	@ (8001e10 <MX_GPIO_Init+0x15c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	4a3a      	ldr	r2, [pc, #232]	@ (8001e10 <MX_GPIO_Init+0x15c>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2e:	4b38      	ldr	r3, [pc, #224]	@ (8001e10 <MX_GPIO_Init+0x15c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT_A3_Pin|DIGIT_A2_Pin|DIGIT_A1_Pin|DIGIT_A0_Pin, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	210f      	movs	r1, #15
 8001d3e:	4835      	ldr	r0, [pc, #212]	@ (8001e14 <MX_GPIO_Init+0x160>)
 8001d40:	f001 fc54 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIGIT_B3_Pin|DIGIT_B2_Pin|DIGIT_B0_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2133      	movs	r1, #51	@ 0x33
 8001d48:	4833      	ldr	r0, [pc, #204]	@ (8001e18 <MX_GPIO_Init+0x164>)
 8001d4a:	f001 fc4f 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin|BLU_Pin|HCSR04_TRIG_Pin|GRN_Pin
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f241 4131 	movw	r1, #5169	@ 0x1431
 8001d54:	4831      	ldr	r0, [pc, #196]	@ (8001e1c <MX_GPIO_Init+0x168>)
 8001d56:	f001 fc49 	bl	80035ec <HAL_GPIO_WritePin>
                          |RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d60:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4828      	ldr	r0, [pc, #160]	@ (8001e14 <MX_GPIO_Init+0x160>)
 8001d72:	f001 fa9f 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_A3_Pin DIGIT_A2_Pin DIGIT_A1_Pin DIGIT_A0_Pin */
  GPIO_InitStruct.Pin = DIGIT_A3_Pin|DIGIT_A2_Pin|DIGIT_A1_Pin|DIGIT_A0_Pin;
 8001d76:	230f      	movs	r3, #15
 8001d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4821      	ldr	r0, [pc, #132]	@ (8001e14 <MX_GPIO_Init+0x160>)
 8001d8e:	f001 fa91 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_B3_Pin DIGIT_B2_Pin DIGIT_B0_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIGIT_B3_Pin|DIGIT_B2_Pin|DIGIT_B0_Pin|LD2_Pin;
 8001d92:	2333      	movs	r3, #51	@ 0x33
 8001d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d96:	2301      	movs	r3, #1
 8001d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	481b      	ldr	r0, [pc, #108]	@ (8001e18 <MX_GPIO_Init+0x164>)
 8001daa:	f001 fa83 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_B1_Pin BLU_Pin HCSR04_TRIG_Pin GRN_Pin
                           RED_Pin */
  GPIO_InitStruct.Pin = DIGIT_B1_Pin|BLU_Pin|HCSR04_TRIG_Pin|GRN_Pin
 8001dae:	f241 4331 	movw	r3, #5169	@ 0x1431
 8001db2:	617b      	str	r3, [r7, #20]
                          |RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4815      	ldr	r0, [pc, #84]	@ (8001e1c <MX_GPIO_Init+0x168>)
 8001dc8:	f001 fa74 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_Tick_Pin */
  GPIO_InitStruct.Pin = RPM_Tick_Pin;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dd0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_Tick_GPIO_Port, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	480e      	ldr	r0, [pc, #56]	@ (8001e1c <MX_GPIO_Init+0x168>)
 8001de2:	f001 fa67 	bl	80032b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	2008      	movs	r0, #8
 8001dec:	f001 f999 	bl	8003122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001df0:	2008      	movs	r0, #8
 8001df2:	f001 f9b2 	bl	800315a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2028      	movs	r0, #40	@ 0x28
 8001dfc:	f001 f991 	bl	8003122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e00:	2028      	movs	r0, #40	@ 0x28
 8001e02:	f001 f9aa 	bl	800315a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	@ 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400

08001e20 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <HAL_UART_RxCpltCallback+0x2c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d108      	bne.n	8001e44 <HAL_UART_RxCpltCallback+0x24>
    {
        /* Transmit one byte with 100 ms timeout. Transmit the character that was received into the variable called "byte" */
        HAL_UART_Transmit(&huart6, &byte, 1, 100);
 8001e32:	2364      	movs	r3, #100	@ 0x64
 8001e34:	2201      	movs	r2, #1
 8001e36:	4906      	ldr	r1, [pc, #24]	@ (8001e50 <HAL_UART_RxCpltCallback+0x30>)
 8001e38:	4806      	ldr	r0, [pc, #24]	@ (8001e54 <HAL_UART_RxCpltCallback+0x34>)
 8001e3a:	f003 fc61 	bl	8005700 <HAL_UART_Transmit>
        rcv_intpt_flag = 1;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_UART_RxCpltCallback+0x38>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
    }
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40011400 	.word	0x40011400
 8001e50:	20000294 	.word	0x20000294
 8001e54:	2000023c 	.word	0x2000023c
 8001e58:	20000296 	.word	0x20000296

08001e5c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
if (htim->Instance == TIM4)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a15      	ldr	r2, [pc, #84]	@ (8001ec0 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d123      	bne.n	8001eb6 <HAL_TIM_IC_CaptureCallback+0x5a>
    {
        if (htim->Channel == 1) // if the interrupt source is channel 1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7f1b      	ldrb	r3, [r3, #28]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d11f      	bne.n	8001eb6 <HAL_TIM_IC_CaptureCallback+0x5a>
        {
            if (first_edge == 0) // if the first value is not captured
 8001e76:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10b      	bne.n	8001e98 <HAL_TIM_IC_CaptureCallback+0x3c>
            {
                time_edge1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001e80:	2100      	movs	r1, #0
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f002 ff12 	bl	8004cac <HAL_TIM_ReadCapturedValue>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001e8e:	801a      	strh	r2, [r3, #0]
                first_edge = 1; // set the first captured as true
 8001e90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_COUNTER(htim, 0); // reset the counter
                hcsr04_Rx_flag = 1; // set the interrupt flag for result done
            }
        }
    }
}
 8001e96:	e00e      	b.n	8001eb6 <HAL_TIM_IC_CaptureCallback+0x5a>
                time_edge2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001e98:	2100      	movs	r1, #0
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f002 ff06 	bl	8004cac <HAL_TIM_ReadCapturedValue>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <HAL_TIM_IC_CaptureCallback+0x70>)
 8001ea6:	801a      	strh	r2, [r3, #0]
                __HAL_TIM_SET_COUNTER(htim, 0); // reset the counter
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2200      	movs	r2, #0
 8001eae:	625a      	str	r2, [r3, #36]	@ 0x24
                hcsr04_Rx_flag = 1; // set the interrupt flag for result done
 8001eb0:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40000800 	.word	0x40000800
 8001ec4:	20000289 	.word	0x20000289
 8001ec8:	2000028a 	.word	0x2000028a
 8001ecc:	2000028c 	.word	0x2000028c
 8001ed0:	20000288 	.word	0x20000288

08001ed4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == RPM_Tick_Pin)
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d106      	bne.n	8001ef2 <HAL_GPIO_EXTI_Callback+0x1e>
    {
        rpm_tick_count += 1;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001ef0:	801a      	strh	r2, [r3, #0]
    }
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	2000028e 	.word	0x2000028e

08001f04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    if ((htim->Instance == TIM5))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a19      	ldr	r2, [pc, #100]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d12a      	bne.n	8001f6c <HAL_TIM_PeriodElapsedCallback+0x68>
    {
        wall_clock_hr_update_flag = 0; // screen updates occur hourly on the half-hour
 8001f16:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
        clock_secs += 1;
 8001f1c:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	3301      	adds	r3, #1
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001f28:	701a      	strb	r2, [r3, #0]

        if ((clock_secs == 60))
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b3c      	cmp	r3, #60	@ 0x3c
 8001f32:	d109      	bne.n	8001f48 <HAL_TIM_PeriodElapsedCallback+0x44>
        {
            clock_mins += 1;
 8001f34:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f40:	701a      	strb	r2, [r3, #0]
            clock_secs = 0;
 8001f42:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
        }

        if ((clock_mins == 60))
 8001f48:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b3c      	cmp	r3, #60	@ 0x3c
 8001f50:	d109      	bne.n	8001f66 <HAL_TIM_PeriodElapsedCallback+0x62>
        {
            clock_hours += 1;
 8001f52:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	3301      	adds	r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001f5e:	701a      	strb	r2, [r3, #0]
            clock_mins = 0;
 8001f60:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
        }

        wall_clock_hr_update_flag = 1; // screen updates occur hourly on the hour
 8001f66:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
    }
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40000c00 	.word	0x40000c00
 8001f7c:	20000287 	.word	0x20000287
 8001f80:	20000286 	.word	0x20000286
 8001f84:	20000285 	.word	0x20000285
 8001f88:	20000284 	.word	0x20000284

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <Error_Handler+0x8>

08001f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	4a08      	ldr	r2, [pc, #32]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fd6:	2007      	movs	r0, #7
 8001fd8:	f001 f898 	bl	800310c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	@ 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a17      	ldr	r2, [pc, #92]	@ (8002064 <HAL_ADC_MspInit+0x7c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d127      	bne.n	800205a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <HAL_ADC_MspInit+0x80>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	4a15      	ldr	r2, [pc, #84]	@ (8002068 <HAL_ADC_MspInit+0x80>)
 8002014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002018:	6453      	str	r3, [r2, #68]	@ 0x44
 800201a:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <HAL_ADC_MspInit+0x80>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <HAL_ADC_MspInit+0x80>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	4a0e      	ldr	r2, [pc, #56]	@ (8002068 <HAL_ADC_MspInit+0x80>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	6313      	str	r3, [r2, #48]	@ 0x30
 8002036:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <HAL_ADC_MspInit+0x80>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002042:	2302      	movs	r3, #2
 8002044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002046:	2303      	movs	r3, #3
 8002048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	@ (800206c <HAL_ADC_MspInit+0x84>)
 8002056:	f001 f92d 	bl	80032b4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800205a:	bf00      	nop
 800205c:	3728      	adds	r7, #40	@ 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40012000 	.word	0x40012000
 8002068:	40023800 	.word	0x40023800
 800206c:	40020400 	.word	0x40020400

08002070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	@ 0x30
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002090:	d10e      	bne.n	80020b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	4b33      	ldr	r3, [pc, #204]	@ (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	4a32      	ldr	r2, [pc, #200]	@ (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a2:	4b30      	ldr	r3, [pc, #192]	@ (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80020ae:	e054      	b.n	800215a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002168 <HAL_TIM_Base_MspInit+0xf8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d134      	bne.n	8002124 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	4a28      	ldr	r2, [pc, #160]	@ (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ca:	4b26      	ldr	r3, [pc, #152]	@ (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	4b22      	ldr	r3, [pc, #136]	@ (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	4a21      	ldr	r2, [pc, #132]	@ (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020f2:	2340      	movs	r3, #64	@ 0x40
 80020f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002102:	2302      	movs	r3, #2
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	4619      	mov	r1, r3
 800210c:	4817      	ldr	r0, [pc, #92]	@ (800216c <HAL_TIM_Base_MspInit+0xfc>)
 800210e:	f001 f8d1 	bl	80032b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2100      	movs	r1, #0
 8002116:	201e      	movs	r0, #30
 8002118:	f001 f803 	bl	8003122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800211c:	201e      	movs	r0, #30
 800211e:	f001 f81c 	bl	800315a <HAL_NVIC_EnableIRQ>
}
 8002122:	e01a      	b.n	800215a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a11      	ldr	r2, [pc, #68]	@ (8002170 <HAL_TIM_Base_MspInit+0x100>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d115      	bne.n	800215a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	4a0b      	ldr	r2, [pc, #44]	@ (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 8002138:	f043 0308 	orr.w	r3, r3, #8
 800213c:	6413      	str	r3, [r2, #64]	@ 0x40
 800213e:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	2032      	movs	r0, #50	@ 0x32
 8002150:	f000 ffe7 	bl	8003122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002154:	2032      	movs	r0, #50	@ 0x32
 8002156:	f001 f800 	bl	800315a <HAL_NVIC_EnableIRQ>
}
 800215a:	bf00      	nop
 800215c:	3730      	adds	r7, #48	@ 0x30
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	40000800 	.word	0x40000800
 800216c:	40020400 	.word	0x40020400
 8002170:	40000c00 	.word	0x40000c00

08002174 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0b      	ldr	r2, [pc, #44]	@ (80021b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10d      	bne.n	80021a2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <HAL_TIM_PWM_MspInit+0x40>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <HAL_TIM_PWM_MspInit+0x40>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6413      	str	r3, [r2, #64]	@ 0x40
 8002196:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <HAL_TIM_PWM_MspInit+0x40>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40000400 	.word	0x40000400
 80021b4:	40023800 	.word	0x40023800

080021b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	@ 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d8:	d11f      	bne.n	800221a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	4b32      	ldr	r3, [pc, #200]	@ (80022a8 <HAL_TIM_MspPostInit+0xf0>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	4a31      	ldr	r2, [pc, #196]	@ (80022a8 <HAL_TIM_MspPostInit+0xf0>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ea:	4b2f      	ldr	r3, [pc, #188]	@ (80022a8 <HAL_TIM_MspPostInit+0xf0>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002208:	2301      	movs	r3, #1
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4619      	mov	r1, r3
 8002212:	4826      	ldr	r0, [pc, #152]	@ (80022ac <HAL_TIM_MspPostInit+0xf4>)
 8002214:	f001 f84e 	bl	80032b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002218:	e041      	b.n	800229e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a24      	ldr	r2, [pc, #144]	@ (80022b0 <HAL_TIM_MspPostInit+0xf8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d13c      	bne.n	800229e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	4b1f      	ldr	r3, [pc, #124]	@ (80022a8 <HAL_TIM_MspPostInit+0xf0>)
 800222a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222c:	4a1e      	ldr	r2, [pc, #120]	@ (80022a8 <HAL_TIM_MspPostInit+0xf0>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6313      	str	r3, [r2, #48]	@ 0x30
 8002234:	4b1c      	ldr	r3, [pc, #112]	@ (80022a8 <HAL_TIM_MspPostInit+0xf0>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	4b18      	ldr	r3, [pc, #96]	@ (80022a8 <HAL_TIM_MspPostInit+0xf0>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002248:	4a17      	ldr	r2, [pc, #92]	@ (80022a8 <HAL_TIM_MspPostInit+0xf0>)
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002250:	4b15      	ldr	r3, [pc, #84]	@ (80022a8 <HAL_TIM_MspPostInit+0xf0>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800225c:	2340      	movs	r3, #64	@ 0x40
 800225e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800226c:	2302      	movs	r3, #2
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4619      	mov	r1, r3
 8002276:	480d      	ldr	r0, [pc, #52]	@ (80022ac <HAL_TIM_MspPostInit+0xf4>)
 8002278:	f001 f81c 	bl	80032b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800227c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800228e:	2302      	movs	r3, #2
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	4619      	mov	r1, r3
 8002298:	4806      	ldr	r0, [pc, #24]	@ (80022b4 <HAL_TIM_MspPostInit+0xfc>)
 800229a:	f001 f80b 	bl	80032b4 <HAL_GPIO_Init>
}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	@ 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40000400 	.word	0x40000400
 80022b4:	40020800 	.word	0x40020800

080022b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08c      	sub	sp, #48	@ 0x30
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 031c 	add.w	r3, r7, #28
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a36      	ldr	r2, [pc, #216]	@ (80023b0 <HAL_UART_MspInit+0xf8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d12c      	bne.n	8002334 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	4b35      	ldr	r3, [pc, #212]	@ (80023b4 <HAL_UART_MspInit+0xfc>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	4a34      	ldr	r2, [pc, #208]	@ (80023b4 <HAL_UART_MspInit+0xfc>)
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ea:	4b32      	ldr	r3, [pc, #200]	@ (80023b4 <HAL_UART_MspInit+0xfc>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	4b2e      	ldr	r3, [pc, #184]	@ (80023b4 <HAL_UART_MspInit+0xfc>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	4a2d      	ldr	r2, [pc, #180]	@ (80023b4 <HAL_UART_MspInit+0xfc>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6313      	str	r3, [r2, #48]	@ 0x30
 8002306:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <HAL_UART_MspInit+0xfc>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002312:	230c      	movs	r3, #12
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002322:	2307      	movs	r3, #7
 8002324:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	4822      	ldr	r0, [pc, #136]	@ (80023b8 <HAL_UART_MspInit+0x100>)
 800232e:	f000 ffc1 	bl	80032b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002332:	e039      	b.n	80023a8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a20      	ldr	r2, [pc, #128]	@ (80023bc <HAL_UART_MspInit+0x104>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d134      	bne.n	80023a8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <HAL_UART_MspInit+0xfc>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	4a1b      	ldr	r2, [pc, #108]	@ (80023b4 <HAL_UART_MspInit+0xfc>)
 8002348:	f043 0320 	orr.w	r3, r3, #32
 800234c:	6453      	str	r3, [r2, #68]	@ 0x44
 800234e:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <HAL_UART_MspInit+0xfc>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <HAL_UART_MspInit+0xfc>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a14      	ldr	r2, [pc, #80]	@ (80023b4 <HAL_UART_MspInit+0xfc>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_UART_MspInit+0xfc>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002376:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800237a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002388:	2308      	movs	r3, #8
 800238a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	4619      	mov	r1, r3
 8002392:	4809      	ldr	r0, [pc, #36]	@ (80023b8 <HAL_UART_MspInit+0x100>)
 8002394:	f000 ff8e 	bl	80032b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	2047      	movs	r0, #71	@ 0x47
 800239e:	f000 fec0 	bl	8003122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80023a2:	2047      	movs	r0, #71	@ 0x47
 80023a4:	f000 fed9 	bl	800315a <HAL_NVIC_EnableIRQ>
}
 80023a8:	bf00      	nop
 80023aa:	3730      	adds	r7, #48	@ 0x30
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40004400 	.word	0x40004400
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40011400 	.word	0x40011400

080023c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <NMI_Handler+0x4>

080023c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <HardFault_Handler+0x4>

080023d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <MemManage_Handler+0x4>

080023d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <BusFault_Handler+0x4>

080023e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <UsageFault_Handler+0x4>

080023e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002416:	f000 f983 	bl	8002720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}

0800241e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_Tick_Pin);
 8002422:	2004      	movs	r0, #4
 8002424:	f001 f8fc 	bl	8003620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}

0800242c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002430:	4802      	ldr	r0, [pc, #8]	@ (800243c <TIM4_IRQHandler+0x10>)
 8002432:	f002 f925 	bl	8004680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000164 	.word	0x20000164

08002440 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002444:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002448:	f001 f8ea 	bl	8003620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}

08002450 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002454:	4802      	ldr	r0, [pc, #8]	@ (8002460 <TIM5_IRQHandler+0x10>)
 8002456:	f002 f913 	bl	8004680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200001ac 	.word	0x200001ac

08002464 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002468:	4802      	ldr	r0, [pc, #8]	@ (8002474 <USART6_IRQHandler+0x10>)
 800246a:	f003 f9f9 	bl	8005860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	2000023c 	.word	0x2000023c

08002478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return 1;
 800247c:	2301      	movs	r3, #1
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_kill>:

int _kill(int pid, int sig)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002492:	f004 faed 	bl	8006a70 <__errno>
 8002496:	4603      	mov	r3, r0
 8002498:	2216      	movs	r2, #22
 800249a:	601a      	str	r2, [r3, #0]
  return -1;
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_exit>:

void _exit (int status)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ffe7 	bl	8002488 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ba:	bf00      	nop
 80024bc:	e7fd      	b.n	80024ba <_exit+0x12>

080024be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	e00a      	b.n	80024e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024d0:	f3af 8000 	nop.w
 80024d4:	4601      	mov	r1, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	60ba      	str	r2, [r7, #8]
 80024dc:	b2ca      	uxtb	r2, r1
 80024de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3301      	adds	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	dbf0      	blt.n	80024d0 <_read+0x12>
  }

  return len;
 80024ee:	687b      	ldr	r3, [r7, #4]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e009      	b.n	800251e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	60ba      	str	r2, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3301      	adds	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	dbf1      	blt.n	800250a <_write+0x12>
  }
  return len;
 8002526:	687b      	ldr	r3, [r7, #4]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_close>:

int _close(int file)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002558:	605a      	str	r2, [r3, #4]
  return 0;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_isatty>:

int _isatty(int file)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002570:	2301      	movs	r3, #1
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800257e:	b480      	push	{r7}
 8002580:	b085      	sub	sp, #20
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a0:	4a14      	ldr	r2, [pc, #80]	@ (80025f4 <_sbrk+0x5c>)
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <_sbrk+0x60>)
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ac:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b4:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <_sbrk+0x64>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	@ (8002600 <_sbrk+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ba:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <_sbrk+0x64>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d207      	bcs.n	80025d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c8:	f004 fa52 	bl	8006a70 <__errno>
 80025cc:	4603      	mov	r3, r0
 80025ce:	220c      	movs	r2, #12
 80025d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e009      	b.n	80025ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d8:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025de:	4b07      	ldr	r3, [pc, #28]	@ (80025fc <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	4a05      	ldr	r2, [pc, #20]	@ (80025fc <_sbrk+0x64>)
 80025e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20018000 	.word	0x20018000
 80025f8:	00000400 	.word	0x00000400
 80025fc:	200002e8 	.word	0x200002e8
 8002600:	20000440 	.word	0x20000440

08002604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002608:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <SystemInit+0x20>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260e:	4a05      	ldr	r2, [pc, #20]	@ (8002624 <SystemInit+0x20>)
 8002610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002628:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002660 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800262c:	f7ff ffea 	bl	8002604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002630:	480c      	ldr	r0, [pc, #48]	@ (8002664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002632:	490d      	ldr	r1, [pc, #52]	@ (8002668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002634:	4a0d      	ldr	r2, [pc, #52]	@ (800266c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002638:	e002      	b.n	8002640 <LoopCopyDataInit>

0800263a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800263c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263e:	3304      	adds	r3, #4

08002640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002644:	d3f9      	bcc.n	800263a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002646:	4a0a      	ldr	r2, [pc, #40]	@ (8002670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002648:	4c0a      	ldr	r4, [pc, #40]	@ (8002674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800264c:	e001      	b.n	8002652 <LoopFillZerobss>

0800264e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002650:	3204      	adds	r2, #4

08002652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002654:	d3fb      	bcc.n	800264e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002656:	f004 fa11 	bl	8006a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800265a:	f7fe faf9 	bl	8000c50 <main>
  bx  lr    
 800265e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002660:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002668:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800266c:	08007f10 	.word	0x08007f10
  ldr r2, =_sbss
 8002670:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002674:	2000043c 	.word	0x2000043c

08002678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002678:	e7fe      	b.n	8002678 <ADC_IRQHandler>
	...

0800267c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002680:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <HAL_Init+0x40>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0d      	ldr	r2, [pc, #52]	@ (80026bc <HAL_Init+0x40>)
 8002686:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800268a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800268c:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <HAL_Init+0x40>)
 8002692:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002698:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a07      	ldr	r2, [pc, #28]	@ (80026bc <HAL_Init+0x40>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a4:	2003      	movs	r0, #3
 80026a6:	f000 fd31 	bl	800310c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f000 f808 	bl	80026c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b0:	f7ff fc72 	bl	8001f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023c00 	.word	0x40023c00

080026c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c8:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <HAL_InitTick+0x54>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b12      	ldr	r3, [pc, #72]	@ (8002718 <HAL_InitTick+0x58>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fd49 	bl	8003176 <HAL_SYSTICK_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00e      	b.n	800270c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b0f      	cmp	r3, #15
 80026f2:	d80a      	bhi.n	800270a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f4:	2200      	movs	r2, #0
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f000 fd11 	bl	8003122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002700:	4a06      	ldr	r2, [pc, #24]	@ (800271c <HAL_InitTick+0x5c>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e000      	b.n	800270c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000008 	.word	0x20000008
 8002718:	20000010 	.word	0x20000010
 800271c:	2000000c 	.word	0x2000000c

08002720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002724:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_IncTick+0x20>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <HAL_IncTick+0x24>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4413      	add	r3, r2
 8002730:	4a04      	ldr	r2, [pc, #16]	@ (8002744 <HAL_IncTick+0x24>)
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000010 	.word	0x20000010
 8002744:	200002ec 	.word	0x200002ec

08002748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return uwTick;
 800274c:	4b03      	ldr	r3, [pc, #12]	@ (800275c <HAL_GetTick+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	200002ec 	.word	0x200002ec

08002760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002768:	f7ff ffee 	bl	8002748 <HAL_GetTick>
 800276c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d005      	beq.n	8002786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800277a:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <HAL_Delay+0x44>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002786:	bf00      	nop
 8002788:	f7ff ffde 	bl	8002748 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	d8f7      	bhi.n	8002788 <HAL_Delay+0x28>
  {
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000010 	.word	0x20000010

080027a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e033      	b.n	8002826 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fc0e 	bl	8001fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d118      	bne.n	8002818 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027ee:	f023 0302 	bic.w	r3, r3, #2
 80027f2:	f043 0202 	orr.w	r2, r3, #2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 faba 	bl	8002d74 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	f023 0303 	bic.w	r3, r3, #3
 800280e:	f043 0201 	orr.w	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	641a      	str	r2, [r3, #64]	@ 0x40
 8002816:	e001      	b.n	800281c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_ADC_Start+0x1a>
 8002846:	2302      	movs	r3, #2
 8002848:	e097      	b.n	800297a <HAL_ADC_Start+0x14a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d018      	beq.n	8002892 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002870:	4b45      	ldr	r3, [pc, #276]	@ (8002988 <HAL_ADC_Start+0x158>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a45      	ldr	r2, [pc, #276]	@ (800298c <HAL_ADC_Start+0x15c>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0c9a      	lsrs	r2, r3, #18
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002884:	e002      	b.n	800288c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3b01      	subs	r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f9      	bne.n	8002886 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d15f      	bne.n	8002960 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028de:	d106      	bne.n	80028ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e4:	f023 0206 	bic.w	r2, r3, #6
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	645a      	str	r2, [r3, #68]	@ 0x44
 80028ec:	e002      	b.n	80028f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028fc:	4b24      	ldr	r3, [pc, #144]	@ (8002990 <HAL_ADC_Start+0x160>)
 80028fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002908:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10f      	bne.n	8002936 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d129      	bne.n	8002978 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	e020      	b.n	8002978 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a16      	ldr	r2, [pc, #88]	@ (8002994 <HAL_ADC_Start+0x164>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d11b      	bne.n	8002978 <HAL_ADC_Start+0x148>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d114      	bne.n	8002978 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	e00b      	b.n	8002978 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	f043 0210 	orr.w	r2, r3, #16
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000008 	.word	0x20000008
 800298c:	431bde83 	.word	0x431bde83
 8002990:	40012300 	.word	0x40012300
 8002994:	40012000 	.word	0x40012000

08002998 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_Stop+0x16>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e021      	b.n	80029f2 <HAL_ADC_Stop+0x5a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d109      	bne.n	80029e8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	f043 0201 	orr.w	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a1a:	d113      	bne.n	8002a44 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a2a:	d10b      	bne.n	8002a44 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	f043 0220 	orr.w	r2, r3, #32
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e063      	b.n	8002b0c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a44:	f7ff fe80 	bl	8002748 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a4a:	e021      	b.n	8002a90 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a52:	d01d      	beq.n	8002a90 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <HAL_ADC_PollForConversion+0x6c>
 8002a5a:	f7ff fe75 	bl	8002748 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d212      	bcs.n	8002a90 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d00b      	beq.n	8002a90 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	f043 0204 	orr.w	r2, r3, #4
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e03d      	b.n	8002b0c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d1d6      	bne.n	8002a4c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f06f 0212 	mvn.w	r2, #18
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d123      	bne.n	8002b0a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d11f      	bne.n	8002b0a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d006      	beq.n	8002ae6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d111      	bne.n	8002b0a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	f043 0201 	orr.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x1c>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e105      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x228>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b09      	cmp	r3, #9
 8002b5a:	d925      	bls.n	8002ba8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68d9      	ldr	r1, [r3, #12]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4413      	add	r3, r2
 8002b70:	3b1e      	subs	r3, #30
 8002b72:	2207      	movs	r2, #7
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43da      	mvns	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	400a      	ands	r2, r1
 8002b80:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68d9      	ldr	r1, [r3, #12]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	4618      	mov	r0, r3
 8002b94:	4603      	mov	r3, r0
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4403      	add	r3, r0
 8002b9a:	3b1e      	subs	r3, #30
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	e022      	b.n	8002bee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6919      	ldr	r1, [r3, #16]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	400a      	ands	r2, r1
 8002bca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6919      	ldr	r1, [r3, #16]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	4603      	mov	r3, r0
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4403      	add	r3, r0
 8002be4:	409a      	lsls	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d824      	bhi.n	8002c40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	3b05      	subs	r3, #5
 8002c08:	221f      	movs	r2, #31
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	400a      	ands	r2, r1
 8002c16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4618      	mov	r0, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	3b05      	subs	r3, #5
 8002c32:	fa00 f203 	lsl.w	r2, r0, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c3e:	e04c      	b.n	8002cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b0c      	cmp	r3, #12
 8002c46:	d824      	bhi.n	8002c92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	3b23      	subs	r3, #35	@ 0x23
 8002c5a:	221f      	movs	r2, #31
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43da      	mvns	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	400a      	ands	r2, r1
 8002c68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	4618      	mov	r0, r3
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	3b23      	subs	r3, #35	@ 0x23
 8002c84:	fa00 f203 	lsl.w	r2, r0, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c90:	e023      	b.n	8002cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3b41      	subs	r3, #65	@ 0x41
 8002ca4:	221f      	movs	r2, #31
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	3b41      	subs	r3, #65	@ 0x41
 8002cce:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cda:	4b22      	ldr	r3, [pc, #136]	@ (8002d64 <HAL_ADC_ConfigChannel+0x234>)
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a21      	ldr	r2, [pc, #132]	@ (8002d68 <HAL_ADC_ConfigChannel+0x238>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d109      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x1cc>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b12      	cmp	r3, #18
 8002cee:	d105      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a19      	ldr	r2, [pc, #100]	@ (8002d68 <HAL_ADC_ConfigChannel+0x238>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d123      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x21e>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d003      	beq.n	8002d16 <HAL_ADC_ConfigChannel+0x1e6>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b11      	cmp	r3, #17
 8002d14:	d11b      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d111      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d2a:	4b10      	ldr	r3, [pc, #64]	@ (8002d6c <HAL_ADC_ConfigChannel+0x23c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a10      	ldr	r2, [pc, #64]	@ (8002d70 <HAL_ADC_ConfigChannel+0x240>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	0c9a      	lsrs	r2, r3, #18
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d40:	e002      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f9      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40012300 	.word	0x40012300
 8002d68:	40012000 	.word	0x40012000
 8002d6c:	20000008 	.word	0x20000008
 8002d70:	431bde83 	.word	0x431bde83

08002d74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d7c:	4b79      	ldr	r3, [pc, #484]	@ (8002f64 <ADC_Init+0x1f0>)
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	021a      	lsls	r2, r3, #8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002dcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6899      	ldr	r1, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e06:	4a58      	ldr	r2, [pc, #352]	@ (8002f68 <ADC_Init+0x1f4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d022      	beq.n	8002e52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6899      	ldr	r1, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6899      	ldr	r1, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	e00f      	b.n	8002e72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e70:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0202 	bic.w	r2, r2, #2
 8002e80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6899      	ldr	r1, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	7e1b      	ldrb	r3, [r3, #24]
 8002e8c:	005a      	lsls	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01b      	beq.n	8002ed8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ebe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6859      	ldr	r1, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	035a      	lsls	r2, r3, #13
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	e007      	b.n	8002ee8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ee6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	051a      	lsls	r2, r3, #20
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6899      	ldr	r1, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f2a:	025a      	lsls	r2, r3, #9
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6899      	ldr	r1, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	029a      	lsls	r2, r3, #10
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40012300 	.word	0x40012300
 8002f68:	0f000001 	.word	0x0f000001

08002f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f9e:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	60d3      	str	r3, [r2, #12]
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb8:	4b04      	ldr	r3, [pc, #16]	@ (8002fcc <__NVIC_GetPriorityGrouping+0x18>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	f003 0307 	and.w	r3, r3, #7
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	db0b      	blt.n	8002ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	f003 021f 	and.w	r2, r3, #31
 8002fe8:	4907      	ldr	r1, [pc, #28]	@ (8003008 <__NVIC_EnableIRQ+0x38>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	e000e100 	.word	0xe000e100

0800300c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301c:	2b00      	cmp	r3, #0
 800301e:	db0a      	blt.n	8003036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	490c      	ldr	r1, [pc, #48]	@ (8003058 <__NVIC_SetPriority+0x4c>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	0112      	lsls	r2, r2, #4
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	440b      	add	r3, r1
 8003030:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003034:	e00a      	b.n	800304c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4908      	ldr	r1, [pc, #32]	@ (800305c <__NVIC_SetPriority+0x50>)
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	3b04      	subs	r3, #4
 8003044:	0112      	lsls	r2, r2, #4
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	440b      	add	r3, r1
 800304a:	761a      	strb	r2, [r3, #24]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000e100 	.word	0xe000e100
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	@ 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f1c3 0307 	rsb	r3, r3, #7
 800307a:	2b04      	cmp	r3, #4
 800307c:	bf28      	it	cs
 800307e:	2304      	movcs	r3, #4
 8003080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3304      	adds	r3, #4
 8003086:	2b06      	cmp	r3, #6
 8003088:	d902      	bls.n	8003090 <NVIC_EncodePriority+0x30>
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3b03      	subs	r3, #3
 800308e:	e000      	b.n	8003092 <NVIC_EncodePriority+0x32>
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003094:	f04f 32ff 	mov.w	r2, #4294967295
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43da      	mvns	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	401a      	ands	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a8:	f04f 31ff 	mov.w	r1, #4294967295
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	43d9      	mvns	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b8:	4313      	orrs	r3, r2
         );
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3724      	adds	r7, #36	@ 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030d8:	d301      	bcc.n	80030de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030da:	2301      	movs	r3, #1
 80030dc:	e00f      	b.n	80030fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030de:	4a0a      	ldr	r2, [pc, #40]	@ (8003108 <SysTick_Config+0x40>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030e6:	210f      	movs	r1, #15
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	f7ff ff8e 	bl	800300c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f0:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <SysTick_Config+0x40>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030f6:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <SysTick_Config+0x40>)
 80030f8:	2207      	movs	r2, #7
 80030fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	e000e010 	.word	0xe000e010

0800310c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff ff29 	bl	8002f6c <__NVIC_SetPriorityGrouping>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003122:	b580      	push	{r7, lr}
 8003124:	b086      	sub	sp, #24
 8003126:	af00      	add	r7, sp, #0
 8003128:	4603      	mov	r3, r0
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003134:	f7ff ff3e 	bl	8002fb4 <__NVIC_GetPriorityGrouping>
 8003138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	f7ff ff8e 	bl	8003060 <NVIC_EncodePriority>
 8003144:	4602      	mov	r2, r0
 8003146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff5d 	bl	800300c <__NVIC_SetPriority>
}
 8003152:	bf00      	nop
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff31 	bl	8002fd0 <__NVIC_EnableIRQ>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ffa2 	bl	80030c8 <SysTick_Config>
 8003184:	4603      	mov	r3, r0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800319c:	f7ff fad4 	bl	8002748 <HAL_GetTick>
 80031a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d008      	beq.n	80031c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2280      	movs	r2, #128	@ 0x80
 80031b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e052      	b.n	8003266 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0216 	bic.w	r2, r2, #22
 80031ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d103      	bne.n	80031f0 <HAL_DMA_Abort+0x62>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0208 	bic.w	r2, r2, #8
 80031fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003210:	e013      	b.n	800323a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003212:	f7ff fa99 	bl	8002748 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b05      	cmp	r3, #5
 800321e:	d90c      	bls.n	800323a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2203      	movs	r2, #3
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e015      	b.n	8003266 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e4      	bne.n	8003212 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324c:	223f      	movs	r2, #63	@ 0x3f
 800324e:	409a      	lsls	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d004      	beq.n	800328c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2280      	movs	r2, #128	@ 0x80
 8003286:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e00c      	b.n	80032a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2205      	movs	r2, #5
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	@ 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	e159      	b.n	8003584 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032d0:	2201      	movs	r2, #1
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	f040 8148 	bne.w	800357e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d005      	beq.n	8003306 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003302:	2b02      	cmp	r3, #2
 8003304:	d130      	bne.n	8003368 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	2203      	movs	r2, #3
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800333c:	2201      	movs	r2, #1
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 0201 	and.w	r2, r3, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b03      	cmp	r3, #3
 8003372:	d017      	beq.n	80033a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	2203      	movs	r2, #3
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d123      	bne.n	80033f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	08da      	lsrs	r2, r3, #3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3208      	adds	r2, #8
 80033b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	220f      	movs	r2, #15
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	08da      	lsrs	r2, r3, #3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3208      	adds	r2, #8
 80033f2:	69b9      	ldr	r1, [r7, #24]
 80033f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	2203      	movs	r2, #3
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0203 	and.w	r2, r3, #3
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a2 	beq.w	800357e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	4b57      	ldr	r3, [pc, #348]	@ (800359c <HAL_GPIO_Init+0x2e8>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003442:	4a56      	ldr	r2, [pc, #344]	@ (800359c <HAL_GPIO_Init+0x2e8>)
 8003444:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003448:	6453      	str	r3, [r2, #68]	@ 0x44
 800344a:	4b54      	ldr	r3, [pc, #336]	@ (800359c <HAL_GPIO_Init+0x2e8>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003456:	4a52      	ldr	r2, [pc, #328]	@ (80035a0 <HAL_GPIO_Init+0x2ec>)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	3302      	adds	r3, #2
 800345e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	220f      	movs	r2, #15
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a49      	ldr	r2, [pc, #292]	@ (80035a4 <HAL_GPIO_Init+0x2f0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d019      	beq.n	80034b6 <HAL_GPIO_Init+0x202>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a48      	ldr	r2, [pc, #288]	@ (80035a8 <HAL_GPIO_Init+0x2f4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_GPIO_Init+0x1fe>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a47      	ldr	r2, [pc, #284]	@ (80035ac <HAL_GPIO_Init+0x2f8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00d      	beq.n	80034ae <HAL_GPIO_Init+0x1fa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a46      	ldr	r2, [pc, #280]	@ (80035b0 <HAL_GPIO_Init+0x2fc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d007      	beq.n	80034aa <HAL_GPIO_Init+0x1f6>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a45      	ldr	r2, [pc, #276]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_GPIO_Init+0x1f2>
 80034a2:	2304      	movs	r3, #4
 80034a4:	e008      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034a6:	2307      	movs	r3, #7
 80034a8:	e006      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034aa:	2303      	movs	r3, #3
 80034ac:	e004      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e002      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034b6:	2300      	movs	r3, #0
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	f002 0203 	and.w	r2, r2, #3
 80034be:	0092      	lsls	r2, r2, #2
 80034c0:	4093      	lsls	r3, r2
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034c8:	4935      	ldr	r1, [pc, #212]	@ (80035a0 <HAL_GPIO_Init+0x2ec>)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	3302      	adds	r3, #2
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d6:	4b38      	ldr	r3, [pc, #224]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034fa:	4a2f      	ldr	r2, [pc, #188]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003500:	4b2d      	ldr	r3, [pc, #180]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003524:	4a24      	ldr	r2, [pc, #144]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800352a:	4b23      	ldr	r3, [pc, #140]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800354e:	4a1a      	ldr	r2, [pc, #104]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003554:	4b18      	ldr	r3, [pc, #96]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003578:	4a0f      	ldr	r2, [pc, #60]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3301      	adds	r3, #1
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b0f      	cmp	r3, #15
 8003588:	f67f aea2 	bls.w	80032d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3724      	adds	r7, #36	@ 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	40013800 	.word	0x40013800
 80035a4:	40020000 	.word	0x40020000
 80035a8:	40020400 	.word	0x40020400
 80035ac:	40020800 	.word	0x40020800
 80035b0:	40020c00 	.word	0x40020c00
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40013c00 	.word	0x40013c00

080035bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e001      	b.n	80035de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
 80035f8:	4613      	mov	r3, r2
 80035fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035fc:	787b      	ldrb	r3, [r7, #1]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003602:	887a      	ldrh	r2, [r7, #2]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003608:	e003      	b.n	8003612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800360a:	887b      	ldrh	r3, [r7, #2]
 800360c:	041a      	lsls	r2, r3, #16
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	619a      	str	r2, [r3, #24]
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800362a:	4b08      	ldr	r3, [pc, #32]	@ (800364c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	4013      	ands	r3, r2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d006      	beq.n	8003644 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003636:	4a05      	ldr	r2, [pc, #20]	@ (800364c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe fc48 	bl	8001ed4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40013c00 	.word	0x40013c00

08003650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e267      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d075      	beq.n	800375a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800366e:	4b88      	ldr	r3, [pc, #544]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b04      	cmp	r3, #4
 8003678:	d00c      	beq.n	8003694 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367a:	4b85      	ldr	r3, [pc, #532]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003682:	2b08      	cmp	r3, #8
 8003684:	d112      	bne.n	80036ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003686:	4b82      	ldr	r3, [pc, #520]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800368e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003692:	d10b      	bne.n	80036ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	4b7e      	ldr	r3, [pc, #504]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d05b      	beq.n	8003758 <HAL_RCC_OscConfig+0x108>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d157      	bne.n	8003758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e242      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036b4:	d106      	bne.n	80036c4 <HAL_RCC_OscConfig+0x74>
 80036b6:	4b76      	ldr	r3, [pc, #472]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a75      	ldr	r2, [pc, #468]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e01d      	b.n	8003700 <HAL_RCC_OscConfig+0xb0>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x98>
 80036ce:	4b70      	ldr	r3, [pc, #448]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b6d      	ldr	r3, [pc, #436]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a6c      	ldr	r2, [pc, #432]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e00b      	b.n	8003700 <HAL_RCC_OscConfig+0xb0>
 80036e8:	4b69      	ldr	r3, [pc, #420]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a68      	ldr	r2, [pc, #416]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4b66      	ldr	r3, [pc, #408]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a65      	ldr	r2, [pc, #404]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80036fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7ff f81e 	bl	8002748 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7ff f81a 	bl	8002748 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	@ 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e207      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b5b      	ldr	r3, [pc, #364]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0xc0>
 800372e:	e014      	b.n	800375a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7ff f80a 	bl	8002748 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003738:	f7ff f806 	bl	8002748 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	@ 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e1f3      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	4b51      	ldr	r3, [pc, #324]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0xe8>
 8003756:	e000      	b.n	800375a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d063      	beq.n	800382e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003766:	4b4a      	ldr	r3, [pc, #296]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003772:	4b47      	ldr	r3, [pc, #284]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800377a:	2b08      	cmp	r3, #8
 800377c:	d11c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800377e:	4b44      	ldr	r3, [pc, #272]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d116      	bne.n	80037b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378a:	4b41      	ldr	r3, [pc, #260]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_RCC_OscConfig+0x152>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e1c7      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4937      	ldr	r1, [pc, #220]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	e03a      	b.n	800382e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d020      	beq.n	8003802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c0:	4b34      	ldr	r3, [pc, #208]	@ (8003894 <HAL_RCC_OscConfig+0x244>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7fe ffbf 	bl	8002748 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ce:	f7fe ffbb 	bl	8002748 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e1a8      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ec:	4b28      	ldr	r3, [pc, #160]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4925      	ldr	r1, [pc, #148]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]
 8003800:	e015      	b.n	800382e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003802:	4b24      	ldr	r3, [pc, #144]	@ (8003894 <HAL_RCC_OscConfig+0x244>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fe ff9e 	bl	8002748 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003810:	f7fe ff9a 	bl	8002748 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e187      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003822:	4b1b      	ldr	r3, [pc, #108]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d036      	beq.n	80038a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d016      	beq.n	8003870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003842:	4b15      	ldr	r3, [pc, #84]	@ (8003898 <HAL_RCC_OscConfig+0x248>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fe ff7e 	bl	8002748 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003850:	f7fe ff7a 	bl	8002748 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e167      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003862:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <HAL_RCC_OscConfig+0x240>)
 8003864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x200>
 800386e:	e01b      	b.n	80038a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003870:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <HAL_RCC_OscConfig+0x248>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003876:	f7fe ff67 	bl	8002748 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387c:	e00e      	b.n	800389c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387e:	f7fe ff63 	bl	8002748 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d907      	bls.n	800389c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e150      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
 8003890:	40023800 	.word	0x40023800
 8003894:	42470000 	.word	0x42470000
 8003898:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389c:	4b88      	ldr	r3, [pc, #544]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 800389e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1ea      	bne.n	800387e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8097 	beq.w	80039e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b6:	2300      	movs	r3, #0
 80038b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ba:	4b81      	ldr	r3, [pc, #516]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	4b7d      	ldr	r3, [pc, #500]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	4a7c      	ldr	r2, [pc, #496]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80038d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038d6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e2:	2301      	movs	r3, #1
 80038e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e6:	4b77      	ldr	r3, [pc, #476]	@ (8003ac4 <HAL_RCC_OscConfig+0x474>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d118      	bne.n	8003924 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f2:	4b74      	ldr	r3, [pc, #464]	@ (8003ac4 <HAL_RCC_OscConfig+0x474>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a73      	ldr	r2, [pc, #460]	@ (8003ac4 <HAL_RCC_OscConfig+0x474>)
 80038f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fe:	f7fe ff23 	bl	8002748 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003906:	f7fe ff1f 	bl	8002748 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e10c      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	4b6a      	ldr	r3, [pc, #424]	@ (8003ac4 <HAL_RCC_OscConfig+0x474>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d106      	bne.n	800393a <HAL_RCC_OscConfig+0x2ea>
 800392c:	4b64      	ldr	r3, [pc, #400]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003930:	4a63      	ldr	r2, [pc, #396]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	6713      	str	r3, [r2, #112]	@ 0x70
 8003938:	e01c      	b.n	8003974 <HAL_RCC_OscConfig+0x324>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b05      	cmp	r3, #5
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x30c>
 8003942:	4b5f      	ldr	r3, [pc, #380]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003946:	4a5e      	ldr	r2, [pc, #376]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003948:	f043 0304 	orr.w	r3, r3, #4
 800394c:	6713      	str	r3, [r2, #112]	@ 0x70
 800394e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003952:	4a5b      	ldr	r2, [pc, #364]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6713      	str	r3, [r2, #112]	@ 0x70
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0x324>
 800395c:	4b58      	ldr	r3, [pc, #352]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003960:	4a57      	ldr	r2, [pc, #348]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	6713      	str	r3, [r2, #112]	@ 0x70
 8003968:	4b55      	ldr	r3, [pc, #340]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396c:	4a54      	ldr	r2, [pc, #336]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 800396e:	f023 0304 	bic.w	r3, r3, #4
 8003972:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d015      	beq.n	80039a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fe fee4 	bl	8002748 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003982:	e00a      	b.n	800399a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003984:	f7fe fee0 	bl	8002748 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e0cb      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399a:	4b49      	ldr	r3, [pc, #292]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0ee      	beq.n	8003984 <HAL_RCC_OscConfig+0x334>
 80039a6:	e014      	b.n	80039d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a8:	f7fe fece 	bl	8002748 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fe feca 	bl	8002748 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e0b5      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1ee      	bne.n	80039b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d105      	bne.n	80039e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d8:	4b39      	ldr	r3, [pc, #228]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80039da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039dc:	4a38      	ldr	r2, [pc, #224]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80039de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80a1 	beq.w	8003b30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ee:	4b34      	ldr	r3, [pc, #208]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d05c      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d141      	bne.n	8003a86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a02:	4b31      	ldr	r3, [pc, #196]	@ (8003ac8 <HAL_RCC_OscConfig+0x478>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fe fe9e 	bl	8002748 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fe fe9a 	bl	8002748 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e087      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a22:	4b27      	ldr	r3, [pc, #156]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	019b      	lsls	r3, r3, #6
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a44:	085b      	lsrs	r3, r3, #1
 8003a46:	3b01      	subs	r3, #1
 8003a48:	041b      	lsls	r3, r3, #16
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	491b      	ldr	r1, [pc, #108]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a58:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac8 <HAL_RCC_OscConfig+0x478>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5e:	f7fe fe73 	bl	8002748 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a66:	f7fe fe6f 	bl	8002748 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e05c      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a78:	4b11      	ldr	r3, [pc, #68]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x416>
 8003a84:	e054      	b.n	8003b30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a86:	4b10      	ldr	r3, [pc, #64]	@ (8003ac8 <HAL_RCC_OscConfig+0x478>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fe5c 	bl	8002748 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a94:	f7fe fe58 	bl	8002748 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e045      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	4b06      	ldr	r3, [pc, #24]	@ (8003ac0 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x444>
 8003ab2:	e03d      	b.n	8003b30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d107      	bne.n	8003acc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e038      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40007000 	.word	0x40007000
 8003ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003acc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b3c <HAL_RCC_OscConfig+0x4ec>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d028      	beq.n	8003b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d121      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d11a      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003afc:	4013      	ands	r3, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d111      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	3b01      	subs	r3, #1
 8003b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800

08003b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0cc      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b54:	4b68      	ldr	r3, [pc, #416]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d90c      	bls.n	8003b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b65      	ldr	r3, [pc, #404]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b63      	ldr	r3, [pc, #396]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0b8      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d020      	beq.n	8003bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b94:	4b59      	ldr	r3, [pc, #356]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a58      	ldr	r2, [pc, #352]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bac:	4b53      	ldr	r3, [pc, #332]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	4a52      	ldr	r2, [pc, #328]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb8:	4b50      	ldr	r3, [pc, #320]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	494d      	ldr	r1, [pc, #308]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d044      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bde:	4b47      	ldr	r3, [pc, #284]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d119      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e07f      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d003      	beq.n	8003bfe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e06f      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e067      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c1e:	4b37      	ldr	r3, [pc, #220]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f023 0203 	bic.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4934      	ldr	r1, [pc, #208]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c30:	f7fe fd8a 	bl	8002748 <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c38:	f7fe fd86 	bl	8002748 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e04f      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 020c 	and.w	r2, r3, #12
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d1eb      	bne.n	8003c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c60:	4b25      	ldr	r3, [pc, #148]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d20c      	bcs.n	8003c88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6e:	4b22      	ldr	r3, [pc, #136]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b20      	ldr	r3, [pc, #128]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e032      	b.n	8003cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c94:	4b19      	ldr	r3, [pc, #100]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4916      	ldr	r1, [pc, #88]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cb2:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	490e      	ldr	r1, [pc, #56]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cc6:	f000 f821 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cfc <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	490a      	ldr	r1, [pc, #40]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd8:	5ccb      	ldrb	r3, [r1, r3]
 8003cda:	fa22 f303 	lsr.w	r3, r2, r3
 8003cde:	4a09      	ldr	r2, [pc, #36]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ce2:	4b09      	ldr	r3, [pc, #36]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe fcea 	bl	80026c0 <HAL_InitTick>

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023c00 	.word	0x40023c00
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	08007e08 	.word	0x08007e08
 8003d04:	20000008 	.word	0x20000008
 8003d08:	2000000c 	.word	0x2000000c

08003d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d10:	b094      	sub	sp, #80	@ 0x50
 8003d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d24:	4b79      	ldr	r3, [pc, #484]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 030c 	and.w	r3, r3, #12
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d00d      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0x40>
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	f200 80e1 	bhi.w	8003ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x34>
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d003      	beq.n	8003d46 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d3e:	e0db      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b73      	ldr	r3, [pc, #460]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d44:	e0db      	b.n	8003efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d46:	4b73      	ldr	r3, [pc, #460]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d4a:	e0d8      	b.n	8003efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d56:	4b6d      	ldr	r3, [pc, #436]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d063      	beq.n	8003e2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d62:	4b6a      	ldr	r3, [pc, #424]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	099b      	lsrs	r3, r3, #6
 8003d68:	2200      	movs	r2, #0
 8003d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d76:	2300      	movs	r3, #0
 8003d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d7e:	4622      	mov	r2, r4
 8003d80:	462b      	mov	r3, r5
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f04f 0100 	mov.w	r1, #0
 8003d8a:	0159      	lsls	r1, r3, #5
 8003d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d90:	0150      	lsls	r0, r2, #5
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4621      	mov	r1, r4
 8003d98:	1a51      	subs	r1, r2, r1
 8003d9a:	6139      	str	r1, [r7, #16]
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003db0:	4659      	mov	r1, fp
 8003db2:	018b      	lsls	r3, r1, #6
 8003db4:	4651      	mov	r1, sl
 8003db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dba:	4651      	mov	r1, sl
 8003dbc:	018a      	lsls	r2, r1, #6
 8003dbe:	4651      	mov	r1, sl
 8003dc0:	ebb2 0801 	subs.w	r8, r2, r1
 8003dc4:	4659      	mov	r1, fp
 8003dc6:	eb63 0901 	sbc.w	r9, r3, r1
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dde:	4690      	mov	r8, r2
 8003de0:	4699      	mov	r9, r3
 8003de2:	4623      	mov	r3, r4
 8003de4:	eb18 0303 	adds.w	r3, r8, r3
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	462b      	mov	r3, r5
 8003dec:	eb49 0303 	adc.w	r3, r9, r3
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dfe:	4629      	mov	r1, r5
 8003e00:	024b      	lsls	r3, r1, #9
 8003e02:	4621      	mov	r1, r4
 8003e04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e08:	4621      	mov	r1, r4
 8003e0a:	024a      	lsls	r2, r1, #9
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e12:	2200      	movs	r2, #0
 8003e14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e1c:	f7fc fa38 	bl	8000290 <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4613      	mov	r3, r2
 8003e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e28:	e058      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2a:	4b38      	ldr	r3, [pc, #224]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	099b      	lsrs	r3, r3, #6
 8003e30:	2200      	movs	r2, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	4611      	mov	r1, r2
 8003e36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e3a:	623b      	str	r3, [r7, #32]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e44:	4642      	mov	r2, r8
 8003e46:	464b      	mov	r3, r9
 8003e48:	f04f 0000 	mov.w	r0, #0
 8003e4c:	f04f 0100 	mov.w	r1, #0
 8003e50:	0159      	lsls	r1, r3, #5
 8003e52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e56:	0150      	lsls	r0, r2, #5
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e62:	4649      	mov	r1, r9
 8003e64:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e7c:	ebb2 040a 	subs.w	r4, r2, sl
 8003e80:	eb63 050b 	sbc.w	r5, r3, fp
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	00eb      	lsls	r3, r5, #3
 8003e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e92:	00e2      	lsls	r2, r4, #3
 8003e94:	4614      	mov	r4, r2
 8003e96:	461d      	mov	r5, r3
 8003e98:	4643      	mov	r3, r8
 8003e9a:	18e3      	adds	r3, r4, r3
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	eb45 0303 	adc.w	r3, r5, r3
 8003ea4:	607b      	str	r3, [r7, #4]
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	028b      	lsls	r3, r1, #10
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	028a      	lsls	r2, r1, #10
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	61fa      	str	r2, [r7, #28]
 8003ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ed0:	f7fc f9de 	bl	8000290 <__aeabi_uldivmod>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4613      	mov	r3, r2
 8003eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003edc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	0c1b      	lsrs	r3, r3, #16
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003eec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ef6:	e002      	b.n	8003efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ef8:	4b05      	ldr	r3, [pc, #20]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003efa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3750      	adds	r7, #80	@ 0x50
 8003f04:	46bd      	mov	sp, r7
 8003f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	00f42400 	.word	0x00f42400
 8003f14:	007a1200 	.word	0x007a1200

08003f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f1c:	4b03      	ldr	r3, [pc, #12]	@ (8003f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000008 	.word	0x20000008

08003f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f34:	f7ff fff0 	bl	8003f18 <HAL_RCC_GetHCLKFreq>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	4b05      	ldr	r3, [pc, #20]	@ (8003f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	0a9b      	lsrs	r3, r3, #10
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	4903      	ldr	r1, [pc, #12]	@ (8003f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f46:	5ccb      	ldrb	r3, [r1, r3]
 8003f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40023800 	.word	0x40023800
 8003f54:	08007e18 	.word	0x08007e18

08003f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f5c:	f7ff ffdc 	bl	8003f18 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	0b5b      	lsrs	r3, r3, #13
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4903      	ldr	r1, [pc, #12]	@ (8003f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	08007e18 	.word	0x08007e18

08003f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e041      	b.n	8004016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fe f862 	bl	8002070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f000 fed6 	bl	8004d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d001      	beq.n	8004038 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e03c      	b.n	80040b2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1e      	ldr	r2, [pc, #120]	@ (80040c0 <HAL_TIM_Base_Start+0xa0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d018      	beq.n	800407c <HAL_TIM_Base_Start+0x5c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004052:	d013      	beq.n	800407c <HAL_TIM_Base_Start+0x5c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1a      	ldr	r2, [pc, #104]	@ (80040c4 <HAL_TIM_Base_Start+0xa4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00e      	beq.n	800407c <HAL_TIM_Base_Start+0x5c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a19      	ldr	r2, [pc, #100]	@ (80040c8 <HAL_TIM_Base_Start+0xa8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d009      	beq.n	800407c <HAL_TIM_Base_Start+0x5c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a17      	ldr	r2, [pc, #92]	@ (80040cc <HAL_TIM_Base_Start+0xac>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_TIM_Base_Start+0x5c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a16      	ldr	r2, [pc, #88]	@ (80040d0 <HAL_TIM_Base_Start+0xb0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d111      	bne.n	80040a0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b06      	cmp	r3, #6
 800408c:	d010      	beq.n	80040b0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409e:	e007      	b.n	80040b0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40010000 	.word	0x40010000
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40000800 	.word	0x40000800
 80040cc:	40000c00 	.word	0x40000c00
 80040d0:	40014000 	.word	0x40014000

080040d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d001      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e044      	b.n	8004176 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1e      	ldr	r2, [pc, #120]	@ (8004184 <HAL_TIM_Base_Start_IT+0xb0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d018      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x6c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004116:	d013      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x6c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1a      	ldr	r2, [pc, #104]	@ (8004188 <HAL_TIM_Base_Start_IT+0xb4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00e      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x6c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a19      	ldr	r2, [pc, #100]	@ (800418c <HAL_TIM_Base_Start_IT+0xb8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d009      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x6c>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a17      	ldr	r2, [pc, #92]	@ (8004190 <HAL_TIM_Base_Start_IT+0xbc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x6c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a16      	ldr	r2, [pc, #88]	@ (8004194 <HAL_TIM_Base_Start_IT+0xc0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d111      	bne.n	8004164 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b06      	cmp	r3, #6
 8004150:	d010      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004162:	e007      	b.n	8004174 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40010000 	.word	0x40010000
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800
 8004190:	40000c00 	.word	0x40000c00
 8004194:	40014000 	.word	0x40014000

08004198 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e041      	b.n	800422e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd ffd8 	bl	8002174 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f000 fdca 	bl	8004d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <HAL_TIM_PWM_Start+0x24>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	bf14      	ite	ne
 8004254:	2301      	movne	r3, #1
 8004256:	2300      	moveq	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	e022      	b.n	80042a2 <HAL_TIM_PWM_Start+0x6a>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b04      	cmp	r3, #4
 8004260:	d109      	bne.n	8004276 <HAL_TIM_PWM_Start+0x3e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	bf14      	ite	ne
 800426e:	2301      	movne	r3, #1
 8004270:	2300      	moveq	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	e015      	b.n	80042a2 <HAL_TIM_PWM_Start+0x6a>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d109      	bne.n	8004290 <HAL_TIM_PWM_Start+0x58>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	bf14      	ite	ne
 8004288:	2301      	movne	r3, #1
 800428a:	2300      	moveq	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	e008      	b.n	80042a2 <HAL_TIM_PWM_Start+0x6a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	bf14      	ite	ne
 800429c:	2301      	movne	r3, #1
 800429e:	2300      	moveq	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e068      	b.n	800437c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d104      	bne.n	80042ba <HAL_TIM_PWM_Start+0x82>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042b8:	e013      	b.n	80042e2 <HAL_TIM_PWM_Start+0xaa>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d104      	bne.n	80042ca <HAL_TIM_PWM_Start+0x92>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042c8:	e00b      	b.n	80042e2 <HAL_TIM_PWM_Start+0xaa>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d104      	bne.n	80042da <HAL_TIM_PWM_Start+0xa2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042d8:	e003      	b.n	80042e2 <HAL_TIM_PWM_Start+0xaa>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2202      	movs	r2, #2
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2201      	movs	r2, #1
 80042e8:	6839      	ldr	r1, [r7, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f001 f910 	bl	8005510 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a23      	ldr	r2, [pc, #140]	@ (8004384 <HAL_TIM_PWM_Start+0x14c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d107      	bne.n	800430a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004308:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1d      	ldr	r2, [pc, #116]	@ (8004384 <HAL_TIM_PWM_Start+0x14c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d018      	beq.n	8004346 <HAL_TIM_PWM_Start+0x10e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800431c:	d013      	beq.n	8004346 <HAL_TIM_PWM_Start+0x10e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a19      	ldr	r2, [pc, #100]	@ (8004388 <HAL_TIM_PWM_Start+0x150>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_TIM_PWM_Start+0x10e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a17      	ldr	r2, [pc, #92]	@ (800438c <HAL_TIM_PWM_Start+0x154>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_TIM_PWM_Start+0x10e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a16      	ldr	r2, [pc, #88]	@ (8004390 <HAL_TIM_PWM_Start+0x158>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_TIM_PWM_Start+0x10e>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a14      	ldr	r2, [pc, #80]	@ (8004394 <HAL_TIM_PWM_Start+0x15c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d111      	bne.n	800436a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b06      	cmp	r3, #6
 8004356:	d010      	beq.n	800437a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004368:	e007      	b.n	800437a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40010000 	.word	0x40010000
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40000c00 	.word	0x40000c00
 8004394:	40014000 	.word	0x40014000

08004398 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e041      	b.n	800442e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f839 	bl	8004436 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f000 fcca 	bl	8004d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d104      	bne.n	800446a <HAL_TIM_IC_Start_IT+0x1e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004466:	b2db      	uxtb	r3, r3
 8004468:	e013      	b.n	8004492 <HAL_TIM_IC_Start_IT+0x46>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b04      	cmp	r3, #4
 800446e:	d104      	bne.n	800447a <HAL_TIM_IC_Start_IT+0x2e>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004476:	b2db      	uxtb	r3, r3
 8004478:	e00b      	b.n	8004492 <HAL_TIM_IC_Start_IT+0x46>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d104      	bne.n	800448a <HAL_TIM_IC_Start_IT+0x3e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004486:	b2db      	uxtb	r3, r3
 8004488:	e003      	b.n	8004492 <HAL_TIM_IC_Start_IT+0x46>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004490:	b2db      	uxtb	r3, r3
 8004492:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d104      	bne.n	80044a4 <HAL_TIM_IC_Start_IT+0x58>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	e013      	b.n	80044cc <HAL_TIM_IC_Start_IT+0x80>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d104      	bne.n	80044b4 <HAL_TIM_IC_Start_IT+0x68>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e00b      	b.n	80044cc <HAL_TIM_IC_Start_IT+0x80>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d104      	bne.n	80044c4 <HAL_TIM_IC_Start_IT+0x78>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e003      	b.n	80044cc <HAL_TIM_IC_Start_IT+0x80>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80044ce:	7bbb      	ldrb	r3, [r7, #14]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d102      	bne.n	80044da <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80044d4:	7b7b      	ldrb	r3, [r7, #13]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d001      	beq.n	80044de <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e0c2      	b.n	8004664 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <HAL_TIM_IC_Start_IT+0xa2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044ec:	e013      	b.n	8004516 <HAL_TIM_IC_Start_IT+0xca>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d104      	bne.n	80044fe <HAL_TIM_IC_Start_IT+0xb2>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044fc:	e00b      	b.n	8004516 <HAL_TIM_IC_Start_IT+0xca>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b08      	cmp	r3, #8
 8004502:	d104      	bne.n	800450e <HAL_TIM_IC_Start_IT+0xc2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800450c:	e003      	b.n	8004516 <HAL_TIM_IC_Start_IT+0xca>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_TIM_IC_Start_IT+0xda>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004524:	e013      	b.n	800454e <HAL_TIM_IC_Start_IT+0x102>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d104      	bne.n	8004536 <HAL_TIM_IC_Start_IT+0xea>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004534:	e00b      	b.n	800454e <HAL_TIM_IC_Start_IT+0x102>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d104      	bne.n	8004546 <HAL_TIM_IC_Start_IT+0xfa>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004544:	e003      	b.n	800454e <HAL_TIM_IC_Start_IT+0x102>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b0c      	cmp	r3, #12
 8004552:	d841      	bhi.n	80045d8 <HAL_TIM_IC_Start_IT+0x18c>
 8004554:	a201      	add	r2, pc, #4	@ (adr r2, 800455c <HAL_TIM_IC_Start_IT+0x110>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	08004591 	.word	0x08004591
 8004560:	080045d9 	.word	0x080045d9
 8004564:	080045d9 	.word	0x080045d9
 8004568:	080045d9 	.word	0x080045d9
 800456c:	080045a3 	.word	0x080045a3
 8004570:	080045d9 	.word	0x080045d9
 8004574:	080045d9 	.word	0x080045d9
 8004578:	080045d9 	.word	0x080045d9
 800457c:	080045b5 	.word	0x080045b5
 8004580:	080045d9 	.word	0x080045d9
 8004584:	080045d9 	.word	0x080045d9
 8004588:	080045d9 	.word	0x080045d9
 800458c:	080045c7 	.word	0x080045c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0202 	orr.w	r2, r2, #2
 800459e:	60da      	str	r2, [r3, #12]
      break;
 80045a0:	e01d      	b.n	80045de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0204 	orr.w	r2, r2, #4
 80045b0:	60da      	str	r2, [r3, #12]
      break;
 80045b2:	e014      	b.n	80045de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0208 	orr.w	r2, r2, #8
 80045c2:	60da      	str	r2, [r3, #12]
      break;
 80045c4:	e00b      	b.n	80045de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0210 	orr.w	r2, r2, #16
 80045d4:	60da      	str	r2, [r3, #12]
      break;
 80045d6:	e002      	b.n	80045de <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      break;
 80045dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d13e      	bne.n	8004662 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2201      	movs	r2, #1
 80045ea:	6839      	ldr	r1, [r7, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 ff8f 	bl	8005510 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1d      	ldr	r2, [pc, #116]	@ (800466c <HAL_TIM_IC_Start_IT+0x220>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d018      	beq.n	800462e <HAL_TIM_IC_Start_IT+0x1e2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004604:	d013      	beq.n	800462e <HAL_TIM_IC_Start_IT+0x1e2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a19      	ldr	r2, [pc, #100]	@ (8004670 <HAL_TIM_IC_Start_IT+0x224>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00e      	beq.n	800462e <HAL_TIM_IC_Start_IT+0x1e2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a17      	ldr	r2, [pc, #92]	@ (8004674 <HAL_TIM_IC_Start_IT+0x228>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d009      	beq.n	800462e <HAL_TIM_IC_Start_IT+0x1e2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a16      	ldr	r2, [pc, #88]	@ (8004678 <HAL_TIM_IC_Start_IT+0x22c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d004      	beq.n	800462e <HAL_TIM_IC_Start_IT+0x1e2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a14      	ldr	r2, [pc, #80]	@ (800467c <HAL_TIM_IC_Start_IT+0x230>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d111      	bne.n	8004652 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b06      	cmp	r3, #6
 800463e:	d010      	beq.n	8004662 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004650:	e007      	b.n	8004662 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0201 	orr.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004662:	7bfb      	ldrb	r3, [r7, #15]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40010000 	.word	0x40010000
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40000c00 	.word	0x40000c00
 800467c:	40014000 	.word	0x40014000

08004680 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d020      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01b      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0202 	mvn.w	r2, #2
 80046b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fd fbc6 	bl	8001e5c <HAL_TIM_IC_CaptureCallback>
 80046d0:	e005      	b.n	80046de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fb2e 	bl	8004d34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fb35 	bl	8004d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d020      	beq.n	8004730 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01b      	beq.n	8004730 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f06f 0204 	mvn.w	r2, #4
 8004700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fd fba0 	bl	8001e5c <HAL_TIM_IC_CaptureCallback>
 800471c:	e005      	b.n	800472a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fb08 	bl	8004d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fb0f 	bl	8004d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d020      	beq.n	800477c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01b      	beq.n	800477c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0208 	mvn.w	r2, #8
 800474c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2204      	movs	r2, #4
 8004752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fd fb7a 	bl	8001e5c <HAL_TIM_IC_CaptureCallback>
 8004768:	e005      	b.n	8004776 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fae2 	bl	8004d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fae9 	bl	8004d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	2b00      	cmp	r3, #0
 8004784:	d020      	beq.n	80047c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 0310 	and.w	r3, r3, #16
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01b      	beq.n	80047c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0210 	mvn.w	r2, #16
 8004798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2208      	movs	r2, #8
 800479e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fd fb54 	bl	8001e5c <HAL_TIM_IC_CaptureCallback>
 80047b4:	e005      	b.n	80047c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fabc 	bl	8004d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fac3 	bl	8004d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00c      	beq.n	80047ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d007      	beq.n	80047ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f06f 0201 	mvn.w	r2, #1
 80047e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fd fb8c 	bl	8001f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00c      	beq.n	8004810 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d007      	beq.n	8004810 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 ff1e 	bl	800564c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00c      	beq.n	8004834 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d007      	beq.n	8004834 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800482c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fa94 	bl	8004d5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00c      	beq.n	8004858 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d007      	beq.n	8004858 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0220 	mvn.w	r2, #32
 8004850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fef0 	bl	8005638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_TIM_IC_ConfigChannel+0x1e>
 800487a:	2302      	movs	r3, #2
 800487c:	e088      	b.n	8004990 <HAL_TIM_IC_ConfigChannel+0x130>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d11b      	bne.n	80048c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800489c:	f000 fc80 	bl	80051a0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 020c 	bic.w	r2, r2, #12
 80048ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6999      	ldr	r1, [r3, #24]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	619a      	str	r2, [r3, #24]
 80048c2:	e060      	b.n	8004986 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d11c      	bne.n	8004904 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80048da:	f000 fcf8 	bl	80052ce <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699a      	ldr	r2, [r3, #24]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80048ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6999      	ldr	r1, [r3, #24]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	021a      	lsls	r2, r3, #8
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	619a      	str	r2, [r3, #24]
 8004902:	e040      	b.n	8004986 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b08      	cmp	r3, #8
 8004908:	d11b      	bne.n	8004942 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800491a:	f000 fd45 	bl	80053a8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69da      	ldr	r2, [r3, #28]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 020c 	bic.w	r2, r2, #12
 800492c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69d9      	ldr	r1, [r3, #28]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	61da      	str	r2, [r3, #28]
 8004940:	e021      	b.n	8004986 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b0c      	cmp	r3, #12
 8004946:	d11c      	bne.n	8004982 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004958:	f000 fd62 	bl	8005420 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800496a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69d9      	ldr	r1, [r3, #28]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	021a      	lsls	r2, r3, #8
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	61da      	str	r2, [r3, #28]
 8004980:	e001      	b.n	8004986 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800498e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e0ae      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	f200 809f 	bhi.w	8004b04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049c6:	a201      	add	r2, pc, #4	@ (adr r2, 80049cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	08004a01 	.word	0x08004a01
 80049d0:	08004b05 	.word	0x08004b05
 80049d4:	08004b05 	.word	0x08004b05
 80049d8:	08004b05 	.word	0x08004b05
 80049dc:	08004a41 	.word	0x08004a41
 80049e0:	08004b05 	.word	0x08004b05
 80049e4:	08004b05 	.word	0x08004b05
 80049e8:	08004b05 	.word	0x08004b05
 80049ec:	08004a83 	.word	0x08004a83
 80049f0:	08004b05 	.word	0x08004b05
 80049f4:	08004b05 	.word	0x08004b05
 80049f8:	08004b05 	.word	0x08004b05
 80049fc:	08004ac3 	.word	0x08004ac3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fa3e 	bl	8004e88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0208 	orr.w	r2, r2, #8
 8004a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0204 	bic.w	r2, r2, #4
 8004a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6999      	ldr	r1, [r3, #24]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	619a      	str	r2, [r3, #24]
      break;
 8004a3e:	e064      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fa84 	bl	8004f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6999      	ldr	r1, [r3, #24]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	021a      	lsls	r2, r3, #8
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	619a      	str	r2, [r3, #24]
      break;
 8004a80:	e043      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 facf 	bl	800502c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0208 	orr.w	r2, r2, #8
 8004a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0204 	bic.w	r2, r2, #4
 8004aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69d9      	ldr	r1, [r3, #28]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	61da      	str	r2, [r3, #28]
      break;
 8004ac0:	e023      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fb19 	bl	8005100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69d9      	ldr	r1, [r3, #28]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	021a      	lsls	r2, r3, #8
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	61da      	str	r2, [r3, #28]
      break;
 8004b02:	e002      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	75fb      	strb	r3, [r7, #23]
      break;
 8004b08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_TIM_ConfigClockSource+0x1c>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e0b4      	b.n	8004ca2 <HAL_TIM_ConfigClockSource+0x186>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b70:	d03e      	beq.n	8004bf0 <HAL_TIM_ConfigClockSource+0xd4>
 8004b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b76:	f200 8087 	bhi.w	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7e:	f000 8086 	beq.w	8004c8e <HAL_TIM_ConfigClockSource+0x172>
 8004b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b86:	d87f      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004b88:	2b70      	cmp	r3, #112	@ 0x70
 8004b8a:	d01a      	beq.n	8004bc2 <HAL_TIM_ConfigClockSource+0xa6>
 8004b8c:	2b70      	cmp	r3, #112	@ 0x70
 8004b8e:	d87b      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004b90:	2b60      	cmp	r3, #96	@ 0x60
 8004b92:	d050      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0x11a>
 8004b94:	2b60      	cmp	r3, #96	@ 0x60
 8004b96:	d877      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b50      	cmp	r3, #80	@ 0x50
 8004b9a:	d03c      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0xfa>
 8004b9c:	2b50      	cmp	r3, #80	@ 0x50
 8004b9e:	d873      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b40      	cmp	r3, #64	@ 0x40
 8004ba2:	d058      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x13a>
 8004ba4:	2b40      	cmp	r3, #64	@ 0x40
 8004ba6:	d86f      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b30      	cmp	r3, #48	@ 0x30
 8004baa:	d064      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x15a>
 8004bac:	2b30      	cmp	r3, #48	@ 0x30
 8004bae:	d86b      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d060      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x15a>
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d867      	bhi.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d05c      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x15a>
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d05a      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x15a>
 8004bc0:	e062      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bd2:	f000 fc7d 	bl	80054d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004be4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	609a      	str	r2, [r3, #8]
      break;
 8004bee:	e04f      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c00:	f000 fc66 	bl	80054d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c12:	609a      	str	r2, [r3, #8]
      break;
 8004c14:	e03c      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c22:	461a      	mov	r2, r3
 8004c24:	f000 fb24 	bl	8005270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2150      	movs	r1, #80	@ 0x50
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fc33 	bl	800549a <TIM_ITRx_SetConfig>
      break;
 8004c34:	e02c      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c42:	461a      	mov	r2, r3
 8004c44:	f000 fb80 	bl	8005348 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2160      	movs	r1, #96	@ 0x60
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fc23 	bl	800549a <TIM_ITRx_SetConfig>
      break;
 8004c54:	e01c      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c62:	461a      	mov	r2, r3
 8004c64:	f000 fb04 	bl	8005270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2140      	movs	r1, #64	@ 0x40
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fc13 	bl	800549a <TIM_ITRx_SetConfig>
      break;
 8004c74:	e00c      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4610      	mov	r0, r2
 8004c82:	f000 fc0a 	bl	800549a <TIM_ITRx_SetConfig>
      break;
 8004c86:	e003      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8c:	e000      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b0c      	cmp	r3, #12
 8004cbe:	d831      	bhi.n	8004d24 <HAL_TIM_ReadCapturedValue+0x78>
 8004cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004cfd 	.word	0x08004cfd
 8004ccc:	08004d25 	.word	0x08004d25
 8004cd0:	08004d25 	.word	0x08004d25
 8004cd4:	08004d25 	.word	0x08004d25
 8004cd8:	08004d07 	.word	0x08004d07
 8004cdc:	08004d25 	.word	0x08004d25
 8004ce0:	08004d25 	.word	0x08004d25
 8004ce4:	08004d25 	.word	0x08004d25
 8004ce8:	08004d11 	.word	0x08004d11
 8004cec:	08004d25 	.word	0x08004d25
 8004cf0:	08004d25 	.word	0x08004d25
 8004cf4:	08004d25 	.word	0x08004d25
 8004cf8:	08004d1b 	.word	0x08004d1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d02:	60fb      	str	r3, [r7, #12]

      break;
 8004d04:	e00f      	b.n	8004d26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0c:	60fb      	str	r3, [r7, #12]

      break;
 8004d0e:	e00a      	b.n	8004d26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d16:	60fb      	str	r3, [r7, #12]

      break;
 8004d18:	e005      	b.n	8004d26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	60fb      	str	r3, [r7, #12]

      break;
 8004d22:	e000      	b.n	8004d26 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004d24:	bf00      	nop
  }

  return tmpreg;
 8004d26:	68fb      	ldr	r3, [r7, #12]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a3a      	ldr	r2, [pc, #232]	@ (8004e6c <TIM_Base_SetConfig+0xfc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00f      	beq.n	8004da8 <TIM_Base_SetConfig+0x38>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d8e:	d00b      	beq.n	8004da8 <TIM_Base_SetConfig+0x38>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a37      	ldr	r2, [pc, #220]	@ (8004e70 <TIM_Base_SetConfig+0x100>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d007      	beq.n	8004da8 <TIM_Base_SetConfig+0x38>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a36      	ldr	r2, [pc, #216]	@ (8004e74 <TIM_Base_SetConfig+0x104>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_Base_SetConfig+0x38>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a35      	ldr	r2, [pc, #212]	@ (8004e78 <TIM_Base_SetConfig+0x108>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d108      	bne.n	8004dba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8004e6c <TIM_Base_SetConfig+0xfc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01b      	beq.n	8004dfa <TIM_Base_SetConfig+0x8a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc8:	d017      	beq.n	8004dfa <TIM_Base_SetConfig+0x8a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a28      	ldr	r2, [pc, #160]	@ (8004e70 <TIM_Base_SetConfig+0x100>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <TIM_Base_SetConfig+0x8a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a27      	ldr	r2, [pc, #156]	@ (8004e74 <TIM_Base_SetConfig+0x104>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00f      	beq.n	8004dfa <TIM_Base_SetConfig+0x8a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a26      	ldr	r2, [pc, #152]	@ (8004e78 <TIM_Base_SetConfig+0x108>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00b      	beq.n	8004dfa <TIM_Base_SetConfig+0x8a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a25      	ldr	r2, [pc, #148]	@ (8004e7c <TIM_Base_SetConfig+0x10c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d007      	beq.n	8004dfa <TIM_Base_SetConfig+0x8a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a24      	ldr	r2, [pc, #144]	@ (8004e80 <TIM_Base_SetConfig+0x110>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d003      	beq.n	8004dfa <TIM_Base_SetConfig+0x8a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a23      	ldr	r2, [pc, #140]	@ (8004e84 <TIM_Base_SetConfig+0x114>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d108      	bne.n	8004e0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a0e      	ldr	r2, [pc, #56]	@ (8004e6c <TIM_Base_SetConfig+0xfc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d103      	bne.n	8004e40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d105      	bne.n	8004e5e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f023 0201 	bic.w	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	611a      	str	r2, [r3, #16]
  }
}
 8004e5e:	bf00      	nop
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40010000 	.word	0x40010000
 8004e70:	40000400 	.word	0x40000400
 8004e74:	40000800 	.word	0x40000800
 8004e78:	40000c00 	.word	0x40000c00
 8004e7c:	40014000 	.word	0x40014000
 8004e80:	40014400 	.word	0x40014400
 8004e84:	40014800 	.word	0x40014800

08004e88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f023 0201 	bic.w	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0303 	bic.w	r3, r3, #3
 8004ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f023 0302 	bic.w	r3, r3, #2
 8004ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a1c      	ldr	r2, [pc, #112]	@ (8004f50 <TIM_OC1_SetConfig+0xc8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d10c      	bne.n	8004efe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f023 0308 	bic.w	r3, r3, #8
 8004eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f023 0304 	bic.w	r3, r3, #4
 8004efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a13      	ldr	r2, [pc, #76]	@ (8004f50 <TIM_OC1_SetConfig+0xc8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d111      	bne.n	8004f2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	621a      	str	r2, [r3, #32]
}
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40010000 	.word	0x40010000

08004f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f023 0210 	bic.w	r2, r3, #16
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f023 0320 	bic.w	r3, r3, #32
 8004f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a1e      	ldr	r2, [pc, #120]	@ (8005028 <TIM_OC2_SetConfig+0xd4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d10d      	bne.n	8004fd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a15      	ldr	r2, [pc, #84]	@ (8005028 <TIM_OC2_SetConfig+0xd4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d113      	bne.n	8005000 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40010000 	.word	0x40010000

0800502c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800505a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0303 	bic.w	r3, r3, #3
 8005062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	021b      	lsls	r3, r3, #8
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a1d      	ldr	r2, [pc, #116]	@ (80050fc <TIM_OC3_SetConfig+0xd0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d10d      	bne.n	80050a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a14      	ldr	r2, [pc, #80]	@ (80050fc <TIM_OC3_SetConfig+0xd0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d113      	bne.n	80050d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	621a      	str	r2, [r3, #32]
}
 80050f0:	bf00      	nop
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40010000 	.word	0x40010000

08005100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800512e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800514a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	031b      	lsls	r3, r3, #12
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a10      	ldr	r2, [pc, #64]	@ (800519c <TIM_OC4_SetConfig+0x9c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d109      	bne.n	8005174 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	019b      	lsls	r3, r3, #6
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40010000 	.word	0x40010000

080051a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f023 0201 	bic.w	r2, r3, #1
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4a24      	ldr	r2, [pc, #144]	@ (800525c <TIM_TI1_SetConfig+0xbc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <TIM_TI1_SetConfig+0x56>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d4:	d00f      	beq.n	80051f6 <TIM_TI1_SetConfig+0x56>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4a21      	ldr	r2, [pc, #132]	@ (8005260 <TIM_TI1_SetConfig+0xc0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00b      	beq.n	80051f6 <TIM_TI1_SetConfig+0x56>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4a20      	ldr	r2, [pc, #128]	@ (8005264 <TIM_TI1_SetConfig+0xc4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d007      	beq.n	80051f6 <TIM_TI1_SetConfig+0x56>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005268 <TIM_TI1_SetConfig+0xc8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_TI1_SetConfig+0x56>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4a1e      	ldr	r2, [pc, #120]	@ (800526c <TIM_TI1_SetConfig+0xcc>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d101      	bne.n	80051fa <TIM_TI1_SetConfig+0x5a>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <TIM_TI1_SetConfig+0x5c>
 80051fa:	2300      	movs	r3, #0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	e003      	b.n	800521a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	b2db      	uxtb	r3, r3
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f023 030a 	bic.w	r3, r3, #10
 8005234:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f003 030a 	and.w	r3, r3, #10
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40010000 	.word	0x40010000
 8005260:	40000400 	.word	0x40000400
 8005264:	40000800 	.word	0x40000800
 8005268:	40000c00 	.word	0x40000c00
 800526c:	40014000 	.word	0x40014000

08005270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f023 0201 	bic.w	r2, r3, #1
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800529a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f023 030a 	bic.w	r3, r3, #10
 80052ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	621a      	str	r2, [r3, #32]
}
 80052c2:	bf00      	nop
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b087      	sub	sp, #28
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
 80052da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0210 	bic.w	r2, r3, #16
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	021b      	lsls	r3, r3, #8
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800530c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	031b      	lsls	r3, r3, #12
 8005312:	b29b      	uxth	r3, r3
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005320:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	621a      	str	r2, [r3, #32]
}
 800533c:	bf00      	nop
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	f023 0210 	bic.w	r2, r3, #16
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	031b      	lsls	r3, r3, #12
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005384:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	621a      	str	r2, [r3, #32]
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f023 0303 	bic.w	r3, r3, #3
 80053d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80053f8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	621a      	str	r2, [r3, #32]
}
 8005414:	bf00      	nop
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800544c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800545e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	031b      	lsls	r3, r3, #12
 8005464:	b29b      	uxth	r3, r3
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005472:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	031b      	lsls	r3, r3, #12
 8005478:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	621a      	str	r2, [r3, #32]
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800549a:	b480      	push	{r7}
 800549c:	b085      	sub	sp, #20
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f043 0307 	orr.w	r3, r3, #7
 80054bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	609a      	str	r2, [r3, #8]
}
 80054c4:	bf00      	nop
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	021a      	lsls	r2, r3, #8
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	431a      	orrs	r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	609a      	str	r2, [r3, #8]
}
 8005504:	bf00      	nop
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f003 031f 	and.w	r3, r3, #31
 8005522:	2201      	movs	r2, #1
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a1a      	ldr	r2, [r3, #32]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	43db      	mvns	r3, r3
 8005532:	401a      	ands	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a1a      	ldr	r2, [r3, #32]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f003 031f 	and.w	r3, r3, #31
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	fa01 f303 	lsl.w	r3, r1, r3
 8005548:	431a      	orrs	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005570:	2302      	movs	r3, #2
 8005572:	e050      	b.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d018      	beq.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c0:	d013      	beq.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a18      	ldr	r2, [pc, #96]	@ (8005628 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00e      	beq.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a16      	ldr	r2, [pc, #88]	@ (800562c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d009      	beq.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a15      	ldr	r2, [pc, #84]	@ (8005630 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d004      	beq.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a13      	ldr	r2, [pc, #76]	@ (8005634 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d10c      	bne.n	8005604 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40010000 	.word	0x40010000
 8005628:	40000400 	.word	0x40000400
 800562c:	40000800 	.word	0x40000800
 8005630:	40000c00 	.word	0x40000c00
 8005634:	40014000 	.word	0x40014000

08005638 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e042      	b.n	80056f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fc fe16 	bl	80022b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2224      	movs	r2, #36	@ 0x24
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fdbd 	bl	8006224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695a      	ldr	r2, [r3, #20]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	@ 0x28
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4613      	mov	r3, r2
 800570e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b20      	cmp	r3, #32
 800571e:	d175      	bne.n	800580c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <HAL_UART_Transmit+0x2c>
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e06e      	b.n	800580e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2221      	movs	r2, #33	@ 0x21
 800573a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800573e:	f7fd f803 	bl	8002748 <HAL_GetTick>
 8005742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	88fa      	ldrh	r2, [r7, #6]
 8005748:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	88fa      	ldrh	r2, [r7, #6]
 800574e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005758:	d108      	bne.n	800576c <HAL_UART_Transmit+0x6c>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d104      	bne.n	800576c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	e003      	b.n	8005774 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005770:	2300      	movs	r3, #0
 8005772:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005774:	e02e      	b.n	80057d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2200      	movs	r2, #0
 800577e:	2180      	movs	r1, #128	@ 0x80
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fb1f 	bl	8005dc4 <UART_WaitOnFlagUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e03a      	b.n	800580e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10b      	bne.n	80057b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	3302      	adds	r3, #2
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	e007      	b.n	80057c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	3301      	adds	r3, #1
 80057c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1cb      	bne.n	8005776 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2200      	movs	r2, #0
 80057e6:	2140      	movs	r1, #64	@ 0x40
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 faeb 	bl	8005dc4 <UART_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e006      	b.n	800580e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	e000      	b.n	800580e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800580c:	2302      	movs	r3, #2
  }
}
 800580e:	4618      	mov	r0, r3
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	4613      	mov	r3, r2
 8005822:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b20      	cmp	r3, #32
 800582e:	d112      	bne.n	8005856 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <HAL_UART_Receive_IT+0x26>
 8005836:	88fb      	ldrh	r3, [r7, #6]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e00b      	b.n	8005858 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	461a      	mov	r2, r3
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 fb12 	bl	8005e76 <UART_Start_Receive_IT>
 8005852:	4603      	mov	r3, r0
 8005854:	e000      	b.n	8005858 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005856:	2302      	movs	r3, #2
  }
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b0ba      	sub	sp, #232	@ 0xe8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005886:	2300      	movs	r3, #0
 8005888:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800588c:	2300      	movs	r3, #0
 800588e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800589e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10f      	bne.n	80058c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <HAL_UART_IRQHandler+0x66>
 80058b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fbf2 	bl	80060a8 <UART_Receive_IT>
      return;
 80058c4:	e25b      	b.n	8005d7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80de 	beq.w	8005a8c <HAL_UART_IRQHandler+0x22c>
 80058d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d106      	bne.n	80058ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80d1 	beq.w	8005a8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00b      	beq.n	800590e <HAL_UART_IRQHandler+0xae>
 80058f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005906:	f043 0201 	orr.w	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800590e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00b      	beq.n	8005932 <HAL_UART_IRQHandler+0xd2>
 800591a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d005      	beq.n	8005932 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592a:	f043 0202 	orr.w	r2, r3, #2
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <HAL_UART_IRQHandler+0xf6>
 800593e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594e:	f043 0204 	orr.w	r2, r3, #4
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d011      	beq.n	8005986 <HAL_UART_IRQHandler+0x126>
 8005962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d105      	bne.n	800597a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800596e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597e:	f043 0208 	orr.w	r2, r3, #8
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 81f2 	beq.w	8005d74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <HAL_UART_IRQHandler+0x14e>
 800599c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fb7d 	bl	80060a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b8:	2b40      	cmp	r3, #64	@ 0x40
 80059ba:	bf0c      	ite	eq
 80059bc:	2301      	moveq	r3, #1
 80059be:	2300      	movne	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d103      	bne.n	80059da <HAL_UART_IRQHandler+0x17a>
 80059d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d04f      	beq.n	8005a7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fa85 	bl	8005eea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ea:	2b40      	cmp	r3, #64	@ 0x40
 80059ec:	d141      	bne.n	8005a72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3314      	adds	r3, #20
 80059f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3314      	adds	r3, #20
 8005a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1d9      	bne.n	80059ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d013      	beq.n	8005a6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a46:	4a7e      	ldr	r2, [pc, #504]	@ (8005c40 <HAL_UART_IRQHandler+0x3e0>)
 8005a48:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fd fc0d 	bl	800326e <HAL_DMA_Abort_IT>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d016      	beq.n	8005a88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a64:	4610      	mov	r0, r2
 8005a66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a68:	e00e      	b.n	8005a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f994 	bl	8005d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a70:	e00a      	b.n	8005a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f990 	bl	8005d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a78:	e006      	b.n	8005a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f98c 	bl	8005d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005a86:	e175      	b.n	8005d74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a88:	bf00      	nop
    return;
 8005a8a:	e173      	b.n	8005d74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	f040 814f 	bne.w	8005d34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 8148 	beq.w	8005d34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aa8:	f003 0310 	and.w	r3, r3, #16
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8141 	beq.w	8005d34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60bb      	str	r3, [r7, #8]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	60bb      	str	r3, [r7, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad2:	2b40      	cmp	r3, #64	@ 0x40
 8005ad4:	f040 80b6 	bne.w	8005c44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ae4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 8145 	beq.w	8005d78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005af6:	429a      	cmp	r2, r3
 8005af8:	f080 813e 	bcs.w	8005d78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b0e:	f000 8088 	beq.w	8005c22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	330c      	adds	r3, #12
 8005b18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	330c      	adds	r3, #12
 8005b3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005b3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1d9      	bne.n	8005b12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3314      	adds	r3, #20
 8005b64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b70:	f023 0301 	bic.w	r3, r3, #1
 8005b74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3314      	adds	r3, #20
 8005b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e1      	bne.n	8005b5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3314      	adds	r3, #20
 8005ba0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005baa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3314      	adds	r3, #20
 8005bba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e3      	bne.n	8005b9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	330c      	adds	r3, #12
 8005be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005bf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bf2:	f023 0310 	bic.w	r3, r3, #16
 8005bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	330c      	adds	r3, #12
 8005c00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005c04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e3      	bne.n	8005be0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fd fab6 	bl	800318e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2202      	movs	r2, #2
 8005c26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f8b7 	bl	8005dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c3e:	e09b      	b.n	8005d78 <HAL_UART_IRQHandler+0x518>
 8005c40:	08005fb1 	.word	0x08005fb1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 808e 	beq.w	8005d7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005c60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8089 	beq.w	8005d7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	330c      	adds	r3, #12
 8005c70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005c8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e3      	bne.n	8005c6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3314      	adds	r3, #20
 8005ca8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	623b      	str	r3, [r7, #32]
   return(result);
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005cc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e3      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0310 	bic.w	r3, r3, #16
 8005cfe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	330c      	adds	r3, #12
 8005d08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005d0c:	61fa      	str	r2, [r7, #28]
 8005d0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	69b9      	ldr	r1, [r7, #24]
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	617b      	str	r3, [r7, #20]
   return(result);
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e3      	bne.n	8005ce8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f83d 	bl	8005dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d32:	e023      	b.n	8005d7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d009      	beq.n	8005d54 <HAL_UART_IRQHandler+0x4f4>
 8005d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f943 	bl	8005fd8 <UART_Transmit_IT>
    return;
 8005d52:	e014      	b.n	8005d7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00e      	beq.n	8005d7e <HAL_UART_IRQHandler+0x51e>
 8005d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f983 	bl	8006078 <UART_EndTransmit_IT>
    return;
 8005d72:	e004      	b.n	8005d7e <HAL_UART_IRQHandler+0x51e>
    return;
 8005d74:	bf00      	nop
 8005d76:	e002      	b.n	8005d7e <HAL_UART_IRQHandler+0x51e>
      return;
 8005d78:	bf00      	nop
 8005d7a:	e000      	b.n	8005d7e <HAL_UART_IRQHandler+0x51e>
      return;
 8005d7c:	bf00      	nop
  }
}
 8005d7e:	37e8      	adds	r7, #232	@ 0xe8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	603b      	str	r3, [r7, #0]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd4:	e03b      	b.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d037      	beq.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dde:	f7fc fcb3 	bl	8002748 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	6a3a      	ldr	r2, [r7, #32]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d302      	bcc.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e03a      	b.n	8005e6e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d023      	beq.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b80      	cmp	r3, #128	@ 0x80
 8005e0a:	d020      	beq.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b40      	cmp	r3, #64	@ 0x40
 8005e10:	d01d      	beq.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d116      	bne.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f857 	bl	8005eea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2208      	movs	r2, #8
 8005e40:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e00f      	b.n	8005e6e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4013      	ands	r3, r2
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	bf0c      	ite	eq
 8005e5e:	2301      	moveq	r3, #1
 8005e60:	2300      	movne	r3, #0
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d0b4      	beq.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	4613      	mov	r3, r2
 8005e82:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	88fa      	ldrh	r2, [r7, #6]
 8005e8e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	88fa      	ldrh	r2, [r7, #6]
 8005e94:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2222      	movs	r2, #34	@ 0x22
 8005ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005eba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	695a      	ldr	r2, [r3, #20]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0220 	orr.w	r2, r2, #32
 8005eda:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b095      	sub	sp, #84	@ 0x54
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	330c      	adds	r3, #12
 8005ef8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	330c      	adds	r3, #12
 8005f10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f12:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1e5      	bne.n	8005ef2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3314      	adds	r3, #20
 8005f2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f023 0301 	bic.w	r3, r3, #1
 8005f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3314      	adds	r3, #20
 8005f44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e5      	bne.n	8005f26 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d119      	bne.n	8005f96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	330c      	adds	r3, #12
 8005f68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f023 0310 	bic.w	r3, r3, #16
 8005f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	330c      	adds	r3, #12
 8005f80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f82:	61ba      	str	r2, [r7, #24]
 8005f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	6979      	ldr	r1, [r7, #20]
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e5      	bne.n	8005f62 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005fa4:	bf00      	nop
 8005fa6:	3754      	adds	r7, #84	@ 0x54
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f7ff fee4 	bl	8005d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fd0:	bf00      	nop
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b21      	cmp	r3, #33	@ 0x21
 8005fea:	d13e      	bne.n	800606a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff4:	d114      	bne.n	8006020 <UART_Transmit_IT+0x48>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d110      	bne.n	8006020 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	461a      	mov	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006012:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	1c9a      	adds	r2, r3, #2
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	621a      	str	r2, [r3, #32]
 800601e:	e008      	b.n	8006032 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	1c59      	adds	r1, r3, #1
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6211      	str	r1, [r2, #32]
 800602a:	781a      	ldrb	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29b      	uxth	r3, r3
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	4619      	mov	r1, r3
 8006040:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10f      	bne.n	8006066 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006054:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006064:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	e000      	b.n	800606c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800606a:	2302      	movs	r3, #2
  }
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800608e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2220      	movs	r2, #32
 8006094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff fe73 	bl	8005d84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08c      	sub	sp, #48	@ 0x30
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b22      	cmp	r3, #34	@ 0x22
 80060ba:	f040 80ae 	bne.w	800621a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060c6:	d117      	bne.n	80060f8 <UART_Receive_IT+0x50>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d113      	bne.n	80060f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f0:	1c9a      	adds	r2, r3, #2
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80060f6:	e026      	b.n	8006146 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800610a:	d007      	beq.n	800611c <UART_Receive_IT+0x74>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <UART_Receive_IT+0x82>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d106      	bne.n	800612a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	b2da      	uxtb	r2, r3
 8006124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	e008      	b.n	800613c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	b2db      	uxtb	r3, r3
 8006132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006136:	b2da      	uxtb	r2, r3
 8006138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800614a:	b29b      	uxth	r3, r3
 800614c:	3b01      	subs	r3, #1
 800614e:	b29b      	uxth	r3, r3
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	4619      	mov	r1, r3
 8006154:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006156:	2b00      	cmp	r3, #0
 8006158:	d15d      	bne.n	8006216 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0220 	bic.w	r2, r2, #32
 8006168:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006178:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695a      	ldr	r2, [r3, #20]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0201 	bic.w	r2, r2, #1
 8006188:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619c:	2b01      	cmp	r3, #1
 800619e:	d135      	bne.n	800620c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	330c      	adds	r3, #12
 80061ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	613b      	str	r3, [r7, #16]
   return(result);
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f023 0310 	bic.w	r3, r3, #16
 80061bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	330c      	adds	r3, #12
 80061c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c6:	623a      	str	r2, [r7, #32]
 80061c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	69f9      	ldr	r1, [r7, #28]
 80061cc:	6a3a      	ldr	r2, [r7, #32]
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e5      	bne.n	80061a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0310 	and.w	r3, r3, #16
 80061e4:	2b10      	cmp	r3, #16
 80061e6:	d10a      	bne.n	80061fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff fdd1 	bl	8005dac <HAL_UARTEx_RxEventCallback>
 800620a:	e002      	b.n	8006212 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7fb fe07 	bl	8001e20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e002      	b.n	800621c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	e000      	b.n	800621c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800621a:	2302      	movs	r3, #2
  }
}
 800621c:	4618      	mov	r0, r3
 800621e:	3730      	adds	r7, #48	@ 0x30
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006228:	b0c0      	sub	sp, #256	@ 0x100
 800622a:	af00      	add	r7, sp, #0
 800622c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006240:	68d9      	ldr	r1, [r3, #12]
 8006242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	ea40 0301 	orr.w	r3, r0, r1
 800624c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800624e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	431a      	orrs	r2, r3
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	431a      	orrs	r2, r3
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	4313      	orrs	r3, r2
 800626c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800627c:	f021 010c 	bic.w	r1, r1, #12
 8006280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800628a:	430b      	orrs	r3, r1
 800628c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800628e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800629a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629e:	6999      	ldr	r1, [r3, #24]
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	ea40 0301 	orr.w	r3, r0, r1
 80062aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b8f      	ldr	r3, [pc, #572]	@ (80064f0 <UART_SetConfig+0x2cc>)
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d005      	beq.n	80062c4 <UART_SetConfig+0xa0>
 80062b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	4b8d      	ldr	r3, [pc, #564]	@ (80064f4 <UART_SetConfig+0x2d0>)
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d104      	bne.n	80062ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062c4:	f7fd fe48 	bl	8003f58 <HAL_RCC_GetPCLK2Freq>
 80062c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80062cc:	e003      	b.n	80062d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062ce:	f7fd fe2f 	bl	8003f30 <HAL_RCC_GetPCLK1Freq>
 80062d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e0:	f040 810c 	bne.w	80064fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e8:	2200      	movs	r2, #0
 80062ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80062f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80062f6:	4622      	mov	r2, r4
 80062f8:	462b      	mov	r3, r5
 80062fa:	1891      	adds	r1, r2, r2
 80062fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80062fe:	415b      	adcs	r3, r3
 8006300:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006302:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006306:	4621      	mov	r1, r4
 8006308:	eb12 0801 	adds.w	r8, r2, r1
 800630c:	4629      	mov	r1, r5
 800630e:	eb43 0901 	adc.w	r9, r3, r1
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800631e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006326:	4690      	mov	r8, r2
 8006328:	4699      	mov	r9, r3
 800632a:	4623      	mov	r3, r4
 800632c:	eb18 0303 	adds.w	r3, r8, r3
 8006330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006334:	462b      	mov	r3, r5
 8006336:	eb49 0303 	adc.w	r3, r9, r3
 800633a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800633e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800634a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800634e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006352:	460b      	mov	r3, r1
 8006354:	18db      	adds	r3, r3, r3
 8006356:	653b      	str	r3, [r7, #80]	@ 0x50
 8006358:	4613      	mov	r3, r2
 800635a:	eb42 0303 	adc.w	r3, r2, r3
 800635e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006360:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006364:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006368:	f7f9 ff92 	bl	8000290 <__aeabi_uldivmod>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4b61      	ldr	r3, [pc, #388]	@ (80064f8 <UART_SetConfig+0x2d4>)
 8006372:	fba3 2302 	umull	r2, r3, r3, r2
 8006376:	095b      	lsrs	r3, r3, #5
 8006378:	011c      	lsls	r4, r3, #4
 800637a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800637e:	2200      	movs	r2, #0
 8006380:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006384:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006388:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800638c:	4642      	mov	r2, r8
 800638e:	464b      	mov	r3, r9
 8006390:	1891      	adds	r1, r2, r2
 8006392:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006394:	415b      	adcs	r3, r3
 8006396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006398:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800639c:	4641      	mov	r1, r8
 800639e:	eb12 0a01 	adds.w	sl, r2, r1
 80063a2:	4649      	mov	r1, r9
 80063a4:	eb43 0b01 	adc.w	fp, r3, r1
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063bc:	4692      	mov	sl, r2
 80063be:	469b      	mov	fp, r3
 80063c0:	4643      	mov	r3, r8
 80063c2:	eb1a 0303 	adds.w	r3, sl, r3
 80063c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063ca:	464b      	mov	r3, r9
 80063cc:	eb4b 0303 	adc.w	r3, fp, r3
 80063d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80063e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063e8:	460b      	mov	r3, r1
 80063ea:	18db      	adds	r3, r3, r3
 80063ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80063ee:	4613      	mov	r3, r2
 80063f0:	eb42 0303 	adc.w	r3, r2, r3
 80063f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80063f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80063fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80063fe:	f7f9 ff47 	bl	8000290 <__aeabi_uldivmod>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4611      	mov	r1, r2
 8006408:	4b3b      	ldr	r3, [pc, #236]	@ (80064f8 <UART_SetConfig+0x2d4>)
 800640a:	fba3 2301 	umull	r2, r3, r3, r1
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	2264      	movs	r2, #100	@ 0x64
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	1acb      	subs	r3, r1, r3
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800641e:	4b36      	ldr	r3, [pc, #216]	@ (80064f8 <UART_SetConfig+0x2d4>)
 8006420:	fba3 2302 	umull	r2, r3, r3, r2
 8006424:	095b      	lsrs	r3, r3, #5
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800642c:	441c      	add	r4, r3
 800642e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006432:	2200      	movs	r2, #0
 8006434:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006438:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800643c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006440:	4642      	mov	r2, r8
 8006442:	464b      	mov	r3, r9
 8006444:	1891      	adds	r1, r2, r2
 8006446:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006448:	415b      	adcs	r3, r3
 800644a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800644c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006450:	4641      	mov	r1, r8
 8006452:	1851      	adds	r1, r2, r1
 8006454:	6339      	str	r1, [r7, #48]	@ 0x30
 8006456:	4649      	mov	r1, r9
 8006458:	414b      	adcs	r3, r1
 800645a:	637b      	str	r3, [r7, #52]	@ 0x34
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006468:	4659      	mov	r1, fp
 800646a:	00cb      	lsls	r3, r1, #3
 800646c:	4651      	mov	r1, sl
 800646e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006472:	4651      	mov	r1, sl
 8006474:	00ca      	lsls	r2, r1, #3
 8006476:	4610      	mov	r0, r2
 8006478:	4619      	mov	r1, r3
 800647a:	4603      	mov	r3, r0
 800647c:	4642      	mov	r2, r8
 800647e:	189b      	adds	r3, r3, r2
 8006480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006484:	464b      	mov	r3, r9
 8006486:	460a      	mov	r2, r1
 8006488:	eb42 0303 	adc.w	r3, r2, r3
 800648c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800649c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80064a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064a4:	460b      	mov	r3, r1
 80064a6:	18db      	adds	r3, r3, r3
 80064a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064aa:	4613      	mov	r3, r2
 80064ac:	eb42 0303 	adc.w	r3, r2, r3
 80064b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80064ba:	f7f9 fee9 	bl	8000290 <__aeabi_uldivmod>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4b0d      	ldr	r3, [pc, #52]	@ (80064f8 <UART_SetConfig+0x2d4>)
 80064c4:	fba3 1302 	umull	r1, r3, r3, r2
 80064c8:	095b      	lsrs	r3, r3, #5
 80064ca:	2164      	movs	r1, #100	@ 0x64
 80064cc:	fb01 f303 	mul.w	r3, r1, r3
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	3332      	adds	r3, #50	@ 0x32
 80064d6:	4a08      	ldr	r2, [pc, #32]	@ (80064f8 <UART_SetConfig+0x2d4>)
 80064d8:	fba2 2303 	umull	r2, r3, r2, r3
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	f003 0207 	and.w	r2, r3, #7
 80064e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4422      	add	r2, r4
 80064ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064ec:	e106      	b.n	80066fc <UART_SetConfig+0x4d8>
 80064ee:	bf00      	nop
 80064f0:	40011000 	.word	0x40011000
 80064f4:	40011400 	.word	0x40011400
 80064f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006500:	2200      	movs	r2, #0
 8006502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006506:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800650a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800650e:	4642      	mov	r2, r8
 8006510:	464b      	mov	r3, r9
 8006512:	1891      	adds	r1, r2, r2
 8006514:	6239      	str	r1, [r7, #32]
 8006516:	415b      	adcs	r3, r3
 8006518:	627b      	str	r3, [r7, #36]	@ 0x24
 800651a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800651e:	4641      	mov	r1, r8
 8006520:	1854      	adds	r4, r2, r1
 8006522:	4649      	mov	r1, r9
 8006524:	eb43 0501 	adc.w	r5, r3, r1
 8006528:	f04f 0200 	mov.w	r2, #0
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	00eb      	lsls	r3, r5, #3
 8006532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006536:	00e2      	lsls	r2, r4, #3
 8006538:	4614      	mov	r4, r2
 800653a:	461d      	mov	r5, r3
 800653c:	4643      	mov	r3, r8
 800653e:	18e3      	adds	r3, r4, r3
 8006540:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006544:	464b      	mov	r3, r9
 8006546:	eb45 0303 	adc.w	r3, r5, r3
 800654a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800654e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800655a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800656a:	4629      	mov	r1, r5
 800656c:	008b      	lsls	r3, r1, #2
 800656e:	4621      	mov	r1, r4
 8006570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006574:	4621      	mov	r1, r4
 8006576:	008a      	lsls	r2, r1, #2
 8006578:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800657c:	f7f9 fe88 	bl	8000290 <__aeabi_uldivmod>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4b60      	ldr	r3, [pc, #384]	@ (8006708 <UART_SetConfig+0x4e4>)
 8006586:	fba3 2302 	umull	r2, r3, r3, r2
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	011c      	lsls	r4, r3, #4
 800658e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006592:	2200      	movs	r2, #0
 8006594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006598:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800659c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80065a0:	4642      	mov	r2, r8
 80065a2:	464b      	mov	r3, r9
 80065a4:	1891      	adds	r1, r2, r2
 80065a6:	61b9      	str	r1, [r7, #24]
 80065a8:	415b      	adcs	r3, r3
 80065aa:	61fb      	str	r3, [r7, #28]
 80065ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065b0:	4641      	mov	r1, r8
 80065b2:	1851      	adds	r1, r2, r1
 80065b4:	6139      	str	r1, [r7, #16]
 80065b6:	4649      	mov	r1, r9
 80065b8:	414b      	adcs	r3, r1
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	f04f 0300 	mov.w	r3, #0
 80065c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065c8:	4659      	mov	r1, fp
 80065ca:	00cb      	lsls	r3, r1, #3
 80065cc:	4651      	mov	r1, sl
 80065ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065d2:	4651      	mov	r1, sl
 80065d4:	00ca      	lsls	r2, r1, #3
 80065d6:	4610      	mov	r0, r2
 80065d8:	4619      	mov	r1, r3
 80065da:	4603      	mov	r3, r0
 80065dc:	4642      	mov	r2, r8
 80065de:	189b      	adds	r3, r3, r2
 80065e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065e4:	464b      	mov	r3, r9
 80065e6:	460a      	mov	r2, r1
 80065e8:	eb42 0303 	adc.w	r3, r2, r3
 80065ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80065fc:	f04f 0200 	mov.w	r2, #0
 8006600:	f04f 0300 	mov.w	r3, #0
 8006604:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006608:	4649      	mov	r1, r9
 800660a:	008b      	lsls	r3, r1, #2
 800660c:	4641      	mov	r1, r8
 800660e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006612:	4641      	mov	r1, r8
 8006614:	008a      	lsls	r2, r1, #2
 8006616:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800661a:	f7f9 fe39 	bl	8000290 <__aeabi_uldivmod>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4611      	mov	r1, r2
 8006624:	4b38      	ldr	r3, [pc, #224]	@ (8006708 <UART_SetConfig+0x4e4>)
 8006626:	fba3 2301 	umull	r2, r3, r3, r1
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	2264      	movs	r2, #100	@ 0x64
 800662e:	fb02 f303 	mul.w	r3, r2, r3
 8006632:	1acb      	subs	r3, r1, r3
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	3332      	adds	r3, #50	@ 0x32
 8006638:	4a33      	ldr	r2, [pc, #204]	@ (8006708 <UART_SetConfig+0x4e4>)
 800663a:	fba2 2303 	umull	r2, r3, r2, r3
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006644:	441c      	add	r4, r3
 8006646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800664a:	2200      	movs	r2, #0
 800664c:	673b      	str	r3, [r7, #112]	@ 0x70
 800664e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006650:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006654:	4642      	mov	r2, r8
 8006656:	464b      	mov	r3, r9
 8006658:	1891      	adds	r1, r2, r2
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	415b      	adcs	r3, r3
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006664:	4641      	mov	r1, r8
 8006666:	1851      	adds	r1, r2, r1
 8006668:	6039      	str	r1, [r7, #0]
 800666a:	4649      	mov	r1, r9
 800666c:	414b      	adcs	r3, r1
 800666e:	607b      	str	r3, [r7, #4]
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800667c:	4659      	mov	r1, fp
 800667e:	00cb      	lsls	r3, r1, #3
 8006680:	4651      	mov	r1, sl
 8006682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006686:	4651      	mov	r1, sl
 8006688:	00ca      	lsls	r2, r1, #3
 800668a:	4610      	mov	r0, r2
 800668c:	4619      	mov	r1, r3
 800668e:	4603      	mov	r3, r0
 8006690:	4642      	mov	r2, r8
 8006692:	189b      	adds	r3, r3, r2
 8006694:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006696:	464b      	mov	r3, r9
 8006698:	460a      	mov	r2, r1
 800669a:	eb42 0303 	adc.w	r3, r2, r3
 800669e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80066aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80066b8:	4649      	mov	r1, r9
 80066ba:	008b      	lsls	r3, r1, #2
 80066bc:	4641      	mov	r1, r8
 80066be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066c2:	4641      	mov	r1, r8
 80066c4:	008a      	lsls	r2, r1, #2
 80066c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80066ca:	f7f9 fde1 	bl	8000290 <__aeabi_uldivmod>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006708 <UART_SetConfig+0x4e4>)
 80066d4:	fba3 1302 	umull	r1, r3, r3, r2
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	2164      	movs	r1, #100	@ 0x64
 80066dc:	fb01 f303 	mul.w	r3, r1, r3
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	3332      	adds	r3, #50	@ 0x32
 80066e6:	4a08      	ldr	r2, [pc, #32]	@ (8006708 <UART_SetConfig+0x4e4>)
 80066e8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	f003 020f 	and.w	r2, r3, #15
 80066f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4422      	add	r2, r4
 80066fa:	609a      	str	r2, [r3, #8]
}
 80066fc:	bf00      	nop
 80066fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006702:	46bd      	mov	sp, r7
 8006704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006708:	51eb851f 	.word	0x51eb851f

0800670c <rand>:
 800670c:	4b16      	ldr	r3, [pc, #88]	@ (8006768 <rand+0x5c>)
 800670e:	b510      	push	{r4, lr}
 8006710:	681c      	ldr	r4, [r3, #0]
 8006712:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006714:	b9b3      	cbnz	r3, 8006744 <rand+0x38>
 8006716:	2018      	movs	r0, #24
 8006718:	f000 fa40 	bl	8006b9c <malloc>
 800671c:	4602      	mov	r2, r0
 800671e:	6320      	str	r0, [r4, #48]	@ 0x30
 8006720:	b920      	cbnz	r0, 800672c <rand+0x20>
 8006722:	4b12      	ldr	r3, [pc, #72]	@ (800676c <rand+0x60>)
 8006724:	4812      	ldr	r0, [pc, #72]	@ (8006770 <rand+0x64>)
 8006726:	2152      	movs	r1, #82	@ 0x52
 8006728:	f000 f9d0 	bl	8006acc <__assert_func>
 800672c:	4911      	ldr	r1, [pc, #68]	@ (8006774 <rand+0x68>)
 800672e:	4b12      	ldr	r3, [pc, #72]	@ (8006778 <rand+0x6c>)
 8006730:	e9c0 1300 	strd	r1, r3, [r0]
 8006734:	4b11      	ldr	r3, [pc, #68]	@ (800677c <rand+0x70>)
 8006736:	6083      	str	r3, [r0, #8]
 8006738:	230b      	movs	r3, #11
 800673a:	8183      	strh	r3, [r0, #12]
 800673c:	2100      	movs	r1, #0
 800673e:	2001      	movs	r0, #1
 8006740:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006744:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006746:	480e      	ldr	r0, [pc, #56]	@ (8006780 <rand+0x74>)
 8006748:	690b      	ldr	r3, [r1, #16]
 800674a:	694c      	ldr	r4, [r1, #20]
 800674c:	4a0d      	ldr	r2, [pc, #52]	@ (8006784 <rand+0x78>)
 800674e:	4358      	muls	r0, r3
 8006750:	fb02 0004 	mla	r0, r2, r4, r0
 8006754:	fba3 3202 	umull	r3, r2, r3, r2
 8006758:	3301      	adds	r3, #1
 800675a:	eb40 0002 	adc.w	r0, r0, r2
 800675e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006762:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006766:	bd10      	pop	{r4, pc}
 8006768:	20000020 	.word	0x20000020
 800676c:	08007e20 	.word	0x08007e20
 8006770:	08007e37 	.word	0x08007e37
 8006774:	abcd330e 	.word	0xabcd330e
 8006778:	e66d1234 	.word	0xe66d1234
 800677c:	0005deec 	.word	0x0005deec
 8006780:	5851f42d 	.word	0x5851f42d
 8006784:	4c957f2d 	.word	0x4c957f2d

08006788 <std>:
 8006788:	2300      	movs	r3, #0
 800678a:	b510      	push	{r4, lr}
 800678c:	4604      	mov	r4, r0
 800678e:	e9c0 3300 	strd	r3, r3, [r0]
 8006792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006796:	6083      	str	r3, [r0, #8]
 8006798:	8181      	strh	r1, [r0, #12]
 800679a:	6643      	str	r3, [r0, #100]	@ 0x64
 800679c:	81c2      	strh	r2, [r0, #14]
 800679e:	6183      	str	r3, [r0, #24]
 80067a0:	4619      	mov	r1, r3
 80067a2:	2208      	movs	r2, #8
 80067a4:	305c      	adds	r0, #92	@ 0x5c
 80067a6:	f000 f914 	bl	80069d2 <memset>
 80067aa:	4b0d      	ldr	r3, [pc, #52]	@ (80067e0 <std+0x58>)
 80067ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80067ae:	4b0d      	ldr	r3, [pc, #52]	@ (80067e4 <std+0x5c>)
 80067b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067b2:	4b0d      	ldr	r3, [pc, #52]	@ (80067e8 <std+0x60>)
 80067b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067b6:	4b0d      	ldr	r3, [pc, #52]	@ (80067ec <std+0x64>)
 80067b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80067ba:	4b0d      	ldr	r3, [pc, #52]	@ (80067f0 <std+0x68>)
 80067bc:	6224      	str	r4, [r4, #32]
 80067be:	429c      	cmp	r4, r3
 80067c0:	d006      	beq.n	80067d0 <std+0x48>
 80067c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067c6:	4294      	cmp	r4, r2
 80067c8:	d002      	beq.n	80067d0 <std+0x48>
 80067ca:	33d0      	adds	r3, #208	@ 0xd0
 80067cc:	429c      	cmp	r4, r3
 80067ce:	d105      	bne.n	80067dc <std+0x54>
 80067d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d8:	f000 b974 	b.w	8006ac4 <__retarget_lock_init_recursive>
 80067dc:	bd10      	pop	{r4, pc}
 80067de:	bf00      	nop
 80067e0:	0800694d 	.word	0x0800694d
 80067e4:	0800696f 	.word	0x0800696f
 80067e8:	080069a7 	.word	0x080069a7
 80067ec:	080069cb 	.word	0x080069cb
 80067f0:	200002f0 	.word	0x200002f0

080067f4 <stdio_exit_handler>:
 80067f4:	4a02      	ldr	r2, [pc, #8]	@ (8006800 <stdio_exit_handler+0xc>)
 80067f6:	4903      	ldr	r1, [pc, #12]	@ (8006804 <stdio_exit_handler+0x10>)
 80067f8:	4803      	ldr	r0, [pc, #12]	@ (8006808 <stdio_exit_handler+0x14>)
 80067fa:	f000 b869 	b.w	80068d0 <_fwalk_sglue>
 80067fe:	bf00      	nop
 8006800:	20000014 	.word	0x20000014
 8006804:	080073dd 	.word	0x080073dd
 8006808:	20000024 	.word	0x20000024

0800680c <cleanup_stdio>:
 800680c:	6841      	ldr	r1, [r0, #4]
 800680e:	4b0c      	ldr	r3, [pc, #48]	@ (8006840 <cleanup_stdio+0x34>)
 8006810:	4299      	cmp	r1, r3
 8006812:	b510      	push	{r4, lr}
 8006814:	4604      	mov	r4, r0
 8006816:	d001      	beq.n	800681c <cleanup_stdio+0x10>
 8006818:	f000 fde0 	bl	80073dc <_fflush_r>
 800681c:	68a1      	ldr	r1, [r4, #8]
 800681e:	4b09      	ldr	r3, [pc, #36]	@ (8006844 <cleanup_stdio+0x38>)
 8006820:	4299      	cmp	r1, r3
 8006822:	d002      	beq.n	800682a <cleanup_stdio+0x1e>
 8006824:	4620      	mov	r0, r4
 8006826:	f000 fdd9 	bl	80073dc <_fflush_r>
 800682a:	68e1      	ldr	r1, [r4, #12]
 800682c:	4b06      	ldr	r3, [pc, #24]	@ (8006848 <cleanup_stdio+0x3c>)
 800682e:	4299      	cmp	r1, r3
 8006830:	d004      	beq.n	800683c <cleanup_stdio+0x30>
 8006832:	4620      	mov	r0, r4
 8006834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006838:	f000 bdd0 	b.w	80073dc <_fflush_r>
 800683c:	bd10      	pop	{r4, pc}
 800683e:	bf00      	nop
 8006840:	200002f0 	.word	0x200002f0
 8006844:	20000358 	.word	0x20000358
 8006848:	200003c0 	.word	0x200003c0

0800684c <global_stdio_init.part.0>:
 800684c:	b510      	push	{r4, lr}
 800684e:	4b0b      	ldr	r3, [pc, #44]	@ (800687c <global_stdio_init.part.0+0x30>)
 8006850:	4c0b      	ldr	r4, [pc, #44]	@ (8006880 <global_stdio_init.part.0+0x34>)
 8006852:	4a0c      	ldr	r2, [pc, #48]	@ (8006884 <global_stdio_init.part.0+0x38>)
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	4620      	mov	r0, r4
 8006858:	2200      	movs	r2, #0
 800685a:	2104      	movs	r1, #4
 800685c:	f7ff ff94 	bl	8006788 <std>
 8006860:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006864:	2201      	movs	r2, #1
 8006866:	2109      	movs	r1, #9
 8006868:	f7ff ff8e 	bl	8006788 <std>
 800686c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006870:	2202      	movs	r2, #2
 8006872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006876:	2112      	movs	r1, #18
 8006878:	f7ff bf86 	b.w	8006788 <std>
 800687c:	20000428 	.word	0x20000428
 8006880:	200002f0 	.word	0x200002f0
 8006884:	080067f5 	.word	0x080067f5

08006888 <__sfp_lock_acquire>:
 8006888:	4801      	ldr	r0, [pc, #4]	@ (8006890 <__sfp_lock_acquire+0x8>)
 800688a:	f000 b91c 	b.w	8006ac6 <__retarget_lock_acquire_recursive>
 800688e:	bf00      	nop
 8006890:	20000431 	.word	0x20000431

08006894 <__sfp_lock_release>:
 8006894:	4801      	ldr	r0, [pc, #4]	@ (800689c <__sfp_lock_release+0x8>)
 8006896:	f000 b917 	b.w	8006ac8 <__retarget_lock_release_recursive>
 800689a:	bf00      	nop
 800689c:	20000431 	.word	0x20000431

080068a0 <__sinit>:
 80068a0:	b510      	push	{r4, lr}
 80068a2:	4604      	mov	r4, r0
 80068a4:	f7ff fff0 	bl	8006888 <__sfp_lock_acquire>
 80068a8:	6a23      	ldr	r3, [r4, #32]
 80068aa:	b11b      	cbz	r3, 80068b4 <__sinit+0x14>
 80068ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068b0:	f7ff bff0 	b.w	8006894 <__sfp_lock_release>
 80068b4:	4b04      	ldr	r3, [pc, #16]	@ (80068c8 <__sinit+0x28>)
 80068b6:	6223      	str	r3, [r4, #32]
 80068b8:	4b04      	ldr	r3, [pc, #16]	@ (80068cc <__sinit+0x2c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1f5      	bne.n	80068ac <__sinit+0xc>
 80068c0:	f7ff ffc4 	bl	800684c <global_stdio_init.part.0>
 80068c4:	e7f2      	b.n	80068ac <__sinit+0xc>
 80068c6:	bf00      	nop
 80068c8:	0800680d 	.word	0x0800680d
 80068cc:	20000428 	.word	0x20000428

080068d0 <_fwalk_sglue>:
 80068d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d4:	4607      	mov	r7, r0
 80068d6:	4688      	mov	r8, r1
 80068d8:	4614      	mov	r4, r2
 80068da:	2600      	movs	r6, #0
 80068dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068e0:	f1b9 0901 	subs.w	r9, r9, #1
 80068e4:	d505      	bpl.n	80068f2 <_fwalk_sglue+0x22>
 80068e6:	6824      	ldr	r4, [r4, #0]
 80068e8:	2c00      	cmp	r4, #0
 80068ea:	d1f7      	bne.n	80068dc <_fwalk_sglue+0xc>
 80068ec:	4630      	mov	r0, r6
 80068ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068f2:	89ab      	ldrh	r3, [r5, #12]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d907      	bls.n	8006908 <_fwalk_sglue+0x38>
 80068f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068fc:	3301      	adds	r3, #1
 80068fe:	d003      	beq.n	8006908 <_fwalk_sglue+0x38>
 8006900:	4629      	mov	r1, r5
 8006902:	4638      	mov	r0, r7
 8006904:	47c0      	blx	r8
 8006906:	4306      	orrs	r6, r0
 8006908:	3568      	adds	r5, #104	@ 0x68
 800690a:	e7e9      	b.n	80068e0 <_fwalk_sglue+0x10>

0800690c <siprintf>:
 800690c:	b40e      	push	{r1, r2, r3}
 800690e:	b500      	push	{lr}
 8006910:	b09c      	sub	sp, #112	@ 0x70
 8006912:	ab1d      	add	r3, sp, #116	@ 0x74
 8006914:	9002      	str	r0, [sp, #8]
 8006916:	9006      	str	r0, [sp, #24]
 8006918:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800691c:	4809      	ldr	r0, [pc, #36]	@ (8006944 <siprintf+0x38>)
 800691e:	9107      	str	r1, [sp, #28]
 8006920:	9104      	str	r1, [sp, #16]
 8006922:	4909      	ldr	r1, [pc, #36]	@ (8006948 <siprintf+0x3c>)
 8006924:	f853 2b04 	ldr.w	r2, [r3], #4
 8006928:	9105      	str	r1, [sp, #20]
 800692a:	6800      	ldr	r0, [r0, #0]
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	a902      	add	r1, sp, #8
 8006930:	f000 fa46 	bl	8006dc0 <_svfiprintf_r>
 8006934:	9b02      	ldr	r3, [sp, #8]
 8006936:	2200      	movs	r2, #0
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	b01c      	add	sp, #112	@ 0x70
 800693c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006940:	b003      	add	sp, #12
 8006942:	4770      	bx	lr
 8006944:	20000020 	.word	0x20000020
 8006948:	ffff0208 	.word	0xffff0208

0800694c <__sread>:
 800694c:	b510      	push	{r4, lr}
 800694e:	460c      	mov	r4, r1
 8006950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006954:	f000 f868 	bl	8006a28 <_read_r>
 8006958:	2800      	cmp	r0, #0
 800695a:	bfab      	itete	ge
 800695c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800695e:	89a3      	ldrhlt	r3, [r4, #12]
 8006960:	181b      	addge	r3, r3, r0
 8006962:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006966:	bfac      	ite	ge
 8006968:	6563      	strge	r3, [r4, #84]	@ 0x54
 800696a:	81a3      	strhlt	r3, [r4, #12]
 800696c:	bd10      	pop	{r4, pc}

0800696e <__swrite>:
 800696e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006972:	461f      	mov	r7, r3
 8006974:	898b      	ldrh	r3, [r1, #12]
 8006976:	05db      	lsls	r3, r3, #23
 8006978:	4605      	mov	r5, r0
 800697a:	460c      	mov	r4, r1
 800697c:	4616      	mov	r6, r2
 800697e:	d505      	bpl.n	800698c <__swrite+0x1e>
 8006980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006984:	2302      	movs	r3, #2
 8006986:	2200      	movs	r2, #0
 8006988:	f000 f83c 	bl	8006a04 <_lseek_r>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006996:	81a3      	strh	r3, [r4, #12]
 8006998:	4632      	mov	r2, r6
 800699a:	463b      	mov	r3, r7
 800699c:	4628      	mov	r0, r5
 800699e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069a2:	f000 b853 	b.w	8006a4c <_write_r>

080069a6 <__sseek>:
 80069a6:	b510      	push	{r4, lr}
 80069a8:	460c      	mov	r4, r1
 80069aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ae:	f000 f829 	bl	8006a04 <_lseek_r>
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	89a3      	ldrh	r3, [r4, #12]
 80069b6:	bf15      	itete	ne
 80069b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069c2:	81a3      	strheq	r3, [r4, #12]
 80069c4:	bf18      	it	ne
 80069c6:	81a3      	strhne	r3, [r4, #12]
 80069c8:	bd10      	pop	{r4, pc}

080069ca <__sclose>:
 80069ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ce:	f000 b809 	b.w	80069e4 <_close_r>

080069d2 <memset>:
 80069d2:	4402      	add	r2, r0
 80069d4:	4603      	mov	r3, r0
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d100      	bne.n	80069dc <memset+0xa>
 80069da:	4770      	bx	lr
 80069dc:	f803 1b01 	strb.w	r1, [r3], #1
 80069e0:	e7f9      	b.n	80069d6 <memset+0x4>
	...

080069e4 <_close_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4d06      	ldr	r5, [pc, #24]	@ (8006a00 <_close_r+0x1c>)
 80069e8:	2300      	movs	r3, #0
 80069ea:	4604      	mov	r4, r0
 80069ec:	4608      	mov	r0, r1
 80069ee:	602b      	str	r3, [r5, #0]
 80069f0:	f7fb fd9e 	bl	8002530 <_close>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d102      	bne.n	80069fe <_close_r+0x1a>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	b103      	cbz	r3, 80069fe <_close_r+0x1a>
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
 8006a00:	2000042c 	.word	0x2000042c

08006a04 <_lseek_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	4d07      	ldr	r5, [pc, #28]	@ (8006a24 <_lseek_r+0x20>)
 8006a08:	4604      	mov	r4, r0
 8006a0a:	4608      	mov	r0, r1
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	2200      	movs	r2, #0
 8006a10:	602a      	str	r2, [r5, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	f7fb fdb3 	bl	800257e <_lseek>
 8006a18:	1c43      	adds	r3, r0, #1
 8006a1a:	d102      	bne.n	8006a22 <_lseek_r+0x1e>
 8006a1c:	682b      	ldr	r3, [r5, #0]
 8006a1e:	b103      	cbz	r3, 8006a22 <_lseek_r+0x1e>
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
 8006a24:	2000042c 	.word	0x2000042c

08006a28 <_read_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d07      	ldr	r5, [pc, #28]	@ (8006a48 <_read_r+0x20>)
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	4608      	mov	r0, r1
 8006a30:	4611      	mov	r1, r2
 8006a32:	2200      	movs	r2, #0
 8006a34:	602a      	str	r2, [r5, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	f7fb fd41 	bl	80024be <_read>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d102      	bne.n	8006a46 <_read_r+0x1e>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	b103      	cbz	r3, 8006a46 <_read_r+0x1e>
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	2000042c 	.word	0x2000042c

08006a4c <_write_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4d07      	ldr	r5, [pc, #28]	@ (8006a6c <_write_r+0x20>)
 8006a50:	4604      	mov	r4, r0
 8006a52:	4608      	mov	r0, r1
 8006a54:	4611      	mov	r1, r2
 8006a56:	2200      	movs	r2, #0
 8006a58:	602a      	str	r2, [r5, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f7fb fd4c 	bl	80024f8 <_write>
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	d102      	bne.n	8006a6a <_write_r+0x1e>
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	b103      	cbz	r3, 8006a6a <_write_r+0x1e>
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	2000042c 	.word	0x2000042c

08006a70 <__errno>:
 8006a70:	4b01      	ldr	r3, [pc, #4]	@ (8006a78 <__errno+0x8>)
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	20000020 	.word	0x20000020

08006a7c <__libc_init_array>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	4d0d      	ldr	r5, [pc, #52]	@ (8006ab4 <__libc_init_array+0x38>)
 8006a80:	4c0d      	ldr	r4, [pc, #52]	@ (8006ab8 <__libc_init_array+0x3c>)
 8006a82:	1b64      	subs	r4, r4, r5
 8006a84:	10a4      	asrs	r4, r4, #2
 8006a86:	2600      	movs	r6, #0
 8006a88:	42a6      	cmp	r6, r4
 8006a8a:	d109      	bne.n	8006aa0 <__libc_init_array+0x24>
 8006a8c:	4d0b      	ldr	r5, [pc, #44]	@ (8006abc <__libc_init_array+0x40>)
 8006a8e:	4c0c      	ldr	r4, [pc, #48]	@ (8006ac0 <__libc_init_array+0x44>)
 8006a90:	f000 fff0 	bl	8007a74 <_init>
 8006a94:	1b64      	subs	r4, r4, r5
 8006a96:	10a4      	asrs	r4, r4, #2
 8006a98:	2600      	movs	r6, #0
 8006a9a:	42a6      	cmp	r6, r4
 8006a9c:	d105      	bne.n	8006aaa <__libc_init_array+0x2e>
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa4:	4798      	blx	r3
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	e7ee      	b.n	8006a88 <__libc_init_array+0xc>
 8006aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aae:	4798      	blx	r3
 8006ab0:	3601      	adds	r6, #1
 8006ab2:	e7f2      	b.n	8006a9a <__libc_init_array+0x1e>
 8006ab4:	08007f08 	.word	0x08007f08
 8006ab8:	08007f08 	.word	0x08007f08
 8006abc:	08007f08 	.word	0x08007f08
 8006ac0:	08007f0c 	.word	0x08007f0c

08006ac4 <__retarget_lock_init_recursive>:
 8006ac4:	4770      	bx	lr

08006ac6 <__retarget_lock_acquire_recursive>:
 8006ac6:	4770      	bx	lr

08006ac8 <__retarget_lock_release_recursive>:
 8006ac8:	4770      	bx	lr
	...

08006acc <__assert_func>:
 8006acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ace:	4614      	mov	r4, r2
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4b09      	ldr	r3, [pc, #36]	@ (8006af8 <__assert_func+0x2c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	68d8      	ldr	r0, [r3, #12]
 8006ada:	b954      	cbnz	r4, 8006af2 <__assert_func+0x26>
 8006adc:	4b07      	ldr	r3, [pc, #28]	@ (8006afc <__assert_func+0x30>)
 8006ade:	461c      	mov	r4, r3
 8006ae0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ae4:	9100      	str	r1, [sp, #0]
 8006ae6:	462b      	mov	r3, r5
 8006ae8:	4905      	ldr	r1, [pc, #20]	@ (8006b00 <__assert_func+0x34>)
 8006aea:	f000 fc9f 	bl	800742c <fiprintf>
 8006aee:	f000 fce7 	bl	80074c0 <abort>
 8006af2:	4b04      	ldr	r3, [pc, #16]	@ (8006b04 <__assert_func+0x38>)
 8006af4:	e7f4      	b.n	8006ae0 <__assert_func+0x14>
 8006af6:	bf00      	nop
 8006af8:	20000020 	.word	0x20000020
 8006afc:	08007eca 	.word	0x08007eca
 8006b00:	08007e9c 	.word	0x08007e9c
 8006b04:	08007e8f 	.word	0x08007e8f

08006b08 <_free_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	d041      	beq.n	8006b94 <_free_r+0x8c>
 8006b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b14:	1f0c      	subs	r4, r1, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bfb8      	it	lt
 8006b1a:	18e4      	addlt	r4, r4, r3
 8006b1c:	f000 f8e8 	bl	8006cf0 <__malloc_lock>
 8006b20:	4a1d      	ldr	r2, [pc, #116]	@ (8006b98 <_free_r+0x90>)
 8006b22:	6813      	ldr	r3, [r2, #0]
 8006b24:	b933      	cbnz	r3, 8006b34 <_free_r+0x2c>
 8006b26:	6063      	str	r3, [r4, #4]
 8006b28:	6014      	str	r4, [r2, #0]
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b30:	f000 b8e4 	b.w	8006cfc <__malloc_unlock>
 8006b34:	42a3      	cmp	r3, r4
 8006b36:	d908      	bls.n	8006b4a <_free_r+0x42>
 8006b38:	6820      	ldr	r0, [r4, #0]
 8006b3a:	1821      	adds	r1, r4, r0
 8006b3c:	428b      	cmp	r3, r1
 8006b3e:	bf01      	itttt	eq
 8006b40:	6819      	ldreq	r1, [r3, #0]
 8006b42:	685b      	ldreq	r3, [r3, #4]
 8006b44:	1809      	addeq	r1, r1, r0
 8006b46:	6021      	streq	r1, [r4, #0]
 8006b48:	e7ed      	b.n	8006b26 <_free_r+0x1e>
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	b10b      	cbz	r3, 8006b54 <_free_r+0x4c>
 8006b50:	42a3      	cmp	r3, r4
 8006b52:	d9fa      	bls.n	8006b4a <_free_r+0x42>
 8006b54:	6811      	ldr	r1, [r2, #0]
 8006b56:	1850      	adds	r0, r2, r1
 8006b58:	42a0      	cmp	r0, r4
 8006b5a:	d10b      	bne.n	8006b74 <_free_r+0x6c>
 8006b5c:	6820      	ldr	r0, [r4, #0]
 8006b5e:	4401      	add	r1, r0
 8006b60:	1850      	adds	r0, r2, r1
 8006b62:	4283      	cmp	r3, r0
 8006b64:	6011      	str	r1, [r2, #0]
 8006b66:	d1e0      	bne.n	8006b2a <_free_r+0x22>
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	6053      	str	r3, [r2, #4]
 8006b6e:	4408      	add	r0, r1
 8006b70:	6010      	str	r0, [r2, #0]
 8006b72:	e7da      	b.n	8006b2a <_free_r+0x22>
 8006b74:	d902      	bls.n	8006b7c <_free_r+0x74>
 8006b76:	230c      	movs	r3, #12
 8006b78:	602b      	str	r3, [r5, #0]
 8006b7a:	e7d6      	b.n	8006b2a <_free_r+0x22>
 8006b7c:	6820      	ldr	r0, [r4, #0]
 8006b7e:	1821      	adds	r1, r4, r0
 8006b80:	428b      	cmp	r3, r1
 8006b82:	bf04      	itt	eq
 8006b84:	6819      	ldreq	r1, [r3, #0]
 8006b86:	685b      	ldreq	r3, [r3, #4]
 8006b88:	6063      	str	r3, [r4, #4]
 8006b8a:	bf04      	itt	eq
 8006b8c:	1809      	addeq	r1, r1, r0
 8006b8e:	6021      	streq	r1, [r4, #0]
 8006b90:	6054      	str	r4, [r2, #4]
 8006b92:	e7ca      	b.n	8006b2a <_free_r+0x22>
 8006b94:	bd38      	pop	{r3, r4, r5, pc}
 8006b96:	bf00      	nop
 8006b98:	20000438 	.word	0x20000438

08006b9c <malloc>:
 8006b9c:	4b02      	ldr	r3, [pc, #8]	@ (8006ba8 <malloc+0xc>)
 8006b9e:	4601      	mov	r1, r0
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	f000 b825 	b.w	8006bf0 <_malloc_r>
 8006ba6:	bf00      	nop
 8006ba8:	20000020 	.word	0x20000020

08006bac <sbrk_aligned>:
 8006bac:	b570      	push	{r4, r5, r6, lr}
 8006bae:	4e0f      	ldr	r6, [pc, #60]	@ (8006bec <sbrk_aligned+0x40>)
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	6831      	ldr	r1, [r6, #0]
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	b911      	cbnz	r1, 8006bbe <sbrk_aligned+0x12>
 8006bb8:	f000 fc64 	bl	8007484 <_sbrk_r>
 8006bbc:	6030      	str	r0, [r6, #0]
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f000 fc5f 	bl	8007484 <_sbrk_r>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	d103      	bne.n	8006bd2 <sbrk_aligned+0x26>
 8006bca:	f04f 34ff 	mov.w	r4, #4294967295
 8006bce:	4620      	mov	r0, r4
 8006bd0:	bd70      	pop	{r4, r5, r6, pc}
 8006bd2:	1cc4      	adds	r4, r0, #3
 8006bd4:	f024 0403 	bic.w	r4, r4, #3
 8006bd8:	42a0      	cmp	r0, r4
 8006bda:	d0f8      	beq.n	8006bce <sbrk_aligned+0x22>
 8006bdc:	1a21      	subs	r1, r4, r0
 8006bde:	4628      	mov	r0, r5
 8006be0:	f000 fc50 	bl	8007484 <_sbrk_r>
 8006be4:	3001      	adds	r0, #1
 8006be6:	d1f2      	bne.n	8006bce <sbrk_aligned+0x22>
 8006be8:	e7ef      	b.n	8006bca <sbrk_aligned+0x1e>
 8006bea:	bf00      	nop
 8006bec:	20000434 	.word	0x20000434

08006bf0 <_malloc_r>:
 8006bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf4:	1ccd      	adds	r5, r1, #3
 8006bf6:	f025 0503 	bic.w	r5, r5, #3
 8006bfa:	3508      	adds	r5, #8
 8006bfc:	2d0c      	cmp	r5, #12
 8006bfe:	bf38      	it	cc
 8006c00:	250c      	movcc	r5, #12
 8006c02:	2d00      	cmp	r5, #0
 8006c04:	4606      	mov	r6, r0
 8006c06:	db01      	blt.n	8006c0c <_malloc_r+0x1c>
 8006c08:	42a9      	cmp	r1, r5
 8006c0a:	d904      	bls.n	8006c16 <_malloc_r+0x26>
 8006c0c:	230c      	movs	r3, #12
 8006c0e:	6033      	str	r3, [r6, #0]
 8006c10:	2000      	movs	r0, #0
 8006c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006cec <_malloc_r+0xfc>
 8006c1a:	f000 f869 	bl	8006cf0 <__malloc_lock>
 8006c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c22:	461c      	mov	r4, r3
 8006c24:	bb44      	cbnz	r4, 8006c78 <_malloc_r+0x88>
 8006c26:	4629      	mov	r1, r5
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f7ff ffbf 	bl	8006bac <sbrk_aligned>
 8006c2e:	1c43      	adds	r3, r0, #1
 8006c30:	4604      	mov	r4, r0
 8006c32:	d158      	bne.n	8006ce6 <_malloc_r+0xf6>
 8006c34:	f8d8 4000 	ldr.w	r4, [r8]
 8006c38:	4627      	mov	r7, r4
 8006c3a:	2f00      	cmp	r7, #0
 8006c3c:	d143      	bne.n	8006cc6 <_malloc_r+0xd6>
 8006c3e:	2c00      	cmp	r4, #0
 8006c40:	d04b      	beq.n	8006cda <_malloc_r+0xea>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	4639      	mov	r1, r7
 8006c46:	4630      	mov	r0, r6
 8006c48:	eb04 0903 	add.w	r9, r4, r3
 8006c4c:	f000 fc1a 	bl	8007484 <_sbrk_r>
 8006c50:	4581      	cmp	r9, r0
 8006c52:	d142      	bne.n	8006cda <_malloc_r+0xea>
 8006c54:	6821      	ldr	r1, [r4, #0]
 8006c56:	1a6d      	subs	r5, r5, r1
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff ffa6 	bl	8006bac <sbrk_aligned>
 8006c60:	3001      	adds	r0, #1
 8006c62:	d03a      	beq.n	8006cda <_malloc_r+0xea>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	442b      	add	r3, r5
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	bb62      	cbnz	r2, 8006ccc <_malloc_r+0xdc>
 8006c72:	f8c8 7000 	str.w	r7, [r8]
 8006c76:	e00f      	b.n	8006c98 <_malloc_r+0xa8>
 8006c78:	6822      	ldr	r2, [r4, #0]
 8006c7a:	1b52      	subs	r2, r2, r5
 8006c7c:	d420      	bmi.n	8006cc0 <_malloc_r+0xd0>
 8006c7e:	2a0b      	cmp	r2, #11
 8006c80:	d917      	bls.n	8006cb2 <_malloc_r+0xc2>
 8006c82:	1961      	adds	r1, r4, r5
 8006c84:	42a3      	cmp	r3, r4
 8006c86:	6025      	str	r5, [r4, #0]
 8006c88:	bf18      	it	ne
 8006c8a:	6059      	strne	r1, [r3, #4]
 8006c8c:	6863      	ldr	r3, [r4, #4]
 8006c8e:	bf08      	it	eq
 8006c90:	f8c8 1000 	streq.w	r1, [r8]
 8006c94:	5162      	str	r2, [r4, r5]
 8006c96:	604b      	str	r3, [r1, #4]
 8006c98:	4630      	mov	r0, r6
 8006c9a:	f000 f82f 	bl	8006cfc <__malloc_unlock>
 8006c9e:	f104 000b 	add.w	r0, r4, #11
 8006ca2:	1d23      	adds	r3, r4, #4
 8006ca4:	f020 0007 	bic.w	r0, r0, #7
 8006ca8:	1ac2      	subs	r2, r0, r3
 8006caa:	bf1c      	itt	ne
 8006cac:	1a1b      	subne	r3, r3, r0
 8006cae:	50a3      	strne	r3, [r4, r2]
 8006cb0:	e7af      	b.n	8006c12 <_malloc_r+0x22>
 8006cb2:	6862      	ldr	r2, [r4, #4]
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	bf0c      	ite	eq
 8006cb8:	f8c8 2000 	streq.w	r2, [r8]
 8006cbc:	605a      	strne	r2, [r3, #4]
 8006cbe:	e7eb      	b.n	8006c98 <_malloc_r+0xa8>
 8006cc0:	4623      	mov	r3, r4
 8006cc2:	6864      	ldr	r4, [r4, #4]
 8006cc4:	e7ae      	b.n	8006c24 <_malloc_r+0x34>
 8006cc6:	463c      	mov	r4, r7
 8006cc8:	687f      	ldr	r7, [r7, #4]
 8006cca:	e7b6      	b.n	8006c3a <_malloc_r+0x4a>
 8006ccc:	461a      	mov	r2, r3
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	d1fb      	bne.n	8006ccc <_malloc_r+0xdc>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	6053      	str	r3, [r2, #4]
 8006cd8:	e7de      	b.n	8006c98 <_malloc_r+0xa8>
 8006cda:	230c      	movs	r3, #12
 8006cdc:	6033      	str	r3, [r6, #0]
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f000 f80c 	bl	8006cfc <__malloc_unlock>
 8006ce4:	e794      	b.n	8006c10 <_malloc_r+0x20>
 8006ce6:	6005      	str	r5, [r0, #0]
 8006ce8:	e7d6      	b.n	8006c98 <_malloc_r+0xa8>
 8006cea:	bf00      	nop
 8006cec:	20000438 	.word	0x20000438

08006cf0 <__malloc_lock>:
 8006cf0:	4801      	ldr	r0, [pc, #4]	@ (8006cf8 <__malloc_lock+0x8>)
 8006cf2:	f7ff bee8 	b.w	8006ac6 <__retarget_lock_acquire_recursive>
 8006cf6:	bf00      	nop
 8006cf8:	20000430 	.word	0x20000430

08006cfc <__malloc_unlock>:
 8006cfc:	4801      	ldr	r0, [pc, #4]	@ (8006d04 <__malloc_unlock+0x8>)
 8006cfe:	f7ff bee3 	b.w	8006ac8 <__retarget_lock_release_recursive>
 8006d02:	bf00      	nop
 8006d04:	20000430 	.word	0x20000430

08006d08 <__ssputs_r>:
 8006d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0c:	688e      	ldr	r6, [r1, #8]
 8006d0e:	461f      	mov	r7, r3
 8006d10:	42be      	cmp	r6, r7
 8006d12:	680b      	ldr	r3, [r1, #0]
 8006d14:	4682      	mov	sl, r0
 8006d16:	460c      	mov	r4, r1
 8006d18:	4690      	mov	r8, r2
 8006d1a:	d82d      	bhi.n	8006d78 <__ssputs_r+0x70>
 8006d1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d24:	d026      	beq.n	8006d74 <__ssputs_r+0x6c>
 8006d26:	6965      	ldr	r5, [r4, #20]
 8006d28:	6909      	ldr	r1, [r1, #16]
 8006d2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d2e:	eba3 0901 	sub.w	r9, r3, r1
 8006d32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d36:	1c7b      	adds	r3, r7, #1
 8006d38:	444b      	add	r3, r9
 8006d3a:	106d      	asrs	r5, r5, #1
 8006d3c:	429d      	cmp	r5, r3
 8006d3e:	bf38      	it	cc
 8006d40:	461d      	movcc	r5, r3
 8006d42:	0553      	lsls	r3, r2, #21
 8006d44:	d527      	bpl.n	8006d96 <__ssputs_r+0x8e>
 8006d46:	4629      	mov	r1, r5
 8006d48:	f7ff ff52 	bl	8006bf0 <_malloc_r>
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	b360      	cbz	r0, 8006daa <__ssputs_r+0xa2>
 8006d50:	6921      	ldr	r1, [r4, #16]
 8006d52:	464a      	mov	r2, r9
 8006d54:	f000 fba6 	bl	80074a4 <memcpy>
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	6126      	str	r6, [r4, #16]
 8006d66:	6165      	str	r5, [r4, #20]
 8006d68:	444e      	add	r6, r9
 8006d6a:	eba5 0509 	sub.w	r5, r5, r9
 8006d6e:	6026      	str	r6, [r4, #0]
 8006d70:	60a5      	str	r5, [r4, #8]
 8006d72:	463e      	mov	r6, r7
 8006d74:	42be      	cmp	r6, r7
 8006d76:	d900      	bls.n	8006d7a <__ssputs_r+0x72>
 8006d78:	463e      	mov	r6, r7
 8006d7a:	6820      	ldr	r0, [r4, #0]
 8006d7c:	4632      	mov	r2, r6
 8006d7e:	4641      	mov	r1, r8
 8006d80:	f000 fb66 	bl	8007450 <memmove>
 8006d84:	68a3      	ldr	r3, [r4, #8]
 8006d86:	1b9b      	subs	r3, r3, r6
 8006d88:	60a3      	str	r3, [r4, #8]
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	4433      	add	r3, r6
 8006d8e:	6023      	str	r3, [r4, #0]
 8006d90:	2000      	movs	r0, #0
 8006d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d96:	462a      	mov	r2, r5
 8006d98:	f000 fb99 	bl	80074ce <_realloc_r>
 8006d9c:	4606      	mov	r6, r0
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d1e0      	bne.n	8006d64 <__ssputs_r+0x5c>
 8006da2:	6921      	ldr	r1, [r4, #16]
 8006da4:	4650      	mov	r0, sl
 8006da6:	f7ff feaf 	bl	8006b08 <_free_r>
 8006daa:	230c      	movs	r3, #12
 8006dac:	f8ca 3000 	str.w	r3, [sl]
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006db6:	81a3      	strh	r3, [r4, #12]
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	e7e9      	b.n	8006d92 <__ssputs_r+0x8a>
	...

08006dc0 <_svfiprintf_r>:
 8006dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc4:	4698      	mov	r8, r3
 8006dc6:	898b      	ldrh	r3, [r1, #12]
 8006dc8:	061b      	lsls	r3, r3, #24
 8006dca:	b09d      	sub	sp, #116	@ 0x74
 8006dcc:	4607      	mov	r7, r0
 8006dce:	460d      	mov	r5, r1
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	d510      	bpl.n	8006df6 <_svfiprintf_r+0x36>
 8006dd4:	690b      	ldr	r3, [r1, #16]
 8006dd6:	b973      	cbnz	r3, 8006df6 <_svfiprintf_r+0x36>
 8006dd8:	2140      	movs	r1, #64	@ 0x40
 8006dda:	f7ff ff09 	bl	8006bf0 <_malloc_r>
 8006dde:	6028      	str	r0, [r5, #0]
 8006de0:	6128      	str	r0, [r5, #16]
 8006de2:	b930      	cbnz	r0, 8006df2 <_svfiprintf_r+0x32>
 8006de4:	230c      	movs	r3, #12
 8006de6:	603b      	str	r3, [r7, #0]
 8006de8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dec:	b01d      	add	sp, #116	@ 0x74
 8006dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df2:	2340      	movs	r3, #64	@ 0x40
 8006df4:	616b      	str	r3, [r5, #20]
 8006df6:	2300      	movs	r3, #0
 8006df8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dfa:	2320      	movs	r3, #32
 8006dfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e04:	2330      	movs	r3, #48	@ 0x30
 8006e06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006fa4 <_svfiprintf_r+0x1e4>
 8006e0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e0e:	f04f 0901 	mov.w	r9, #1
 8006e12:	4623      	mov	r3, r4
 8006e14:	469a      	mov	sl, r3
 8006e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e1a:	b10a      	cbz	r2, 8006e20 <_svfiprintf_r+0x60>
 8006e1c:	2a25      	cmp	r2, #37	@ 0x25
 8006e1e:	d1f9      	bne.n	8006e14 <_svfiprintf_r+0x54>
 8006e20:	ebba 0b04 	subs.w	fp, sl, r4
 8006e24:	d00b      	beq.n	8006e3e <_svfiprintf_r+0x7e>
 8006e26:	465b      	mov	r3, fp
 8006e28:	4622      	mov	r2, r4
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	f7ff ff6b 	bl	8006d08 <__ssputs_r>
 8006e32:	3001      	adds	r0, #1
 8006e34:	f000 80a7 	beq.w	8006f86 <_svfiprintf_r+0x1c6>
 8006e38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e3a:	445a      	add	r2, fp
 8006e3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 809f 	beq.w	8006f86 <_svfiprintf_r+0x1c6>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e52:	f10a 0a01 	add.w	sl, sl, #1
 8006e56:	9304      	str	r3, [sp, #16]
 8006e58:	9307      	str	r3, [sp, #28]
 8006e5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e60:	4654      	mov	r4, sl
 8006e62:	2205      	movs	r2, #5
 8006e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e68:	484e      	ldr	r0, [pc, #312]	@ (8006fa4 <_svfiprintf_r+0x1e4>)
 8006e6a:	f7f9 f9c1 	bl	80001f0 <memchr>
 8006e6e:	9a04      	ldr	r2, [sp, #16]
 8006e70:	b9d8      	cbnz	r0, 8006eaa <_svfiprintf_r+0xea>
 8006e72:	06d0      	lsls	r0, r2, #27
 8006e74:	bf44      	itt	mi
 8006e76:	2320      	movmi	r3, #32
 8006e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e7c:	0711      	lsls	r1, r2, #28
 8006e7e:	bf44      	itt	mi
 8006e80:	232b      	movmi	r3, #43	@ 0x2b
 8006e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e86:	f89a 3000 	ldrb.w	r3, [sl]
 8006e8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e8c:	d015      	beq.n	8006eba <_svfiprintf_r+0xfa>
 8006e8e:	9a07      	ldr	r2, [sp, #28]
 8006e90:	4654      	mov	r4, sl
 8006e92:	2000      	movs	r0, #0
 8006e94:	f04f 0c0a 	mov.w	ip, #10
 8006e98:	4621      	mov	r1, r4
 8006e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e9e:	3b30      	subs	r3, #48	@ 0x30
 8006ea0:	2b09      	cmp	r3, #9
 8006ea2:	d94b      	bls.n	8006f3c <_svfiprintf_r+0x17c>
 8006ea4:	b1b0      	cbz	r0, 8006ed4 <_svfiprintf_r+0x114>
 8006ea6:	9207      	str	r2, [sp, #28]
 8006ea8:	e014      	b.n	8006ed4 <_svfiprintf_r+0x114>
 8006eaa:	eba0 0308 	sub.w	r3, r0, r8
 8006eae:	fa09 f303 	lsl.w	r3, r9, r3
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	9304      	str	r3, [sp, #16]
 8006eb6:	46a2      	mov	sl, r4
 8006eb8:	e7d2      	b.n	8006e60 <_svfiprintf_r+0xa0>
 8006eba:	9b03      	ldr	r3, [sp, #12]
 8006ebc:	1d19      	adds	r1, r3, #4
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	9103      	str	r1, [sp, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	bfbb      	ittet	lt
 8006ec6:	425b      	neglt	r3, r3
 8006ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8006ecc:	9307      	strge	r3, [sp, #28]
 8006ece:	9307      	strlt	r3, [sp, #28]
 8006ed0:	bfb8      	it	lt
 8006ed2:	9204      	strlt	r2, [sp, #16]
 8006ed4:	7823      	ldrb	r3, [r4, #0]
 8006ed6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ed8:	d10a      	bne.n	8006ef0 <_svfiprintf_r+0x130>
 8006eda:	7863      	ldrb	r3, [r4, #1]
 8006edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ede:	d132      	bne.n	8006f46 <_svfiprintf_r+0x186>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	1d1a      	adds	r2, r3, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	9203      	str	r2, [sp, #12]
 8006ee8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006eec:	3402      	adds	r4, #2
 8006eee:	9305      	str	r3, [sp, #20]
 8006ef0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006fb4 <_svfiprintf_r+0x1f4>
 8006ef4:	7821      	ldrb	r1, [r4, #0]
 8006ef6:	2203      	movs	r2, #3
 8006ef8:	4650      	mov	r0, sl
 8006efa:	f7f9 f979 	bl	80001f0 <memchr>
 8006efe:	b138      	cbz	r0, 8006f10 <_svfiprintf_r+0x150>
 8006f00:	9b04      	ldr	r3, [sp, #16]
 8006f02:	eba0 000a 	sub.w	r0, r0, sl
 8006f06:	2240      	movs	r2, #64	@ 0x40
 8006f08:	4082      	lsls	r2, r0
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	3401      	adds	r4, #1
 8006f0e:	9304      	str	r3, [sp, #16]
 8006f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f14:	4824      	ldr	r0, [pc, #144]	@ (8006fa8 <_svfiprintf_r+0x1e8>)
 8006f16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f1a:	2206      	movs	r2, #6
 8006f1c:	f7f9 f968 	bl	80001f0 <memchr>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d036      	beq.n	8006f92 <_svfiprintf_r+0x1d2>
 8006f24:	4b21      	ldr	r3, [pc, #132]	@ (8006fac <_svfiprintf_r+0x1ec>)
 8006f26:	bb1b      	cbnz	r3, 8006f70 <_svfiprintf_r+0x1b0>
 8006f28:	9b03      	ldr	r3, [sp, #12]
 8006f2a:	3307      	adds	r3, #7
 8006f2c:	f023 0307 	bic.w	r3, r3, #7
 8006f30:	3308      	adds	r3, #8
 8006f32:	9303      	str	r3, [sp, #12]
 8006f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f36:	4433      	add	r3, r6
 8006f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f3a:	e76a      	b.n	8006e12 <_svfiprintf_r+0x52>
 8006f3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f40:	460c      	mov	r4, r1
 8006f42:	2001      	movs	r0, #1
 8006f44:	e7a8      	b.n	8006e98 <_svfiprintf_r+0xd8>
 8006f46:	2300      	movs	r3, #0
 8006f48:	3401      	adds	r4, #1
 8006f4a:	9305      	str	r3, [sp, #20]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	f04f 0c0a 	mov.w	ip, #10
 8006f52:	4620      	mov	r0, r4
 8006f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f58:	3a30      	subs	r2, #48	@ 0x30
 8006f5a:	2a09      	cmp	r2, #9
 8006f5c:	d903      	bls.n	8006f66 <_svfiprintf_r+0x1a6>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0c6      	beq.n	8006ef0 <_svfiprintf_r+0x130>
 8006f62:	9105      	str	r1, [sp, #20]
 8006f64:	e7c4      	b.n	8006ef0 <_svfiprintf_r+0x130>
 8006f66:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e7f0      	b.n	8006f52 <_svfiprintf_r+0x192>
 8006f70:	ab03      	add	r3, sp, #12
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	462a      	mov	r2, r5
 8006f76:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb0 <_svfiprintf_r+0x1f0>)
 8006f78:	a904      	add	r1, sp, #16
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	f3af 8000 	nop.w
 8006f80:	1c42      	adds	r2, r0, #1
 8006f82:	4606      	mov	r6, r0
 8006f84:	d1d6      	bne.n	8006f34 <_svfiprintf_r+0x174>
 8006f86:	89ab      	ldrh	r3, [r5, #12]
 8006f88:	065b      	lsls	r3, r3, #25
 8006f8a:	f53f af2d 	bmi.w	8006de8 <_svfiprintf_r+0x28>
 8006f8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f90:	e72c      	b.n	8006dec <_svfiprintf_r+0x2c>
 8006f92:	ab03      	add	r3, sp, #12
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	462a      	mov	r2, r5
 8006f98:	4b05      	ldr	r3, [pc, #20]	@ (8006fb0 <_svfiprintf_r+0x1f0>)
 8006f9a:	a904      	add	r1, sp, #16
 8006f9c:	4638      	mov	r0, r7
 8006f9e:	f000 f879 	bl	8007094 <_printf_i>
 8006fa2:	e7ed      	b.n	8006f80 <_svfiprintf_r+0x1c0>
 8006fa4:	08007ecb 	.word	0x08007ecb
 8006fa8:	08007ed5 	.word	0x08007ed5
 8006fac:	00000000 	.word	0x00000000
 8006fb0:	08006d09 	.word	0x08006d09
 8006fb4:	08007ed1 	.word	0x08007ed1

08006fb8 <_printf_common>:
 8006fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	4698      	mov	r8, r3
 8006fc0:	688a      	ldr	r2, [r1, #8]
 8006fc2:	690b      	ldr	r3, [r1, #16]
 8006fc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	bfb8      	it	lt
 8006fcc:	4613      	movlt	r3, r2
 8006fce:	6033      	str	r3, [r6, #0]
 8006fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	b10a      	cbz	r2, 8006fde <_printf_common+0x26>
 8006fda:	3301      	adds	r3, #1
 8006fdc:	6033      	str	r3, [r6, #0]
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	0699      	lsls	r1, r3, #26
 8006fe2:	bf42      	ittt	mi
 8006fe4:	6833      	ldrmi	r3, [r6, #0]
 8006fe6:	3302      	addmi	r3, #2
 8006fe8:	6033      	strmi	r3, [r6, #0]
 8006fea:	6825      	ldr	r5, [r4, #0]
 8006fec:	f015 0506 	ands.w	r5, r5, #6
 8006ff0:	d106      	bne.n	8007000 <_printf_common+0x48>
 8006ff2:	f104 0a19 	add.w	sl, r4, #25
 8006ff6:	68e3      	ldr	r3, [r4, #12]
 8006ff8:	6832      	ldr	r2, [r6, #0]
 8006ffa:	1a9b      	subs	r3, r3, r2
 8006ffc:	42ab      	cmp	r3, r5
 8006ffe:	dc26      	bgt.n	800704e <_printf_common+0x96>
 8007000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007004:	6822      	ldr	r2, [r4, #0]
 8007006:	3b00      	subs	r3, #0
 8007008:	bf18      	it	ne
 800700a:	2301      	movne	r3, #1
 800700c:	0692      	lsls	r2, r2, #26
 800700e:	d42b      	bmi.n	8007068 <_printf_common+0xb0>
 8007010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007014:	4641      	mov	r1, r8
 8007016:	4638      	mov	r0, r7
 8007018:	47c8      	blx	r9
 800701a:	3001      	adds	r0, #1
 800701c:	d01e      	beq.n	800705c <_printf_common+0xa4>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	6922      	ldr	r2, [r4, #16]
 8007022:	f003 0306 	and.w	r3, r3, #6
 8007026:	2b04      	cmp	r3, #4
 8007028:	bf02      	ittt	eq
 800702a:	68e5      	ldreq	r5, [r4, #12]
 800702c:	6833      	ldreq	r3, [r6, #0]
 800702e:	1aed      	subeq	r5, r5, r3
 8007030:	68a3      	ldr	r3, [r4, #8]
 8007032:	bf0c      	ite	eq
 8007034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007038:	2500      	movne	r5, #0
 800703a:	4293      	cmp	r3, r2
 800703c:	bfc4      	itt	gt
 800703e:	1a9b      	subgt	r3, r3, r2
 8007040:	18ed      	addgt	r5, r5, r3
 8007042:	2600      	movs	r6, #0
 8007044:	341a      	adds	r4, #26
 8007046:	42b5      	cmp	r5, r6
 8007048:	d11a      	bne.n	8007080 <_printf_common+0xc8>
 800704a:	2000      	movs	r0, #0
 800704c:	e008      	b.n	8007060 <_printf_common+0xa8>
 800704e:	2301      	movs	r3, #1
 8007050:	4652      	mov	r2, sl
 8007052:	4641      	mov	r1, r8
 8007054:	4638      	mov	r0, r7
 8007056:	47c8      	blx	r9
 8007058:	3001      	adds	r0, #1
 800705a:	d103      	bne.n	8007064 <_printf_common+0xac>
 800705c:	f04f 30ff 	mov.w	r0, #4294967295
 8007060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007064:	3501      	adds	r5, #1
 8007066:	e7c6      	b.n	8006ff6 <_printf_common+0x3e>
 8007068:	18e1      	adds	r1, r4, r3
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	2030      	movs	r0, #48	@ 0x30
 800706e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007072:	4422      	add	r2, r4
 8007074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800707c:	3302      	adds	r3, #2
 800707e:	e7c7      	b.n	8007010 <_printf_common+0x58>
 8007080:	2301      	movs	r3, #1
 8007082:	4622      	mov	r2, r4
 8007084:	4641      	mov	r1, r8
 8007086:	4638      	mov	r0, r7
 8007088:	47c8      	blx	r9
 800708a:	3001      	adds	r0, #1
 800708c:	d0e6      	beq.n	800705c <_printf_common+0xa4>
 800708e:	3601      	adds	r6, #1
 8007090:	e7d9      	b.n	8007046 <_printf_common+0x8e>
	...

08007094 <_printf_i>:
 8007094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007098:	7e0f      	ldrb	r7, [r1, #24]
 800709a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800709c:	2f78      	cmp	r7, #120	@ 0x78
 800709e:	4691      	mov	r9, r2
 80070a0:	4680      	mov	r8, r0
 80070a2:	460c      	mov	r4, r1
 80070a4:	469a      	mov	sl, r3
 80070a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070aa:	d807      	bhi.n	80070bc <_printf_i+0x28>
 80070ac:	2f62      	cmp	r7, #98	@ 0x62
 80070ae:	d80a      	bhi.n	80070c6 <_printf_i+0x32>
 80070b0:	2f00      	cmp	r7, #0
 80070b2:	f000 80d2 	beq.w	800725a <_printf_i+0x1c6>
 80070b6:	2f58      	cmp	r7, #88	@ 0x58
 80070b8:	f000 80b9 	beq.w	800722e <_printf_i+0x19a>
 80070bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070c4:	e03a      	b.n	800713c <_printf_i+0xa8>
 80070c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070ca:	2b15      	cmp	r3, #21
 80070cc:	d8f6      	bhi.n	80070bc <_printf_i+0x28>
 80070ce:	a101      	add	r1, pc, #4	@ (adr r1, 80070d4 <_printf_i+0x40>)
 80070d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070d4:	0800712d 	.word	0x0800712d
 80070d8:	08007141 	.word	0x08007141
 80070dc:	080070bd 	.word	0x080070bd
 80070e0:	080070bd 	.word	0x080070bd
 80070e4:	080070bd 	.word	0x080070bd
 80070e8:	080070bd 	.word	0x080070bd
 80070ec:	08007141 	.word	0x08007141
 80070f0:	080070bd 	.word	0x080070bd
 80070f4:	080070bd 	.word	0x080070bd
 80070f8:	080070bd 	.word	0x080070bd
 80070fc:	080070bd 	.word	0x080070bd
 8007100:	08007241 	.word	0x08007241
 8007104:	0800716b 	.word	0x0800716b
 8007108:	080071fb 	.word	0x080071fb
 800710c:	080070bd 	.word	0x080070bd
 8007110:	080070bd 	.word	0x080070bd
 8007114:	08007263 	.word	0x08007263
 8007118:	080070bd 	.word	0x080070bd
 800711c:	0800716b 	.word	0x0800716b
 8007120:	080070bd 	.word	0x080070bd
 8007124:	080070bd 	.word	0x080070bd
 8007128:	08007203 	.word	0x08007203
 800712c:	6833      	ldr	r3, [r6, #0]
 800712e:	1d1a      	adds	r2, r3, #4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6032      	str	r2, [r6, #0]
 8007134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800713c:	2301      	movs	r3, #1
 800713e:	e09d      	b.n	800727c <_printf_i+0x1e8>
 8007140:	6833      	ldr	r3, [r6, #0]
 8007142:	6820      	ldr	r0, [r4, #0]
 8007144:	1d19      	adds	r1, r3, #4
 8007146:	6031      	str	r1, [r6, #0]
 8007148:	0606      	lsls	r6, r0, #24
 800714a:	d501      	bpl.n	8007150 <_printf_i+0xbc>
 800714c:	681d      	ldr	r5, [r3, #0]
 800714e:	e003      	b.n	8007158 <_printf_i+0xc4>
 8007150:	0645      	lsls	r5, r0, #25
 8007152:	d5fb      	bpl.n	800714c <_printf_i+0xb8>
 8007154:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007158:	2d00      	cmp	r5, #0
 800715a:	da03      	bge.n	8007164 <_printf_i+0xd0>
 800715c:	232d      	movs	r3, #45	@ 0x2d
 800715e:	426d      	negs	r5, r5
 8007160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007164:	4859      	ldr	r0, [pc, #356]	@ (80072cc <_printf_i+0x238>)
 8007166:	230a      	movs	r3, #10
 8007168:	e011      	b.n	800718e <_printf_i+0xfa>
 800716a:	6821      	ldr	r1, [r4, #0]
 800716c:	6833      	ldr	r3, [r6, #0]
 800716e:	0608      	lsls	r0, r1, #24
 8007170:	f853 5b04 	ldr.w	r5, [r3], #4
 8007174:	d402      	bmi.n	800717c <_printf_i+0xe8>
 8007176:	0649      	lsls	r1, r1, #25
 8007178:	bf48      	it	mi
 800717a:	b2ad      	uxthmi	r5, r5
 800717c:	2f6f      	cmp	r7, #111	@ 0x6f
 800717e:	4853      	ldr	r0, [pc, #332]	@ (80072cc <_printf_i+0x238>)
 8007180:	6033      	str	r3, [r6, #0]
 8007182:	bf14      	ite	ne
 8007184:	230a      	movne	r3, #10
 8007186:	2308      	moveq	r3, #8
 8007188:	2100      	movs	r1, #0
 800718a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800718e:	6866      	ldr	r6, [r4, #4]
 8007190:	60a6      	str	r6, [r4, #8]
 8007192:	2e00      	cmp	r6, #0
 8007194:	bfa2      	ittt	ge
 8007196:	6821      	ldrge	r1, [r4, #0]
 8007198:	f021 0104 	bicge.w	r1, r1, #4
 800719c:	6021      	strge	r1, [r4, #0]
 800719e:	b90d      	cbnz	r5, 80071a4 <_printf_i+0x110>
 80071a0:	2e00      	cmp	r6, #0
 80071a2:	d04b      	beq.n	800723c <_printf_i+0x1a8>
 80071a4:	4616      	mov	r6, r2
 80071a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80071aa:	fb03 5711 	mls	r7, r3, r1, r5
 80071ae:	5dc7      	ldrb	r7, [r0, r7]
 80071b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071b4:	462f      	mov	r7, r5
 80071b6:	42bb      	cmp	r3, r7
 80071b8:	460d      	mov	r5, r1
 80071ba:	d9f4      	bls.n	80071a6 <_printf_i+0x112>
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d10b      	bne.n	80071d8 <_printf_i+0x144>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	07df      	lsls	r7, r3, #31
 80071c4:	d508      	bpl.n	80071d8 <_printf_i+0x144>
 80071c6:	6923      	ldr	r3, [r4, #16]
 80071c8:	6861      	ldr	r1, [r4, #4]
 80071ca:	4299      	cmp	r1, r3
 80071cc:	bfde      	ittt	le
 80071ce:	2330      	movle	r3, #48	@ 0x30
 80071d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071d8:	1b92      	subs	r2, r2, r6
 80071da:	6122      	str	r2, [r4, #16]
 80071dc:	f8cd a000 	str.w	sl, [sp]
 80071e0:	464b      	mov	r3, r9
 80071e2:	aa03      	add	r2, sp, #12
 80071e4:	4621      	mov	r1, r4
 80071e6:	4640      	mov	r0, r8
 80071e8:	f7ff fee6 	bl	8006fb8 <_printf_common>
 80071ec:	3001      	adds	r0, #1
 80071ee:	d14a      	bne.n	8007286 <_printf_i+0x1f2>
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295
 80071f4:	b004      	add	sp, #16
 80071f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	f043 0320 	orr.w	r3, r3, #32
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	4833      	ldr	r0, [pc, #204]	@ (80072d0 <_printf_i+0x23c>)
 8007204:	2778      	movs	r7, #120	@ 0x78
 8007206:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	6831      	ldr	r1, [r6, #0]
 800720e:	061f      	lsls	r7, r3, #24
 8007210:	f851 5b04 	ldr.w	r5, [r1], #4
 8007214:	d402      	bmi.n	800721c <_printf_i+0x188>
 8007216:	065f      	lsls	r7, r3, #25
 8007218:	bf48      	it	mi
 800721a:	b2ad      	uxthmi	r5, r5
 800721c:	6031      	str	r1, [r6, #0]
 800721e:	07d9      	lsls	r1, r3, #31
 8007220:	bf44      	itt	mi
 8007222:	f043 0320 	orrmi.w	r3, r3, #32
 8007226:	6023      	strmi	r3, [r4, #0]
 8007228:	b11d      	cbz	r5, 8007232 <_printf_i+0x19e>
 800722a:	2310      	movs	r3, #16
 800722c:	e7ac      	b.n	8007188 <_printf_i+0xf4>
 800722e:	4827      	ldr	r0, [pc, #156]	@ (80072cc <_printf_i+0x238>)
 8007230:	e7e9      	b.n	8007206 <_printf_i+0x172>
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	f023 0320 	bic.w	r3, r3, #32
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	e7f6      	b.n	800722a <_printf_i+0x196>
 800723c:	4616      	mov	r6, r2
 800723e:	e7bd      	b.n	80071bc <_printf_i+0x128>
 8007240:	6833      	ldr	r3, [r6, #0]
 8007242:	6825      	ldr	r5, [r4, #0]
 8007244:	6961      	ldr	r1, [r4, #20]
 8007246:	1d18      	adds	r0, r3, #4
 8007248:	6030      	str	r0, [r6, #0]
 800724a:	062e      	lsls	r6, r5, #24
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	d501      	bpl.n	8007254 <_printf_i+0x1c0>
 8007250:	6019      	str	r1, [r3, #0]
 8007252:	e002      	b.n	800725a <_printf_i+0x1c6>
 8007254:	0668      	lsls	r0, r5, #25
 8007256:	d5fb      	bpl.n	8007250 <_printf_i+0x1bc>
 8007258:	8019      	strh	r1, [r3, #0]
 800725a:	2300      	movs	r3, #0
 800725c:	6123      	str	r3, [r4, #16]
 800725e:	4616      	mov	r6, r2
 8007260:	e7bc      	b.n	80071dc <_printf_i+0x148>
 8007262:	6833      	ldr	r3, [r6, #0]
 8007264:	1d1a      	adds	r2, r3, #4
 8007266:	6032      	str	r2, [r6, #0]
 8007268:	681e      	ldr	r6, [r3, #0]
 800726a:	6862      	ldr	r2, [r4, #4]
 800726c:	2100      	movs	r1, #0
 800726e:	4630      	mov	r0, r6
 8007270:	f7f8 ffbe 	bl	80001f0 <memchr>
 8007274:	b108      	cbz	r0, 800727a <_printf_i+0x1e6>
 8007276:	1b80      	subs	r0, r0, r6
 8007278:	6060      	str	r0, [r4, #4]
 800727a:	6863      	ldr	r3, [r4, #4]
 800727c:	6123      	str	r3, [r4, #16]
 800727e:	2300      	movs	r3, #0
 8007280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007284:	e7aa      	b.n	80071dc <_printf_i+0x148>
 8007286:	6923      	ldr	r3, [r4, #16]
 8007288:	4632      	mov	r2, r6
 800728a:	4649      	mov	r1, r9
 800728c:	4640      	mov	r0, r8
 800728e:	47d0      	blx	sl
 8007290:	3001      	adds	r0, #1
 8007292:	d0ad      	beq.n	80071f0 <_printf_i+0x15c>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	079b      	lsls	r3, r3, #30
 8007298:	d413      	bmi.n	80072c2 <_printf_i+0x22e>
 800729a:	68e0      	ldr	r0, [r4, #12]
 800729c:	9b03      	ldr	r3, [sp, #12]
 800729e:	4298      	cmp	r0, r3
 80072a0:	bfb8      	it	lt
 80072a2:	4618      	movlt	r0, r3
 80072a4:	e7a6      	b.n	80071f4 <_printf_i+0x160>
 80072a6:	2301      	movs	r3, #1
 80072a8:	4632      	mov	r2, r6
 80072aa:	4649      	mov	r1, r9
 80072ac:	4640      	mov	r0, r8
 80072ae:	47d0      	blx	sl
 80072b0:	3001      	adds	r0, #1
 80072b2:	d09d      	beq.n	80071f0 <_printf_i+0x15c>
 80072b4:	3501      	adds	r5, #1
 80072b6:	68e3      	ldr	r3, [r4, #12]
 80072b8:	9903      	ldr	r1, [sp, #12]
 80072ba:	1a5b      	subs	r3, r3, r1
 80072bc:	42ab      	cmp	r3, r5
 80072be:	dcf2      	bgt.n	80072a6 <_printf_i+0x212>
 80072c0:	e7eb      	b.n	800729a <_printf_i+0x206>
 80072c2:	2500      	movs	r5, #0
 80072c4:	f104 0619 	add.w	r6, r4, #25
 80072c8:	e7f5      	b.n	80072b6 <_printf_i+0x222>
 80072ca:	bf00      	nop
 80072cc:	08007edc 	.word	0x08007edc
 80072d0:	08007eed 	.word	0x08007eed

080072d4 <__sflush_r>:
 80072d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072dc:	0716      	lsls	r6, r2, #28
 80072de:	4605      	mov	r5, r0
 80072e0:	460c      	mov	r4, r1
 80072e2:	d454      	bmi.n	800738e <__sflush_r+0xba>
 80072e4:	684b      	ldr	r3, [r1, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	dc02      	bgt.n	80072f0 <__sflush_r+0x1c>
 80072ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	dd48      	ble.n	8007382 <__sflush_r+0xae>
 80072f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072f2:	2e00      	cmp	r6, #0
 80072f4:	d045      	beq.n	8007382 <__sflush_r+0xae>
 80072f6:	2300      	movs	r3, #0
 80072f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072fc:	682f      	ldr	r7, [r5, #0]
 80072fe:	6a21      	ldr	r1, [r4, #32]
 8007300:	602b      	str	r3, [r5, #0]
 8007302:	d030      	beq.n	8007366 <__sflush_r+0x92>
 8007304:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	0759      	lsls	r1, r3, #29
 800730a:	d505      	bpl.n	8007318 <__sflush_r+0x44>
 800730c:	6863      	ldr	r3, [r4, #4]
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007312:	b10b      	cbz	r3, 8007318 <__sflush_r+0x44>
 8007314:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007316:	1ad2      	subs	r2, r2, r3
 8007318:	2300      	movs	r3, #0
 800731a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800731c:	6a21      	ldr	r1, [r4, #32]
 800731e:	4628      	mov	r0, r5
 8007320:	47b0      	blx	r6
 8007322:	1c43      	adds	r3, r0, #1
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	d106      	bne.n	8007336 <__sflush_r+0x62>
 8007328:	6829      	ldr	r1, [r5, #0]
 800732a:	291d      	cmp	r1, #29
 800732c:	d82b      	bhi.n	8007386 <__sflush_r+0xb2>
 800732e:	4a2a      	ldr	r2, [pc, #168]	@ (80073d8 <__sflush_r+0x104>)
 8007330:	410a      	asrs	r2, r1
 8007332:	07d6      	lsls	r6, r2, #31
 8007334:	d427      	bmi.n	8007386 <__sflush_r+0xb2>
 8007336:	2200      	movs	r2, #0
 8007338:	6062      	str	r2, [r4, #4]
 800733a:	04d9      	lsls	r1, r3, #19
 800733c:	6922      	ldr	r2, [r4, #16]
 800733e:	6022      	str	r2, [r4, #0]
 8007340:	d504      	bpl.n	800734c <__sflush_r+0x78>
 8007342:	1c42      	adds	r2, r0, #1
 8007344:	d101      	bne.n	800734a <__sflush_r+0x76>
 8007346:	682b      	ldr	r3, [r5, #0]
 8007348:	b903      	cbnz	r3, 800734c <__sflush_r+0x78>
 800734a:	6560      	str	r0, [r4, #84]	@ 0x54
 800734c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800734e:	602f      	str	r7, [r5, #0]
 8007350:	b1b9      	cbz	r1, 8007382 <__sflush_r+0xae>
 8007352:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007356:	4299      	cmp	r1, r3
 8007358:	d002      	beq.n	8007360 <__sflush_r+0x8c>
 800735a:	4628      	mov	r0, r5
 800735c:	f7ff fbd4 	bl	8006b08 <_free_r>
 8007360:	2300      	movs	r3, #0
 8007362:	6363      	str	r3, [r4, #52]	@ 0x34
 8007364:	e00d      	b.n	8007382 <__sflush_r+0xae>
 8007366:	2301      	movs	r3, #1
 8007368:	4628      	mov	r0, r5
 800736a:	47b0      	blx	r6
 800736c:	4602      	mov	r2, r0
 800736e:	1c50      	adds	r0, r2, #1
 8007370:	d1c9      	bne.n	8007306 <__sflush_r+0x32>
 8007372:	682b      	ldr	r3, [r5, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0c6      	beq.n	8007306 <__sflush_r+0x32>
 8007378:	2b1d      	cmp	r3, #29
 800737a:	d001      	beq.n	8007380 <__sflush_r+0xac>
 800737c:	2b16      	cmp	r3, #22
 800737e:	d11e      	bne.n	80073be <__sflush_r+0xea>
 8007380:	602f      	str	r7, [r5, #0]
 8007382:	2000      	movs	r0, #0
 8007384:	e022      	b.n	80073cc <__sflush_r+0xf8>
 8007386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800738a:	b21b      	sxth	r3, r3
 800738c:	e01b      	b.n	80073c6 <__sflush_r+0xf2>
 800738e:	690f      	ldr	r7, [r1, #16]
 8007390:	2f00      	cmp	r7, #0
 8007392:	d0f6      	beq.n	8007382 <__sflush_r+0xae>
 8007394:	0793      	lsls	r3, r2, #30
 8007396:	680e      	ldr	r6, [r1, #0]
 8007398:	bf08      	it	eq
 800739a:	694b      	ldreq	r3, [r1, #20]
 800739c:	600f      	str	r7, [r1, #0]
 800739e:	bf18      	it	ne
 80073a0:	2300      	movne	r3, #0
 80073a2:	eba6 0807 	sub.w	r8, r6, r7
 80073a6:	608b      	str	r3, [r1, #8]
 80073a8:	f1b8 0f00 	cmp.w	r8, #0
 80073ac:	dde9      	ble.n	8007382 <__sflush_r+0xae>
 80073ae:	6a21      	ldr	r1, [r4, #32]
 80073b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80073b2:	4643      	mov	r3, r8
 80073b4:	463a      	mov	r2, r7
 80073b6:	4628      	mov	r0, r5
 80073b8:	47b0      	blx	r6
 80073ba:	2800      	cmp	r0, #0
 80073bc:	dc08      	bgt.n	80073d0 <__sflush_r+0xfc>
 80073be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	f04f 30ff 	mov.w	r0, #4294967295
 80073cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d0:	4407      	add	r7, r0
 80073d2:	eba8 0800 	sub.w	r8, r8, r0
 80073d6:	e7e7      	b.n	80073a8 <__sflush_r+0xd4>
 80073d8:	dfbffffe 	.word	0xdfbffffe

080073dc <_fflush_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	690b      	ldr	r3, [r1, #16]
 80073e0:	4605      	mov	r5, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	b913      	cbnz	r3, 80073ec <_fflush_r+0x10>
 80073e6:	2500      	movs	r5, #0
 80073e8:	4628      	mov	r0, r5
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	b118      	cbz	r0, 80073f6 <_fflush_r+0x1a>
 80073ee:	6a03      	ldr	r3, [r0, #32]
 80073f0:	b90b      	cbnz	r3, 80073f6 <_fflush_r+0x1a>
 80073f2:	f7ff fa55 	bl	80068a0 <__sinit>
 80073f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0f3      	beq.n	80073e6 <_fflush_r+0xa>
 80073fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007400:	07d0      	lsls	r0, r2, #31
 8007402:	d404      	bmi.n	800740e <_fflush_r+0x32>
 8007404:	0599      	lsls	r1, r3, #22
 8007406:	d402      	bmi.n	800740e <_fflush_r+0x32>
 8007408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800740a:	f7ff fb5c 	bl	8006ac6 <__retarget_lock_acquire_recursive>
 800740e:	4628      	mov	r0, r5
 8007410:	4621      	mov	r1, r4
 8007412:	f7ff ff5f 	bl	80072d4 <__sflush_r>
 8007416:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007418:	07da      	lsls	r2, r3, #31
 800741a:	4605      	mov	r5, r0
 800741c:	d4e4      	bmi.n	80073e8 <_fflush_r+0xc>
 800741e:	89a3      	ldrh	r3, [r4, #12]
 8007420:	059b      	lsls	r3, r3, #22
 8007422:	d4e1      	bmi.n	80073e8 <_fflush_r+0xc>
 8007424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007426:	f7ff fb4f 	bl	8006ac8 <__retarget_lock_release_recursive>
 800742a:	e7dd      	b.n	80073e8 <_fflush_r+0xc>

0800742c <fiprintf>:
 800742c:	b40e      	push	{r1, r2, r3}
 800742e:	b503      	push	{r0, r1, lr}
 8007430:	4601      	mov	r1, r0
 8007432:	ab03      	add	r3, sp, #12
 8007434:	4805      	ldr	r0, [pc, #20]	@ (800744c <fiprintf+0x20>)
 8007436:	f853 2b04 	ldr.w	r2, [r3], #4
 800743a:	6800      	ldr	r0, [r0, #0]
 800743c:	9301      	str	r3, [sp, #4]
 800743e:	f000 f89d 	bl	800757c <_vfiprintf_r>
 8007442:	b002      	add	sp, #8
 8007444:	f85d eb04 	ldr.w	lr, [sp], #4
 8007448:	b003      	add	sp, #12
 800744a:	4770      	bx	lr
 800744c:	20000020 	.word	0x20000020

08007450 <memmove>:
 8007450:	4288      	cmp	r0, r1
 8007452:	b510      	push	{r4, lr}
 8007454:	eb01 0402 	add.w	r4, r1, r2
 8007458:	d902      	bls.n	8007460 <memmove+0x10>
 800745a:	4284      	cmp	r4, r0
 800745c:	4623      	mov	r3, r4
 800745e:	d807      	bhi.n	8007470 <memmove+0x20>
 8007460:	1e43      	subs	r3, r0, #1
 8007462:	42a1      	cmp	r1, r4
 8007464:	d008      	beq.n	8007478 <memmove+0x28>
 8007466:	f811 2b01 	ldrb.w	r2, [r1], #1
 800746a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800746e:	e7f8      	b.n	8007462 <memmove+0x12>
 8007470:	4402      	add	r2, r0
 8007472:	4601      	mov	r1, r0
 8007474:	428a      	cmp	r2, r1
 8007476:	d100      	bne.n	800747a <memmove+0x2a>
 8007478:	bd10      	pop	{r4, pc}
 800747a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800747e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007482:	e7f7      	b.n	8007474 <memmove+0x24>

08007484 <_sbrk_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4d06      	ldr	r5, [pc, #24]	@ (80074a0 <_sbrk_r+0x1c>)
 8007488:	2300      	movs	r3, #0
 800748a:	4604      	mov	r4, r0
 800748c:	4608      	mov	r0, r1
 800748e:	602b      	str	r3, [r5, #0]
 8007490:	f7fb f882 	bl	8002598 <_sbrk>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d102      	bne.n	800749e <_sbrk_r+0x1a>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	b103      	cbz	r3, 800749e <_sbrk_r+0x1a>
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	2000042c 	.word	0x2000042c

080074a4 <memcpy>:
 80074a4:	440a      	add	r2, r1
 80074a6:	4291      	cmp	r1, r2
 80074a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074ac:	d100      	bne.n	80074b0 <memcpy+0xc>
 80074ae:	4770      	bx	lr
 80074b0:	b510      	push	{r4, lr}
 80074b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ba:	4291      	cmp	r1, r2
 80074bc:	d1f9      	bne.n	80074b2 <memcpy+0xe>
 80074be:	bd10      	pop	{r4, pc}

080074c0 <abort>:
 80074c0:	b508      	push	{r3, lr}
 80074c2:	2006      	movs	r0, #6
 80074c4:	f000 fa2e 	bl	8007924 <raise>
 80074c8:	2001      	movs	r0, #1
 80074ca:	f7fa ffed 	bl	80024a8 <_exit>

080074ce <_realloc_r>:
 80074ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d2:	4680      	mov	r8, r0
 80074d4:	4615      	mov	r5, r2
 80074d6:	460c      	mov	r4, r1
 80074d8:	b921      	cbnz	r1, 80074e4 <_realloc_r+0x16>
 80074da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074de:	4611      	mov	r1, r2
 80074e0:	f7ff bb86 	b.w	8006bf0 <_malloc_r>
 80074e4:	b92a      	cbnz	r2, 80074f2 <_realloc_r+0x24>
 80074e6:	f7ff fb0f 	bl	8006b08 <_free_r>
 80074ea:	2400      	movs	r4, #0
 80074ec:	4620      	mov	r0, r4
 80074ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074f2:	f000 fa33 	bl	800795c <_malloc_usable_size_r>
 80074f6:	4285      	cmp	r5, r0
 80074f8:	4606      	mov	r6, r0
 80074fa:	d802      	bhi.n	8007502 <_realloc_r+0x34>
 80074fc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007500:	d8f4      	bhi.n	80074ec <_realloc_r+0x1e>
 8007502:	4629      	mov	r1, r5
 8007504:	4640      	mov	r0, r8
 8007506:	f7ff fb73 	bl	8006bf0 <_malloc_r>
 800750a:	4607      	mov	r7, r0
 800750c:	2800      	cmp	r0, #0
 800750e:	d0ec      	beq.n	80074ea <_realloc_r+0x1c>
 8007510:	42b5      	cmp	r5, r6
 8007512:	462a      	mov	r2, r5
 8007514:	4621      	mov	r1, r4
 8007516:	bf28      	it	cs
 8007518:	4632      	movcs	r2, r6
 800751a:	f7ff ffc3 	bl	80074a4 <memcpy>
 800751e:	4621      	mov	r1, r4
 8007520:	4640      	mov	r0, r8
 8007522:	f7ff faf1 	bl	8006b08 <_free_r>
 8007526:	463c      	mov	r4, r7
 8007528:	e7e0      	b.n	80074ec <_realloc_r+0x1e>

0800752a <__sfputc_r>:
 800752a:	6893      	ldr	r3, [r2, #8]
 800752c:	3b01      	subs	r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	b410      	push	{r4}
 8007532:	6093      	str	r3, [r2, #8]
 8007534:	da08      	bge.n	8007548 <__sfputc_r+0x1e>
 8007536:	6994      	ldr	r4, [r2, #24]
 8007538:	42a3      	cmp	r3, r4
 800753a:	db01      	blt.n	8007540 <__sfputc_r+0x16>
 800753c:	290a      	cmp	r1, #10
 800753e:	d103      	bne.n	8007548 <__sfputc_r+0x1e>
 8007540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007544:	f000 b932 	b.w	80077ac <__swbuf_r>
 8007548:	6813      	ldr	r3, [r2, #0]
 800754a:	1c58      	adds	r0, r3, #1
 800754c:	6010      	str	r0, [r2, #0]
 800754e:	7019      	strb	r1, [r3, #0]
 8007550:	4608      	mov	r0, r1
 8007552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007556:	4770      	bx	lr

08007558 <__sfputs_r>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	4606      	mov	r6, r0
 800755c:	460f      	mov	r7, r1
 800755e:	4614      	mov	r4, r2
 8007560:	18d5      	adds	r5, r2, r3
 8007562:	42ac      	cmp	r4, r5
 8007564:	d101      	bne.n	800756a <__sfputs_r+0x12>
 8007566:	2000      	movs	r0, #0
 8007568:	e007      	b.n	800757a <__sfputs_r+0x22>
 800756a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800756e:	463a      	mov	r2, r7
 8007570:	4630      	mov	r0, r6
 8007572:	f7ff ffda 	bl	800752a <__sfputc_r>
 8007576:	1c43      	adds	r3, r0, #1
 8007578:	d1f3      	bne.n	8007562 <__sfputs_r+0xa>
 800757a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800757c <_vfiprintf_r>:
 800757c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007580:	460d      	mov	r5, r1
 8007582:	b09d      	sub	sp, #116	@ 0x74
 8007584:	4614      	mov	r4, r2
 8007586:	4698      	mov	r8, r3
 8007588:	4606      	mov	r6, r0
 800758a:	b118      	cbz	r0, 8007594 <_vfiprintf_r+0x18>
 800758c:	6a03      	ldr	r3, [r0, #32]
 800758e:	b90b      	cbnz	r3, 8007594 <_vfiprintf_r+0x18>
 8007590:	f7ff f986 	bl	80068a0 <__sinit>
 8007594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007596:	07d9      	lsls	r1, r3, #31
 8007598:	d405      	bmi.n	80075a6 <_vfiprintf_r+0x2a>
 800759a:	89ab      	ldrh	r3, [r5, #12]
 800759c:	059a      	lsls	r2, r3, #22
 800759e:	d402      	bmi.n	80075a6 <_vfiprintf_r+0x2a>
 80075a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075a2:	f7ff fa90 	bl	8006ac6 <__retarget_lock_acquire_recursive>
 80075a6:	89ab      	ldrh	r3, [r5, #12]
 80075a8:	071b      	lsls	r3, r3, #28
 80075aa:	d501      	bpl.n	80075b0 <_vfiprintf_r+0x34>
 80075ac:	692b      	ldr	r3, [r5, #16]
 80075ae:	b99b      	cbnz	r3, 80075d8 <_vfiprintf_r+0x5c>
 80075b0:	4629      	mov	r1, r5
 80075b2:	4630      	mov	r0, r6
 80075b4:	f000 f938 	bl	8007828 <__swsetup_r>
 80075b8:	b170      	cbz	r0, 80075d8 <_vfiprintf_r+0x5c>
 80075ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075bc:	07dc      	lsls	r4, r3, #31
 80075be:	d504      	bpl.n	80075ca <_vfiprintf_r+0x4e>
 80075c0:	f04f 30ff 	mov.w	r0, #4294967295
 80075c4:	b01d      	add	sp, #116	@ 0x74
 80075c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ca:	89ab      	ldrh	r3, [r5, #12]
 80075cc:	0598      	lsls	r0, r3, #22
 80075ce:	d4f7      	bmi.n	80075c0 <_vfiprintf_r+0x44>
 80075d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075d2:	f7ff fa79 	bl	8006ac8 <__retarget_lock_release_recursive>
 80075d6:	e7f3      	b.n	80075c0 <_vfiprintf_r+0x44>
 80075d8:	2300      	movs	r3, #0
 80075da:	9309      	str	r3, [sp, #36]	@ 0x24
 80075dc:	2320      	movs	r3, #32
 80075de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80075e6:	2330      	movs	r3, #48	@ 0x30
 80075e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007798 <_vfiprintf_r+0x21c>
 80075ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075f0:	f04f 0901 	mov.w	r9, #1
 80075f4:	4623      	mov	r3, r4
 80075f6:	469a      	mov	sl, r3
 80075f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075fc:	b10a      	cbz	r2, 8007602 <_vfiprintf_r+0x86>
 80075fe:	2a25      	cmp	r2, #37	@ 0x25
 8007600:	d1f9      	bne.n	80075f6 <_vfiprintf_r+0x7a>
 8007602:	ebba 0b04 	subs.w	fp, sl, r4
 8007606:	d00b      	beq.n	8007620 <_vfiprintf_r+0xa4>
 8007608:	465b      	mov	r3, fp
 800760a:	4622      	mov	r2, r4
 800760c:	4629      	mov	r1, r5
 800760e:	4630      	mov	r0, r6
 8007610:	f7ff ffa2 	bl	8007558 <__sfputs_r>
 8007614:	3001      	adds	r0, #1
 8007616:	f000 80a7 	beq.w	8007768 <_vfiprintf_r+0x1ec>
 800761a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800761c:	445a      	add	r2, fp
 800761e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007620:	f89a 3000 	ldrb.w	r3, [sl]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 809f 	beq.w	8007768 <_vfiprintf_r+0x1ec>
 800762a:	2300      	movs	r3, #0
 800762c:	f04f 32ff 	mov.w	r2, #4294967295
 8007630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007634:	f10a 0a01 	add.w	sl, sl, #1
 8007638:	9304      	str	r3, [sp, #16]
 800763a:	9307      	str	r3, [sp, #28]
 800763c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007640:	931a      	str	r3, [sp, #104]	@ 0x68
 8007642:	4654      	mov	r4, sl
 8007644:	2205      	movs	r2, #5
 8007646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800764a:	4853      	ldr	r0, [pc, #332]	@ (8007798 <_vfiprintf_r+0x21c>)
 800764c:	f7f8 fdd0 	bl	80001f0 <memchr>
 8007650:	9a04      	ldr	r2, [sp, #16]
 8007652:	b9d8      	cbnz	r0, 800768c <_vfiprintf_r+0x110>
 8007654:	06d1      	lsls	r1, r2, #27
 8007656:	bf44      	itt	mi
 8007658:	2320      	movmi	r3, #32
 800765a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800765e:	0713      	lsls	r3, r2, #28
 8007660:	bf44      	itt	mi
 8007662:	232b      	movmi	r3, #43	@ 0x2b
 8007664:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007668:	f89a 3000 	ldrb.w	r3, [sl]
 800766c:	2b2a      	cmp	r3, #42	@ 0x2a
 800766e:	d015      	beq.n	800769c <_vfiprintf_r+0x120>
 8007670:	9a07      	ldr	r2, [sp, #28]
 8007672:	4654      	mov	r4, sl
 8007674:	2000      	movs	r0, #0
 8007676:	f04f 0c0a 	mov.w	ip, #10
 800767a:	4621      	mov	r1, r4
 800767c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007680:	3b30      	subs	r3, #48	@ 0x30
 8007682:	2b09      	cmp	r3, #9
 8007684:	d94b      	bls.n	800771e <_vfiprintf_r+0x1a2>
 8007686:	b1b0      	cbz	r0, 80076b6 <_vfiprintf_r+0x13a>
 8007688:	9207      	str	r2, [sp, #28]
 800768a:	e014      	b.n	80076b6 <_vfiprintf_r+0x13a>
 800768c:	eba0 0308 	sub.w	r3, r0, r8
 8007690:	fa09 f303 	lsl.w	r3, r9, r3
 8007694:	4313      	orrs	r3, r2
 8007696:	9304      	str	r3, [sp, #16]
 8007698:	46a2      	mov	sl, r4
 800769a:	e7d2      	b.n	8007642 <_vfiprintf_r+0xc6>
 800769c:	9b03      	ldr	r3, [sp, #12]
 800769e:	1d19      	adds	r1, r3, #4
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	9103      	str	r1, [sp, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bfbb      	ittet	lt
 80076a8:	425b      	neglt	r3, r3
 80076aa:	f042 0202 	orrlt.w	r2, r2, #2
 80076ae:	9307      	strge	r3, [sp, #28]
 80076b0:	9307      	strlt	r3, [sp, #28]
 80076b2:	bfb8      	it	lt
 80076b4:	9204      	strlt	r2, [sp, #16]
 80076b6:	7823      	ldrb	r3, [r4, #0]
 80076b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80076ba:	d10a      	bne.n	80076d2 <_vfiprintf_r+0x156>
 80076bc:	7863      	ldrb	r3, [r4, #1]
 80076be:	2b2a      	cmp	r3, #42	@ 0x2a
 80076c0:	d132      	bne.n	8007728 <_vfiprintf_r+0x1ac>
 80076c2:	9b03      	ldr	r3, [sp, #12]
 80076c4:	1d1a      	adds	r2, r3, #4
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	9203      	str	r2, [sp, #12]
 80076ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076ce:	3402      	adds	r4, #2
 80076d0:	9305      	str	r3, [sp, #20]
 80076d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80077a8 <_vfiprintf_r+0x22c>
 80076d6:	7821      	ldrb	r1, [r4, #0]
 80076d8:	2203      	movs	r2, #3
 80076da:	4650      	mov	r0, sl
 80076dc:	f7f8 fd88 	bl	80001f0 <memchr>
 80076e0:	b138      	cbz	r0, 80076f2 <_vfiprintf_r+0x176>
 80076e2:	9b04      	ldr	r3, [sp, #16]
 80076e4:	eba0 000a 	sub.w	r0, r0, sl
 80076e8:	2240      	movs	r2, #64	@ 0x40
 80076ea:	4082      	lsls	r2, r0
 80076ec:	4313      	orrs	r3, r2
 80076ee:	3401      	adds	r4, #1
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f6:	4829      	ldr	r0, [pc, #164]	@ (800779c <_vfiprintf_r+0x220>)
 80076f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076fc:	2206      	movs	r2, #6
 80076fe:	f7f8 fd77 	bl	80001f0 <memchr>
 8007702:	2800      	cmp	r0, #0
 8007704:	d03f      	beq.n	8007786 <_vfiprintf_r+0x20a>
 8007706:	4b26      	ldr	r3, [pc, #152]	@ (80077a0 <_vfiprintf_r+0x224>)
 8007708:	bb1b      	cbnz	r3, 8007752 <_vfiprintf_r+0x1d6>
 800770a:	9b03      	ldr	r3, [sp, #12]
 800770c:	3307      	adds	r3, #7
 800770e:	f023 0307 	bic.w	r3, r3, #7
 8007712:	3308      	adds	r3, #8
 8007714:	9303      	str	r3, [sp, #12]
 8007716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007718:	443b      	add	r3, r7
 800771a:	9309      	str	r3, [sp, #36]	@ 0x24
 800771c:	e76a      	b.n	80075f4 <_vfiprintf_r+0x78>
 800771e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007722:	460c      	mov	r4, r1
 8007724:	2001      	movs	r0, #1
 8007726:	e7a8      	b.n	800767a <_vfiprintf_r+0xfe>
 8007728:	2300      	movs	r3, #0
 800772a:	3401      	adds	r4, #1
 800772c:	9305      	str	r3, [sp, #20]
 800772e:	4619      	mov	r1, r3
 8007730:	f04f 0c0a 	mov.w	ip, #10
 8007734:	4620      	mov	r0, r4
 8007736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800773a:	3a30      	subs	r2, #48	@ 0x30
 800773c:	2a09      	cmp	r2, #9
 800773e:	d903      	bls.n	8007748 <_vfiprintf_r+0x1cc>
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0c6      	beq.n	80076d2 <_vfiprintf_r+0x156>
 8007744:	9105      	str	r1, [sp, #20]
 8007746:	e7c4      	b.n	80076d2 <_vfiprintf_r+0x156>
 8007748:	fb0c 2101 	mla	r1, ip, r1, r2
 800774c:	4604      	mov	r4, r0
 800774e:	2301      	movs	r3, #1
 8007750:	e7f0      	b.n	8007734 <_vfiprintf_r+0x1b8>
 8007752:	ab03      	add	r3, sp, #12
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	462a      	mov	r2, r5
 8007758:	4b12      	ldr	r3, [pc, #72]	@ (80077a4 <_vfiprintf_r+0x228>)
 800775a:	a904      	add	r1, sp, #16
 800775c:	4630      	mov	r0, r6
 800775e:	f3af 8000 	nop.w
 8007762:	4607      	mov	r7, r0
 8007764:	1c78      	adds	r0, r7, #1
 8007766:	d1d6      	bne.n	8007716 <_vfiprintf_r+0x19a>
 8007768:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800776a:	07d9      	lsls	r1, r3, #31
 800776c:	d405      	bmi.n	800777a <_vfiprintf_r+0x1fe>
 800776e:	89ab      	ldrh	r3, [r5, #12]
 8007770:	059a      	lsls	r2, r3, #22
 8007772:	d402      	bmi.n	800777a <_vfiprintf_r+0x1fe>
 8007774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007776:	f7ff f9a7 	bl	8006ac8 <__retarget_lock_release_recursive>
 800777a:	89ab      	ldrh	r3, [r5, #12]
 800777c:	065b      	lsls	r3, r3, #25
 800777e:	f53f af1f 	bmi.w	80075c0 <_vfiprintf_r+0x44>
 8007782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007784:	e71e      	b.n	80075c4 <_vfiprintf_r+0x48>
 8007786:	ab03      	add	r3, sp, #12
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	462a      	mov	r2, r5
 800778c:	4b05      	ldr	r3, [pc, #20]	@ (80077a4 <_vfiprintf_r+0x228>)
 800778e:	a904      	add	r1, sp, #16
 8007790:	4630      	mov	r0, r6
 8007792:	f7ff fc7f 	bl	8007094 <_printf_i>
 8007796:	e7e4      	b.n	8007762 <_vfiprintf_r+0x1e6>
 8007798:	08007ecb 	.word	0x08007ecb
 800779c:	08007ed5 	.word	0x08007ed5
 80077a0:	00000000 	.word	0x00000000
 80077a4:	08007559 	.word	0x08007559
 80077a8:	08007ed1 	.word	0x08007ed1

080077ac <__swbuf_r>:
 80077ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ae:	460e      	mov	r6, r1
 80077b0:	4614      	mov	r4, r2
 80077b2:	4605      	mov	r5, r0
 80077b4:	b118      	cbz	r0, 80077be <__swbuf_r+0x12>
 80077b6:	6a03      	ldr	r3, [r0, #32]
 80077b8:	b90b      	cbnz	r3, 80077be <__swbuf_r+0x12>
 80077ba:	f7ff f871 	bl	80068a0 <__sinit>
 80077be:	69a3      	ldr	r3, [r4, #24]
 80077c0:	60a3      	str	r3, [r4, #8]
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	071a      	lsls	r2, r3, #28
 80077c6:	d501      	bpl.n	80077cc <__swbuf_r+0x20>
 80077c8:	6923      	ldr	r3, [r4, #16]
 80077ca:	b943      	cbnz	r3, 80077de <__swbuf_r+0x32>
 80077cc:	4621      	mov	r1, r4
 80077ce:	4628      	mov	r0, r5
 80077d0:	f000 f82a 	bl	8007828 <__swsetup_r>
 80077d4:	b118      	cbz	r0, 80077de <__swbuf_r+0x32>
 80077d6:	f04f 37ff 	mov.w	r7, #4294967295
 80077da:	4638      	mov	r0, r7
 80077dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	6922      	ldr	r2, [r4, #16]
 80077e2:	1a98      	subs	r0, r3, r2
 80077e4:	6963      	ldr	r3, [r4, #20]
 80077e6:	b2f6      	uxtb	r6, r6
 80077e8:	4283      	cmp	r3, r0
 80077ea:	4637      	mov	r7, r6
 80077ec:	dc05      	bgt.n	80077fa <__swbuf_r+0x4e>
 80077ee:	4621      	mov	r1, r4
 80077f0:	4628      	mov	r0, r5
 80077f2:	f7ff fdf3 	bl	80073dc <_fflush_r>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d1ed      	bne.n	80077d6 <__swbuf_r+0x2a>
 80077fa:	68a3      	ldr	r3, [r4, #8]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	60a3      	str	r3, [r4, #8]
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	6022      	str	r2, [r4, #0]
 8007806:	701e      	strb	r6, [r3, #0]
 8007808:	6962      	ldr	r2, [r4, #20]
 800780a:	1c43      	adds	r3, r0, #1
 800780c:	429a      	cmp	r2, r3
 800780e:	d004      	beq.n	800781a <__swbuf_r+0x6e>
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	07db      	lsls	r3, r3, #31
 8007814:	d5e1      	bpl.n	80077da <__swbuf_r+0x2e>
 8007816:	2e0a      	cmp	r6, #10
 8007818:	d1df      	bne.n	80077da <__swbuf_r+0x2e>
 800781a:	4621      	mov	r1, r4
 800781c:	4628      	mov	r0, r5
 800781e:	f7ff fddd 	bl	80073dc <_fflush_r>
 8007822:	2800      	cmp	r0, #0
 8007824:	d0d9      	beq.n	80077da <__swbuf_r+0x2e>
 8007826:	e7d6      	b.n	80077d6 <__swbuf_r+0x2a>

08007828 <__swsetup_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4b29      	ldr	r3, [pc, #164]	@ (80078d0 <__swsetup_r+0xa8>)
 800782c:	4605      	mov	r5, r0
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	460c      	mov	r4, r1
 8007832:	b118      	cbz	r0, 800783c <__swsetup_r+0x14>
 8007834:	6a03      	ldr	r3, [r0, #32]
 8007836:	b90b      	cbnz	r3, 800783c <__swsetup_r+0x14>
 8007838:	f7ff f832 	bl	80068a0 <__sinit>
 800783c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007840:	0719      	lsls	r1, r3, #28
 8007842:	d422      	bmi.n	800788a <__swsetup_r+0x62>
 8007844:	06da      	lsls	r2, r3, #27
 8007846:	d407      	bmi.n	8007858 <__swsetup_r+0x30>
 8007848:	2209      	movs	r2, #9
 800784a:	602a      	str	r2, [r5, #0]
 800784c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007850:	81a3      	strh	r3, [r4, #12]
 8007852:	f04f 30ff 	mov.w	r0, #4294967295
 8007856:	e033      	b.n	80078c0 <__swsetup_r+0x98>
 8007858:	0758      	lsls	r0, r3, #29
 800785a:	d512      	bpl.n	8007882 <__swsetup_r+0x5a>
 800785c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800785e:	b141      	cbz	r1, 8007872 <__swsetup_r+0x4a>
 8007860:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007864:	4299      	cmp	r1, r3
 8007866:	d002      	beq.n	800786e <__swsetup_r+0x46>
 8007868:	4628      	mov	r0, r5
 800786a:	f7ff f94d 	bl	8006b08 <_free_r>
 800786e:	2300      	movs	r3, #0
 8007870:	6363      	str	r3, [r4, #52]	@ 0x34
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	2300      	movs	r3, #0
 800787c:	6063      	str	r3, [r4, #4]
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	f043 0308 	orr.w	r3, r3, #8
 8007888:	81a3      	strh	r3, [r4, #12]
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	b94b      	cbnz	r3, 80078a2 <__swsetup_r+0x7a>
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007898:	d003      	beq.n	80078a2 <__swsetup_r+0x7a>
 800789a:	4621      	mov	r1, r4
 800789c:	4628      	mov	r0, r5
 800789e:	f000 f88b 	bl	80079b8 <__smakebuf_r>
 80078a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a6:	f013 0201 	ands.w	r2, r3, #1
 80078aa:	d00a      	beq.n	80078c2 <__swsetup_r+0x9a>
 80078ac:	2200      	movs	r2, #0
 80078ae:	60a2      	str	r2, [r4, #8]
 80078b0:	6962      	ldr	r2, [r4, #20]
 80078b2:	4252      	negs	r2, r2
 80078b4:	61a2      	str	r2, [r4, #24]
 80078b6:	6922      	ldr	r2, [r4, #16]
 80078b8:	b942      	cbnz	r2, 80078cc <__swsetup_r+0xa4>
 80078ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078be:	d1c5      	bne.n	800784c <__swsetup_r+0x24>
 80078c0:	bd38      	pop	{r3, r4, r5, pc}
 80078c2:	0799      	lsls	r1, r3, #30
 80078c4:	bf58      	it	pl
 80078c6:	6962      	ldrpl	r2, [r4, #20]
 80078c8:	60a2      	str	r2, [r4, #8]
 80078ca:	e7f4      	b.n	80078b6 <__swsetup_r+0x8e>
 80078cc:	2000      	movs	r0, #0
 80078ce:	e7f7      	b.n	80078c0 <__swsetup_r+0x98>
 80078d0:	20000020 	.word	0x20000020

080078d4 <_raise_r>:
 80078d4:	291f      	cmp	r1, #31
 80078d6:	b538      	push	{r3, r4, r5, lr}
 80078d8:	4605      	mov	r5, r0
 80078da:	460c      	mov	r4, r1
 80078dc:	d904      	bls.n	80078e8 <_raise_r+0x14>
 80078de:	2316      	movs	r3, #22
 80078e0:	6003      	str	r3, [r0, #0]
 80078e2:	f04f 30ff 	mov.w	r0, #4294967295
 80078e6:	bd38      	pop	{r3, r4, r5, pc}
 80078e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80078ea:	b112      	cbz	r2, 80078f2 <_raise_r+0x1e>
 80078ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078f0:	b94b      	cbnz	r3, 8007906 <_raise_r+0x32>
 80078f2:	4628      	mov	r0, r5
 80078f4:	f000 f830 	bl	8007958 <_getpid_r>
 80078f8:	4622      	mov	r2, r4
 80078fa:	4601      	mov	r1, r0
 80078fc:	4628      	mov	r0, r5
 80078fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007902:	f000 b817 	b.w	8007934 <_kill_r>
 8007906:	2b01      	cmp	r3, #1
 8007908:	d00a      	beq.n	8007920 <_raise_r+0x4c>
 800790a:	1c59      	adds	r1, r3, #1
 800790c:	d103      	bne.n	8007916 <_raise_r+0x42>
 800790e:	2316      	movs	r3, #22
 8007910:	6003      	str	r3, [r0, #0]
 8007912:	2001      	movs	r0, #1
 8007914:	e7e7      	b.n	80078e6 <_raise_r+0x12>
 8007916:	2100      	movs	r1, #0
 8007918:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800791c:	4620      	mov	r0, r4
 800791e:	4798      	blx	r3
 8007920:	2000      	movs	r0, #0
 8007922:	e7e0      	b.n	80078e6 <_raise_r+0x12>

08007924 <raise>:
 8007924:	4b02      	ldr	r3, [pc, #8]	@ (8007930 <raise+0xc>)
 8007926:	4601      	mov	r1, r0
 8007928:	6818      	ldr	r0, [r3, #0]
 800792a:	f7ff bfd3 	b.w	80078d4 <_raise_r>
 800792e:	bf00      	nop
 8007930:	20000020 	.word	0x20000020

08007934 <_kill_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	4d07      	ldr	r5, [pc, #28]	@ (8007954 <_kill_r+0x20>)
 8007938:	2300      	movs	r3, #0
 800793a:	4604      	mov	r4, r0
 800793c:	4608      	mov	r0, r1
 800793e:	4611      	mov	r1, r2
 8007940:	602b      	str	r3, [r5, #0]
 8007942:	f7fa fda1 	bl	8002488 <_kill>
 8007946:	1c43      	adds	r3, r0, #1
 8007948:	d102      	bne.n	8007950 <_kill_r+0x1c>
 800794a:	682b      	ldr	r3, [r5, #0]
 800794c:	b103      	cbz	r3, 8007950 <_kill_r+0x1c>
 800794e:	6023      	str	r3, [r4, #0]
 8007950:	bd38      	pop	{r3, r4, r5, pc}
 8007952:	bf00      	nop
 8007954:	2000042c 	.word	0x2000042c

08007958 <_getpid_r>:
 8007958:	f7fa bd8e 	b.w	8002478 <_getpid>

0800795c <_malloc_usable_size_r>:
 800795c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007960:	1f18      	subs	r0, r3, #4
 8007962:	2b00      	cmp	r3, #0
 8007964:	bfbc      	itt	lt
 8007966:	580b      	ldrlt	r3, [r1, r0]
 8007968:	18c0      	addlt	r0, r0, r3
 800796a:	4770      	bx	lr

0800796c <__swhatbuf_r>:
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	460c      	mov	r4, r1
 8007970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007974:	2900      	cmp	r1, #0
 8007976:	b096      	sub	sp, #88	@ 0x58
 8007978:	4615      	mov	r5, r2
 800797a:	461e      	mov	r6, r3
 800797c:	da0d      	bge.n	800799a <__swhatbuf_r+0x2e>
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007984:	f04f 0100 	mov.w	r1, #0
 8007988:	bf14      	ite	ne
 800798a:	2340      	movne	r3, #64	@ 0x40
 800798c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007990:	2000      	movs	r0, #0
 8007992:	6031      	str	r1, [r6, #0]
 8007994:	602b      	str	r3, [r5, #0]
 8007996:	b016      	add	sp, #88	@ 0x58
 8007998:	bd70      	pop	{r4, r5, r6, pc}
 800799a:	466a      	mov	r2, sp
 800799c:	f000 f848 	bl	8007a30 <_fstat_r>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	dbec      	blt.n	800797e <__swhatbuf_r+0x12>
 80079a4:	9901      	ldr	r1, [sp, #4]
 80079a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079ae:	4259      	negs	r1, r3
 80079b0:	4159      	adcs	r1, r3
 80079b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079b6:	e7eb      	b.n	8007990 <__swhatbuf_r+0x24>

080079b8 <__smakebuf_r>:
 80079b8:	898b      	ldrh	r3, [r1, #12]
 80079ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079bc:	079d      	lsls	r5, r3, #30
 80079be:	4606      	mov	r6, r0
 80079c0:	460c      	mov	r4, r1
 80079c2:	d507      	bpl.n	80079d4 <__smakebuf_r+0x1c>
 80079c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	6123      	str	r3, [r4, #16]
 80079cc:	2301      	movs	r3, #1
 80079ce:	6163      	str	r3, [r4, #20]
 80079d0:	b003      	add	sp, #12
 80079d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d4:	ab01      	add	r3, sp, #4
 80079d6:	466a      	mov	r2, sp
 80079d8:	f7ff ffc8 	bl	800796c <__swhatbuf_r>
 80079dc:	9f00      	ldr	r7, [sp, #0]
 80079de:	4605      	mov	r5, r0
 80079e0:	4639      	mov	r1, r7
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7ff f904 	bl	8006bf0 <_malloc_r>
 80079e8:	b948      	cbnz	r0, 80079fe <__smakebuf_r+0x46>
 80079ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ee:	059a      	lsls	r2, r3, #22
 80079f0:	d4ee      	bmi.n	80079d0 <__smakebuf_r+0x18>
 80079f2:	f023 0303 	bic.w	r3, r3, #3
 80079f6:	f043 0302 	orr.w	r3, r3, #2
 80079fa:	81a3      	strh	r3, [r4, #12]
 80079fc:	e7e2      	b.n	80079c4 <__smakebuf_r+0xc>
 80079fe:	89a3      	ldrh	r3, [r4, #12]
 8007a00:	6020      	str	r0, [r4, #0]
 8007a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a0e:	b15b      	cbz	r3, 8007a28 <__smakebuf_r+0x70>
 8007a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a14:	4630      	mov	r0, r6
 8007a16:	f000 f81d 	bl	8007a54 <_isatty_r>
 8007a1a:	b128      	cbz	r0, 8007a28 <__smakebuf_r+0x70>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	f023 0303 	bic.w	r3, r3, #3
 8007a22:	f043 0301 	orr.w	r3, r3, #1
 8007a26:	81a3      	strh	r3, [r4, #12]
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	431d      	orrs	r5, r3
 8007a2c:	81a5      	strh	r5, [r4, #12]
 8007a2e:	e7cf      	b.n	80079d0 <__smakebuf_r+0x18>

08007a30 <_fstat_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4d07      	ldr	r5, [pc, #28]	@ (8007a50 <_fstat_r+0x20>)
 8007a34:	2300      	movs	r3, #0
 8007a36:	4604      	mov	r4, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	602b      	str	r3, [r5, #0]
 8007a3e:	f7fa fd83 	bl	8002548 <_fstat>
 8007a42:	1c43      	adds	r3, r0, #1
 8007a44:	d102      	bne.n	8007a4c <_fstat_r+0x1c>
 8007a46:	682b      	ldr	r3, [r5, #0]
 8007a48:	b103      	cbz	r3, 8007a4c <_fstat_r+0x1c>
 8007a4a:	6023      	str	r3, [r4, #0]
 8007a4c:	bd38      	pop	{r3, r4, r5, pc}
 8007a4e:	bf00      	nop
 8007a50:	2000042c 	.word	0x2000042c

08007a54 <_isatty_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4d06      	ldr	r5, [pc, #24]	@ (8007a70 <_isatty_r+0x1c>)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	602b      	str	r3, [r5, #0]
 8007a60:	f7fa fd82 	bl	8002568 <_isatty>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_isatty_r+0x1a>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_isatty_r+0x1a>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	2000042c 	.word	0x2000042c

08007a74 <_init>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	bf00      	nop
 8007a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7a:	bc08      	pop	{r3}
 8007a7c:	469e      	mov	lr, r3
 8007a7e:	4770      	bx	lr

08007a80 <_fini>:
 8007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a82:	bf00      	nop
 8007a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a86:	bc08      	pop	{r3}
 8007a88:	469e      	mov	lr, r3
 8007a8a:	4770      	bx	lr
